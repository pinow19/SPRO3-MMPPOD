
Maze_solver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00001356  000013ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001d8  008001d8  000014c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001218  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a97  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b77  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00003e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b0  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d7  00000000  00000000  00004748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004e1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e5       	ldi	r30, 0x56	; 86
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3e       	cpi	r26, 0xEC	; 236
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int count = 0;
int correcting = 0;

int main(void)
{
	set_pins();
      a6:	0e 94 35 04 	call	0x86a	; 0x86a <set_pins>
		
	uart_init();
      aa:	0e 94 76 04 	call	0x8ec	; 0x8ec <uart_init>
	io_redirect();
      ae:	0e 94 87 04 	call	0x90e	; 0x90e <io_redirect>
	
    while (1) 
    {
		int PWMR = 100;
		int PWML = 100;
		FrontSensor = ultrasound_sensor(U_FRONT);
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 c0 03 	call	0x780	; 0x780 <ultrasound_sensor>
      b8:	8c 01       	movw	r16, r24
		RightSensor = ultrasound_sensor(U_RIGHT);
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	0e 94 c0 03 	call	0x780	; 0x780 <ultrasound_sensor>
      c0:	7c 01       	movw	r14, r24
		LeftSensor = ultrasound_sensor(U_LEFT);
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	0e 94 c0 03 	call	0x780	; 0x780 <ultrasound_sensor>
      c8:	ec 01       	movw	r28, r24
		
		printf("Front: %d\n", FrontSensor);
      ca:	1f 93       	push	r17
      cc:	0f 93       	push	r16
      ce:	8c e1       	ldi	r24, 0x1C	; 28
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	9f 93       	push	r25
      d4:	8f 93       	push	r24
      d6:	0e 94 9b 06 	call	0xd36	; 0xd36 <printf>
		printf("Left: %d\n", LeftSensor);
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	87 e2       	ldi	r24, 0x27	; 39
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	9f 93       	push	r25
      e4:	8f 93       	push	r24
      e6:	0e 94 9b 06 	call	0xd36	; 0xd36 <printf>
		printf("Right: %d\n\n", RightSensor);	
      ea:	ff 92       	push	r15
      ec:	ef 92       	push	r14
      ee:	81 e3       	ldi	r24, 0x31	; 49
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	9f 93       	push	r25
      f4:	8f 93       	push	r24
      f6:	0e 94 9b 06 	call	0xd36	; 0xd36 <printf>
		
		
		//There are seven cases our robot can come into contact with a obstacle and needs to avoid it
		
		//Case 1: When all three walls are within the defined range
		if (FrontSensor < DIS_F && RightSensor < DIS && LeftSensor < DIS)
      fa:	8d b7       	in	r24, 0x3d	; 61
      fc:	9e b7       	in	r25, 0x3e	; 62
      fe:	0c 96       	adiw	r24, 0x0c	; 12
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	9e bf       	out	0x3e, r25	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	8d bf       	out	0x3d, r24	; 61
     10a:	04 31       	cpi	r16, 0x14	; 20
     10c:	11 05       	cpc	r17, r1
     10e:	08 f0       	brcs	.+2      	; 0x112 <main+0x6c>
     110:	52 c0       	rjmp	.+164    	; 0x1b6 <main+0x110>
     112:	99 e1       	ldi	r25, 0x19	; 25
     114:	e9 16       	cp	r14, r25
     116:	f1 04       	cpc	r15, r1
     118:	08 f0       	brcs	.+2      	; 0x11c <main+0x76>
     11a:	4d c0       	rjmp	.+154    	; 0x1b6 <main+0x110>
     11c:	c9 31       	cpi	r28, 0x19	; 25
     11e:	d1 05       	cpc	r29, r1
     120:	08 f0       	brcs	.+2      	; 0x124 <main+0x7e>
     122:	49 c0       	rjmp	.+146    	; 0x1b6 <main+0x110>
		{
			printf("All three walls wrong\n");
     124:	8d e3       	ldi	r24, 0x3D	; 61
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
			if (RightSensor > LeftSensor)
     12c:	ce 15       	cp	r28, r14
     12e:	df 05       	cpc	r29, r15
     130:	08 f5       	brcc	.+66     	; 0x174 <main+0xce>
			{
							select_motor_direction(STOP, PWML, PWML);
     132:	44 e6       	ldi	r20, 0x64	; 100
     134:	64 e6       	ldi	r22, 0x64	; 100
     136:	84 e0       	ldi	r24, 0x04	; 4
     138:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
							printf("STOPPPPP\n");
     13c:	83 e5       	ldi	r24, 0x53	; 83
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     144:	2f ef       	ldi	r18, 0xFF	; 255
     146:	83 ed       	ldi	r24, 0xD3	; 211
     148:	90 e3       	ldi	r25, 0x30	; 48
     14a:	21 50       	subi	r18, 0x01	; 1
     14c:	80 40       	sbci	r24, 0x00	; 0
     14e:	90 40       	sbci	r25, 0x00	; 0
     150:	e1 f7       	brne	.-8      	; 0x14a <main+0xa4>
     152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xae>
     154:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(RIGHT, PWML, PWMR);
     156:	44 e6       	ldi	r20, 0x64	; 100
     158:	64 e6       	ldi	r22, 0x64	; 100
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	83 ed       	ldi	r24, 0xD3	; 211
     164:	90 e3       	ldi	r25, 0x30	; 48
     166:	21 50       	subi	r18, 0x01	; 1
     168:	80 40       	sbci	r24, 0x00	; 0
     16a:	90 40       	sbci	r25, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <main+0xc0>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xca>
     170:	00 00       	nop
     172:	9f cf       	rjmp	.-194    	; 0xb2 <main+0xc>
				_delay_ms(_180_degrees); //Time to turn the robot 180degrees
			} 
			else
			{
							select_motor_direction(STOP, PWML, PWMR);
     174:	44 e6       	ldi	r20, 0x64	; 100
     176:	64 e6       	ldi	r22, 0x64	; 100
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
							printf("STOPPPPP\n");
     17e:	83 e5       	ldi	r24, 0x53	; 83
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
     186:	2f ef       	ldi	r18, 0xFF	; 255
     188:	83 ed       	ldi	r24, 0xD3	; 211
     18a:	90 e3       	ldi	r25, 0x30	; 48
     18c:	21 50       	subi	r18, 0x01	; 1
     18e:	80 40       	sbci	r24, 0x00	; 0
     190:	90 40       	sbci	r25, 0x00	; 0
     192:	e1 f7       	brne	.-8      	; 0x18c <main+0xe6>
     194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xf0>
     196:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(LEFT, PWML, PWMR);
     198:	44 e6       	ldi	r20, 0x64	; 100
     19a:	64 e6       	ldi	r22, 0x64	; 100
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     1a2:	2f ef       	ldi	r18, 0xFF	; 255
     1a4:	83 ed       	ldi	r24, 0xD3	; 211
     1a6:	90 e3       	ldi	r25, 0x30	; 48
     1a8:	21 50       	subi	r18, 0x01	; 1
     1aa:	80 40       	sbci	r24, 0x00	; 0
     1ac:	90 40       	sbci	r25, 0x00	; 0
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x102>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x10c>
     1b2:	00 00       	nop
     1b4:	7e cf       	rjmp	.-260    	; 0xb2 <main+0xc>
				_delay_ms(_180_degrees);
			}
		}
		
		//Case 2: When front is block
		else if (FrontSensor < DIS_F && RightSensor > DIS && LeftSensor > DIS)
     1b6:	04 31       	cpi	r16, 0x14	; 20
     1b8:	11 05       	cpc	r17, r1
     1ba:	08 f0       	brcs	.+2      	; 0x1be <main+0x118>
     1bc:	52 c0       	rjmp	.+164    	; 0x262 <main+0x1bc>
     1be:	2a e1       	ldi	r18, 0x1A	; 26
     1c0:	e2 16       	cp	r14, r18
     1c2:	f1 04       	cpc	r15, r1
     1c4:	08 f4       	brcc	.+2      	; 0x1c8 <main+0x122>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <main+0x1bc>
     1c8:	ca 31       	cpi	r28, 0x1A	; 26
     1ca:	d1 05       	cpc	r29, r1
     1cc:	08 f4       	brcc	.+2      	; 0x1d0 <main+0x12a>
     1ce:	49 c0       	rjmp	.+146    	; 0x262 <main+0x1bc>
		{
			printf("Front wall ahead\n");
     1d0:	8c e5       	ldi	r24, 0x5C	; 92
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
			if (RightSensor > LeftSensor)
     1d8:	ce 15       	cp	r28, r14
     1da:	df 05       	cpc	r29, r15
     1dc:	08 f5       	brcc	.+66     	; 0x220 <main+0x17a>
			{
							select_motor_direction(STOP, PWML, PWMR);
     1de:	44 e6       	ldi	r20, 0x64	; 100
     1e0:	64 e6       	ldi	r22, 0x64	; 100
     1e2:	84 e0       	ldi	r24, 0x04	; 4
     1e4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
							printf("STOPPPPP\n");
     1e8:	83 e5       	ldi	r24, 0x53	; 83
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	93 ed       	ldi	r25, 0xD3	; 211
     1f4:	20 e3       	ldi	r18, 0x30	; 48
     1f6:	81 50       	subi	r24, 0x01	; 1
     1f8:	90 40       	sbci	r25, 0x00	; 0
     1fa:	20 40       	sbci	r18, 0x00	; 0
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x150>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x15a>
     200:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(RIGHT, PWML, PWMR);
     202:	44 e6       	ldi	r20, 0x64	; 100
     204:	64 e6       	ldi	r22, 0x64	; 100
     206:	83 e0       	ldi	r24, 0x03	; 3
     208:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	9a ed       	ldi	r25, 0xDA	; 218
     210:	2a e1       	ldi	r18, 0x1A	; 26
     212:	81 50       	subi	r24, 0x01	; 1
     214:	90 40       	sbci	r25, 0x00	; 0
     216:	20 40       	sbci	r18, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <main+0x16c>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x176>
     21c:	00 00       	nop
     21e:	49 cf       	rjmp	.-366    	; 0xb2 <main+0xc>
				_delay_ms(_90_degrees);
			} 
			else
			{
							select_motor_direction(STOP, PWML, PWMR);
     220:	44 e6       	ldi	r20, 0x64	; 100
     222:	64 e6       	ldi	r22, 0x64	; 100
     224:	84 e0       	ldi	r24, 0x04	; 4
     226:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
							printf("STOPPPPP\n");
     22a:	83 e5       	ldi	r24, 0x53	; 83
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	93 ed       	ldi	r25, 0xD3	; 211
     236:	20 e3       	ldi	r18, 0x30	; 48
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	90 40       	sbci	r25, 0x00	; 0
     23c:	20 40       	sbci	r18, 0x00	; 0
     23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x192>
     240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x19c>
     242:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(LEFT, PWML, PWMR);
     244:	44 e6       	ldi	r20, 0x64	; 100
     246:	64 e6       	ldi	r22, 0x64	; 100
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	9a ed       	ldi	r25, 0xDA	; 218
     252:	2a e1       	ldi	r18, 0x1A	; 26
     254:	81 50       	subi	r24, 0x01	; 1
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	20 40       	sbci	r18, 0x00	; 0
     25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1ae>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1b8>
     25e:	00 00       	nop
     260:	28 cf       	rjmp	.-432    	; 0xb2 <main+0xc>
			select_motor_direction(FORWARD);
		}
		*/
		//Case 5: When the front and left is blocked
		
		else if (FrontSensor < DIS_F && RightSensor > DIS && LeftSensor < DIS)
     262:	04 31       	cpi	r16, 0x14	; 20
     264:	11 05       	cpc	r17, r1
     266:	08 f0       	brcs	.+2      	; 0x26a <main+0x1c4>
     268:	49 c0       	rjmp	.+146    	; 0x2fc <main+0x256>
     26a:	8a e1       	ldi	r24, 0x1A	; 26
     26c:	e8 16       	cp	r14, r24
     26e:	f1 04       	cpc	r15, r1
     270:	08 f4       	brcc	.+2      	; 0x274 <main+0x1ce>
     272:	44 c0       	rjmp	.+136    	; 0x2fc <main+0x256>
     274:	c9 31       	cpi	r28, 0x19	; 25
     276:	d1 05       	cpc	r29, r1
     278:	08 f0       	brcs	.+2      	; 0x27c <main+0x1d6>
     27a:	40 c0       	rjmp	.+128    	; 0x2fc <main+0x256>
		{
			select_motor_direction(STOP, PWML, PWMR);
     27c:	44 e6       	ldi	r20, 0x64	; 100
     27e:	64 e6       	ldi	r22, 0x64	; 100
     280:	84 e0       	ldi	r24, 0x04	; 4
     282:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
			printf("STOPPPPPright\n");
     286:	8d e6       	ldi	r24, 0x6D	; 109
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
     28e:	9f ef       	ldi	r25, 0xFF	; 255
     290:	23 ed       	ldi	r18, 0xD3	; 211
     292:	80 e3       	ldi	r24, 0x30	; 48
     294:	91 50       	subi	r25, 0x01	; 1
     296:	20 40       	sbci	r18, 0x00	; 0
     298:	80 40       	sbci	r24, 0x00	; 0
     29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x1ee>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x1f8>
     29e:	00 00       	nop
			_delay_ms(1000);
			
			
			printf("lol\n");
     2a0:	8b e7       	ldi	r24, 0x7B	; 123
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
			for(int i = 0; i<3; i++){
     2a8:	c0 e0       	ldi	r28, 0x00	; 0
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
     2ac:	1a c0       	rjmp	.+52     	; 0x2e2 <main+0x23c>
				select_motor_direction(LEFT, 100, 100); //MAKE SURE THE WIRING IS GOOD
     2ae:	44 e6       	ldi	r20, 0x64	; 100
     2b0:	64 e6       	ldi	r22, 0x64	; 100
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
				opto_turn(3, OP_LEFT);
     2b8:	62 e0       	ldi	r22, 0x02	; 2
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 2d 02 	call	0x45a	; 0x45a <opto_turn>
				select_motor_direction(STOP, PWML, PWMR);
     2c4:	44 e6       	ldi	r20, 0x64	; 100
     2c6:	64 e6       	ldi	r22, 0x64	; 100
     2c8:	84 e0       	ldi	r24, 0x04	; 4
     2ca:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     2ce:	9f ef       	ldi	r25, 0xFF	; 255
     2d0:	23 ec       	ldi	r18, 0xC3	; 195
     2d2:	89 e0       	ldi	r24, 0x09	; 9
     2d4:	91 50       	subi	r25, 0x01	; 1
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	80 40       	sbci	r24, 0x00	; 0
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x22e>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x238>
     2de:	00 00       	nop
			printf("STOPPPPPright\n");
			_delay_ms(1000);
			
			
			printf("lol\n");
			for(int i = 0; i<3; i++){
     2e0:	21 96       	adiw	r28, 0x01	; 1
     2e2:	c3 30       	cpi	r28, 0x03	; 3
     2e4:	d1 05       	cpc	r29, r1
     2e6:	1c f3       	brlt	.-58     	; 0x2ae <main+0x208>
				select_motor_direction(LEFT, 100, 100); //MAKE SURE THE WIRING IS GOOD
				opto_turn(3, OP_LEFT);
				select_motor_direction(STOP, PWML, PWMR);
				_delay_ms(200);
			}
			printf("lol2\n");
     2e8:	8f e7       	ldi	r24, 0x7F	; 127
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
			select_motor_direction(STOP, PWML, PWMR);
     2f0:	44 e6       	ldi	r20, 0x64	; 100
     2f2:	64 e6       	ldi	r22, 0x64	; 100
     2f4:	84 e0       	ldi	r24, 0x04	; 4
     2f6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     2fa:	db ce       	rjmp	.-586    	; 0xb2 <main+0xc>
			
		}
		//Case 6: When the front and right is blocked
		else if (FrontSensor < DIS_F && RightSensor < DIS && LeftSensor > DIS)
     2fc:	04 31       	cpi	r16, 0x14	; 20
     2fe:	11 05       	cpc	r17, r1
     300:	08 f0       	brcs	.+2      	; 0x304 <main+0x25e>
     302:	49 c0       	rjmp	.+146    	; 0x396 <main+0x2f0>
     304:	99 e1       	ldi	r25, 0x19	; 25
     306:	e9 16       	cp	r14, r25
     308:	f1 04       	cpc	r15, r1
     30a:	08 f0       	brcs	.+2      	; 0x30e <main+0x268>
     30c:	44 c0       	rjmp	.+136    	; 0x396 <main+0x2f0>
     30e:	ca 31       	cpi	r28, 0x1A	; 26
     310:	d1 05       	cpc	r29, r1
     312:	08 f4       	brcc	.+2      	; 0x316 <main+0x270>
     314:	40 c0       	rjmp	.+128    	; 0x396 <main+0x2f0>
		{
			select_motor_direction(STOP, PWML, PWMR);
     316:	44 e6       	ldi	r20, 0x64	; 100
     318:	64 e6       	ldi	r22, 0x64	; 100
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
			printf("STOPPPPPleft\n");
     320:	84 e8       	ldi	r24, 0x84	; 132
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
     328:	2f ef       	ldi	r18, 0xFF	; 255
     32a:	83 ed       	ldi	r24, 0xD3	; 211
     32c:	90 e3       	ldi	r25, 0x30	; 48
     32e:	21 50       	subi	r18, 0x01	; 1
     330:	80 40       	sbci	r24, 0x00	; 0
     332:	90 40       	sbci	r25, 0x00	; 0
     334:	e1 f7       	brne	.-8      	; 0x32e <main+0x288>
     336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x292>
     338:	00 00       	nop
			_delay_ms(1000);
			
			 
			printf("lol\n");
     33a:	8b e7       	ldi	r24, 0x7B	; 123
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
			for(int i = 0; i<3; i++){
     342:	c0 e0       	ldi	r28, 0x00	; 0
     344:	d0 e0       	ldi	r29, 0x00	; 0
     346:	1a c0       	rjmp	.+52     	; 0x37c <main+0x2d6>
			select_motor_direction(RIGHT, 100, 100); //MAKE SURE THE WIRING IS GOOD
     348:	44 e6       	ldi	r20, 0x64	; 100
     34a:	64 e6       	ldi	r22, 0x64	; 100
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
			opto_turn(3, OP_RIGHT);
     352:	63 e0       	ldi	r22, 0x03	; 3
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 2d 02 	call	0x45a	; 0x45a <opto_turn>
			select_motor_direction(STOP, PWML, PWMR);
     35e:	44 e6       	ldi	r20, 0x64	; 100
     360:	64 e6       	ldi	r22, 0x64	; 100
     362:	84 e0       	ldi	r24, 0x04	; 4
     364:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     368:	2f ef       	ldi	r18, 0xFF	; 255
     36a:	83 ec       	ldi	r24, 0xC3	; 195
     36c:	99 e0       	ldi	r25, 0x09	; 9
     36e:	21 50       	subi	r18, 0x01	; 1
     370:	80 40       	sbci	r24, 0x00	; 0
     372:	90 40       	sbci	r25, 0x00	; 0
     374:	e1 f7       	brne	.-8      	; 0x36e <main+0x2c8>
     376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x2d2>
     378:	00 00       	nop
			printf("STOPPPPPleft\n");
			_delay_ms(1000);
			
			 
			printf("lol\n");
			for(int i = 0; i<3; i++){
     37a:	21 96       	adiw	r28, 0x01	; 1
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	d1 05       	cpc	r29, r1
     380:	1c f3       	brlt	.-58     	; 0x348 <main+0x2a2>
			select_motor_direction(RIGHT, 100, 100); //MAKE SURE THE WIRING IS GOOD
			opto_turn(3, OP_RIGHT);
			select_motor_direction(STOP, PWML, PWMR);
			_delay_ms(200);
			}
			printf("lol2\n");
     382:	8f e7       	ldi	r24, 0x7F	; 127
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
			select_motor_direction(STOP, PWML, PWMR);
     38a:	44 e6       	ldi	r20, 0x64	; 100
     38c:	64 e6       	ldi	r22, 0x64	; 100
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
     394:	8e ce       	rjmp	.-740    	; 0xb2 <main+0xc>
		}
		
		//Case 7: If the sides are small but the front is free or all sides are free then move forward
		else
		{
			printf("Everything is ok!\n");
     396:	81 e9       	ldi	r24, 0x91	; 145
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0e 94 b1 06 	call	0xd62	; 0xd62 <puts>
			select_motor_direction(FORWARD, PWML, PWMR);
     39e:	44 e6       	ldi	r20, 0x64	; 100
     3a0:	64 e6       	ldi	r22, 0x64	; 100
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
			if (RightSensor>LeftSensor){
     3a8:	ce 15       	cp	r28, r14
     3aa:	df 05       	cpc	r29, r15
     3ac:	08 f1       	brcs	.+66     	; 0x3f0 <main+0x34a>
     3ae:	24 c0       	rjmp	.+72     	; 0x3f8 <main+0x352>
				while(RightSensor>LeftSensor){
				correcting = RightSensor-LeftSensor;
     3b0:	ec 1a       	sub	r14, r28
     3b2:	fd 0a       	sbc	r15, r29
     3b4:	f0 92 d9 01 	sts	0x01D9, r15	; 0x8001d9 <__data_end+0x1>
     3b8:	e0 92 d8 01 	sts	0x01D8, r14	; 0x8001d8 <__data_end>
				PWML = PWML;
				if (PWML>240) PWML = 250;
				select_motor_direction(FORWARD, PWML, PWMR);
     3bc:	44 e6       	ldi	r20, 0x64	; 100
     3be:	64 e6       	ldi	r22, 0x64	; 100
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
				printf("Increasing left motor %d\n", PWML);
     3c6:	1f 92       	push	r1
     3c8:	84 e6       	ldi	r24, 0x64	; 100
     3ca:	8f 93       	push	r24
     3cc:	83 ea       	ldi	r24, 0xA3	; 163
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	0e 94 9b 06 	call	0xd36	; 0xd36 <printf>
				RightSensor = ultrasound_sensor(U_RIGHT);
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	0e 94 c0 03 	call	0x780	; 0x780 <ultrasound_sensor>
     3de:	7c 01       	movw	r14, r24
				LeftSensor = ultrasound_sensor(U_LEFT);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 c0 03 	call	0x780	; 0x780 <ultrasound_sensor>
     3e6:	ec 01       	movw	r28, r24
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
		else
		{
			printf("Everything is ok!\n");
			select_motor_direction(FORWARD, PWML, PWMR);
			if (RightSensor>LeftSensor){
				while(RightSensor>LeftSensor){
     3f0:	ce 15       	cp	r28, r14
     3f2:	df 05       	cpc	r29, r15
     3f4:	e8 f2       	brcs	.-70     	; 0x3b0 <main+0x30a>
     3f6:	5d ce       	rjmp	.-838    	; 0xb2 <main+0xc>
				LeftSensor = ultrasound_sensor(U_LEFT);
				}
				PWML = 100;
				PWMR = 100;
			}
			else if (LeftSensor>RightSensor){
     3f8:	ec 16       	cp	r14, r28
     3fa:	fd 06       	cpc	r15, r29
     3fc:	40 f1       	brcs	.+80     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     3fe:	59 ce       	rjmp	.-846    	; 0xb2 <main+0xc>
				while (LeftSensor>RightSensor){
				correcting = LeftSensor-RightSensor;
     400:	ce 19       	sub	r28, r14
     402:	df 09       	sbc	r29, r15
     404:	d0 93 d9 01 	sts	0x01D9, r29	; 0x8001d9 <__data_end+0x1>
     408:	c0 93 d8 01 	sts	0x01D8, r28	; 0x8001d8 <__data_end>
				PWMR = PWMR+correcting;
     40c:	0c 0f       	add	r16, r28
     40e:	1d 1f       	adc	r17, r29
				if (PWMR>240) PWMR = 250;
     410:	01 3f       	cpi	r16, 0xF1	; 241
     412:	11 05       	cpc	r17, r1
     414:	14 f0       	brlt	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     416:	0a ef       	ldi	r16, 0xFA	; 250
     418:	10 e0       	ldi	r17, 0x00	; 0
				select_motor_direction(FORWARD, PWML, PWMR);
     41a:	40 2f       	mov	r20, r16
     41c:	64 e6       	ldi	r22, 0x64	; 100
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 d5 02 	call	0x5aa	; 0x5aa <select_motor_direction>
				printf("Increasing right motor %d\n", PWMR);
     424:	1f 93       	push	r17
     426:	0f 93       	push	r16
     428:	8d eb       	ldi	r24, 0xBD	; 189
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	0e 94 9b 06 	call	0xd36	; 0xd36 <printf>
				RightSensor = ultrasound_sensor(U_RIGHT);
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	0e 94 c0 03 	call	0x780	; 0x780 <ultrasound_sensor>
     43a:	7c 01       	movw	r14, r24
				LeftSensor = ultrasound_sensor(U_LEFT);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 c0 03 	call	0x780	; 0x780 <ultrasound_sensor>
     442:	ec 01       	movw	r28, r24
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     44e:	04 e6       	ldi	r16, 0x64	; 100
     450:	10 e0       	ldi	r17, 0x00	; 0
				}
				PWML = 100;
				PWMR = 100;
			}
			else if (LeftSensor>RightSensor){
				while (LeftSensor>RightSensor){
     452:	ec 16       	cp	r14, r28
     454:	fd 06       	cpc	r15, r29
     456:	a0 f2       	brcs	.-88     	; 0x400 <__EEPROM_REGION_LENGTH__>
     458:	2c ce       	rjmp	.-936    	; 0xb2 <main+0xc>

0000045a <opto_turn>:
int slids = 0;
int flag_opto = 0;


int opto_turn(int turns, int side)
{
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	ec 01       	movw	r28, r24
     46a:	16 2f       	mov	r17, r22
	
	slids = 0;	
     46c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <slids+0x1>
     470:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <slids>
	//DDRD &= ~(1<<DDD3); //clear the pin PD2
	//DDRD |= 1<<DDD3;
	
	 
	
    while (slids<turns)
     474:	80 c0       	rjmp	.+256    	; 0x576 <opto_turn+0x11c>
    {
		
		if (PIND & 1<<side)
     476:	89 b1       	in	r24, 0x09	; 9
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	01 2e       	mov	r0, r17
     47c:	02 c0       	rjmp	.+4      	; 0x482 <opto_turn+0x28>
     47e:	95 95       	asr	r25
     480:	87 95       	ror	r24
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <opto_turn+0x24>
     486:	80 ff       	sbrs	r24, 0
     488:	63 c0       	rjmp	.+198    	; 0x550 <opto_turn+0xf6>
		{
			
			if(PIND & 1<<side)
     48a:	89 b1       	in	r24, 0x09	; 9
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	01 2e       	mov	r0, r17
     490:	02 c0       	rjmp	.+4      	; 0x496 <opto_turn+0x3c>
     492:	95 95       	asr	r25
     494:	87 95       	ror	r24
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <opto_turn+0x38>
     49a:	80 fd       	sbrc	r24, 0
     49c:	10 c0       	rjmp	.+32     	; 0x4be <opto_turn+0x64>
     49e:	58 c0       	rjmp	.+176    	; 0x550 <opto_turn+0xf6>
     4a0:	8f e9       	ldi	r24, 0x9F	; 159
     4a2:	9f e0       	ldi	r25, 0x0F	; 15
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <opto_turn+0x4a>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <opto_turn+0x50>
     4aa:	00 00       	nop
			{
				while(PIND & 1<<side)
				{
					_delay_ms(1);
					count_opto++;
     4ac:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <count_opto>
     4b0:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <count_opto+0x1>
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <count_opto+0x1>
     4ba:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <count_opto>
		if (PIND & 1<<side)
		{
			
			if(PIND & 1<<side)
			{
				while(PIND & 1<<side)
     4be:	89 b1       	in	r24, 0x09	; 9
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	01 2e       	mov	r0, r17
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <opto_turn+0x70>
     4c6:	95 95       	asr	r25
     4c8:	87 95       	ror	r24
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <opto_turn+0x6c>
     4ce:	80 fd       	sbrc	r24, 0
     4d0:	e7 cf       	rjmp	.-50     	; 0x4a0 <opto_turn+0x46>
				{
					_delay_ms(1);
					count_opto++;
				}		
				rpm = 600000/(((double)count_opto+(double)count_off)*PoM);
     4d2:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <count_opto>
     4d6:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <count_opto+0x1>
     4da:	07 2e       	mov	r0, r23
     4dc:	00 0c       	add	r0, r0
     4de:	88 0b       	sbc	r24, r24
     4e0:	99 0b       	sbc	r25, r25
     4e2:	0e 94 a2 05 	call	0xb44	; 0xb44 <__floatsisf>
     4e6:	6b 01       	movw	r12, r22
     4e8:	7c 01       	movw	r14, r24
     4ea:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <count_off>
     4ee:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <count_off+0x1>
     4f2:	07 2e       	mov	r0, r23
     4f4:	00 0c       	add	r0, r0
     4f6:	88 0b       	sbc	r24, r24
     4f8:	99 0b       	sbc	r25, r25
     4fa:	0e 94 a2 05 	call	0xb44	; 0xb44 <__floatsisf>
     4fe:	9b 01       	movw	r18, r22
     500:	ac 01       	movw	r20, r24
     502:	c7 01       	movw	r24, r14
     504:	b6 01       	movw	r22, r12
     506:	0e 94 93 04 	call	0x926	; 0x926 <__addsf3>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 ec       	ldi	r20, 0xC0	; 192
     510:	50 e4       	ldi	r21, 0x40	; 64
     512:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__mulsf3>
     516:	9b 01       	movw	r18, r22
     518:	ac 01       	movw	r20, r24
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	7c e7       	ldi	r23, 0x7C	; 124
     51e:	82 e1       	ldi	r24, 0x12	; 18
     520:	99 e4       	ldi	r25, 0x49	; 73
     522:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__divsf3>
     526:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <rpm>
     52a:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <rpm+0x1>
     52e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <rpm+0x2>
     532:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <rpm+0x3>
	
				slids++;
     536:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <slids>
     53a:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <slids+0x1>
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <slids+0x1>
     544:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <slids>
				count_off=0;
     548:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <count_off+0x1>
     54c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <count_off>
     550:	8f e9       	ldi	r24, 0x9F	; 159
     552:	9f e0       	ldi	r25, 0x0F	; 15
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <opto_turn+0xfa>
     558:	00 c0       	rjmp	.+0      	; 0x55a <opto_turn+0x100>
     55a:	00 00       	nop
					
				
			}
		}
		_delay_ms(1);
		count_off++;
     55c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <count_off>
     560:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <count_off+0x1>
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <count_off+0x1>
     56a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <count_off>
		count_opto = 0;
     56e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <count_opto+0x1>
     572:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <count_opto>
	//DDRD &= ~(1<<DDD3); //clear the pin PD2
	//DDRD |= 1<<DDD3;
	
	 
	
    while (slids<turns)
     576:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <slids>
     57a:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <slids+0x1>
     57e:	8c 17       	cp	r24, r28
     580:	9d 07       	cpc	r25, r29
     582:	0c f4       	brge	.+2      	; 0x586 <opto_turn+0x12c>
     584:	78 cf       	rjmp	.-272    	; 0x476 <opto_turn+0x1c>
		count_off++;
		count_opto = 0;

	}

     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <setup_motors>:
    break;
  }
}

void setup_motors (void){
  TCCR0A |= (1 << WGM00) | (1 << WGM00); //Enable Fast PWM mode on Timer0
     596:	84 b5       	in	r24, 0x24	; 36
     598:	81 60       	ori	r24, 0x01	; 1
     59a:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1); //Enable to put out PWM signal to D5 and D6 pins
     59c:	84 b5       	in	r24, 0x24	; 36
     59e:	80 6a       	ori	r24, 0xA0	; 160
     5a0:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1 << CS00) | (1 << CS01); //Set pre-scaler to 64
     5a2:	85 b5       	in	r24, 0x25	; 37
     5a4:	83 60       	ori	r24, 0x03	; 3
     5a6:	85 bd       	out	0x25, r24	; 37
     5a8:	08 95       	ret

000005aa <select_motor_direction>:
  distance = duration * 0.34 / 2; // 340m/s -> 0.34 cm/10us because we measure distance every 10 microseconds
  delay_ms(60); //Suggested by datasheet to wait 60ms to ultrasound signal interruption
  return distance;
}

void select_motor_direction (unsigned char direction, unsigned char PWML, unsigned char PWMR){
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	c8 2f       	mov	r28, r24
     5b2:	d6 2f       	mov	r29, r22
     5b4:	14 2f       	mov	r17, r20
  setup_motors();
     5b6:	0e 94 cb 02 	call	0x596	; 0x596 <setup_motors>
  switch (direction)
     5ba:	c2 30       	cpi	r28, 0x02	; 2
     5bc:	49 f1       	breq	.+82     	; 0x610 <select_motor_direction+0x66>
     5be:	28 f4       	brcc	.+10     	; 0x5ca <select_motor_direction+0x20>
     5c0:	cc 23       	and	r28, r28
     5c2:	41 f0       	breq	.+16     	; 0x5d4 <select_motor_direction+0x2a>
     5c4:	c1 30       	cpi	r28, 0x01	; 1
     5c6:	a9 f0       	breq	.+42     	; 0x5f2 <select_motor_direction+0x48>
     5c8:	4f c0       	rjmp	.+158    	; 0x668 <select_motor_direction+0xbe>
     5ca:	c3 30       	cpi	r28, 0x03	; 3
     5cc:	81 f1       	breq	.+96     	; 0x62e <select_motor_direction+0x84>
     5ce:	c4 30       	cpi	r28, 0x04	; 4
     5d0:	e9 f1       	breq	.+122    	; 0x64c <select_motor_direction+0xa2>
     5d2:	4a c0       	rjmp	.+148    	; 0x668 <select_motor_direction+0xbe>
  {
  case FORWARD:
    PORTD |= (1 << IN1);
     5d4:	8b b1       	in	r24, 0x0b	; 11
     5d6:	80 61       	ori	r24, 0x10	; 16
     5d8:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
     5da:	8b b1       	in	r24, 0x0b	; 11
     5dc:	8f 77       	andi	r24, 0x7F	; 127
     5de:	8b b9       	out	0x0b, r24	; 11

    PORTB |= (1 << IN3);
     5e0:	85 b1       	in	r24, 0x05	; 5
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
     5e6:	85 b1       	in	r24, 0x05	; 5
     5e8:	8d 7f       	andi	r24, 0xFD	; 253
     5ea:	85 b9       	out	0x05, r24	; 5

		OCR0A = PWMR; //ENB
     5ec:	17 bd       	out	0x27, r17	; 39
		OCR0B = PWML; //ENA
     5ee:	d8 bd       	out	0x28, r29	; 40

    break;
     5f0:	3b c0       	rjmp	.+118    	; 0x668 <select_motor_direction+0xbe>

  case BACKWARD:
    PORTD &= ~(1 << IN1);
     5f2:	8b b1       	in	r24, 0x0b	; 11
     5f4:	8f 7e       	andi	r24, 0xEF	; 239
     5f6:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1 << IN2);
     5f8:	8b b1       	in	r24, 0x0b	; 11
     5fa:	80 68       	ori	r24, 0x80	; 128
     5fc:	8b b9       	out	0x0b, r24	; 11

    PORTB &= ~(1 << IN3);
     5fe:	85 b1       	in	r24, 0x05	; 5
     600:	8e 7f       	andi	r24, 0xFE	; 254
     602:	85 b9       	out	0x05, r24	; 5
    PORTB |= (1 << IN4);
     604:	85 b1       	in	r24, 0x05	; 5
     606:	82 60       	ori	r24, 0x02	; 2
     608:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWMR; //ENB
     60a:	17 bd       	out	0x27, r17	; 39
	OCR0B = PWML; //ENA
     60c:	d8 bd       	out	0x28, r29	; 40

    break;
     60e:	2c c0       	rjmp	.+88     	; 0x668 <select_motor_direction+0xbe>
  
  case LEFT:
    //Left goes backward
    PORTD &= ~(1 << IN1);
     610:	8b b1       	in	r24, 0x0b	; 11
     612:	8f 7e       	andi	r24, 0xEF	; 239
     614:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1 << IN2);
     616:	8b b1       	in	r24, 0x0b	; 11
     618:	80 68       	ori	r24, 0x80	; 128
     61a:	8b b9       	out	0x0b, r24	; 11

    //Right goes forward
    PORTB |= (1 << IN3);
     61c:	85 b1       	in	r24, 0x05	; 5
     61e:	81 60       	ori	r24, 0x01	; 1
     620:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
     622:	85 b1       	in	r24, 0x05	; 5
     624:	8d 7f       	andi	r24, 0xFD	; 253
     626:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWMR; //ENB
     628:	17 bd       	out	0x27, r17	; 39
	OCR0B = PWML; //ENA
     62a:	d8 bd       	out	0x28, r29	; 40

    break;
     62c:	1d c0       	rjmp	.+58     	; 0x668 <select_motor_direction+0xbe>
  
  case RIGHT:
    //Left goes forward
    PORTD |= (1 << IN1);
     62e:	8b b1       	in	r24, 0x0b	; 11
     630:	80 61       	ori	r24, 0x10	; 16
     632:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
     634:	8b b1       	in	r24, 0x0b	; 11
     636:	8f 77       	andi	r24, 0x7F	; 127
     638:	8b b9       	out	0x0b, r24	; 11

    //Right goes backward
    PORTB &= ~(1 << IN3);
     63a:	85 b1       	in	r24, 0x05	; 5
     63c:	8e 7f       	andi	r24, 0xFE	; 254
     63e:	85 b9       	out	0x05, r24	; 5
    PORTB |= (1 << IN4);
     640:	85 b1       	in	r24, 0x05	; 5
     642:	82 60       	ori	r24, 0x02	; 2
     644:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWMR; //ENB
     646:	17 bd       	out	0x27, r17	; 39
	OCR0B = PWML; //ENA
     648:	d8 bd       	out	0x28, r29	; 40

  break;
     64a:	0e c0       	rjmp	.+28     	; 0x668 <select_motor_direction+0xbe>
  
  case STOP:
    PORTD &= ~(1 << IN1);
     64c:	8b b1       	in	r24, 0x0b	; 11
     64e:	8f 7e       	andi	r24, 0xEF	; 239
     650:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
     652:	8b b1       	in	r24, 0x0b	; 11
     654:	8f 77       	andi	r24, 0x7F	; 127
     656:	8b b9       	out	0x0b, r24	; 11

    PORTB &= ~(1 << IN3);
     658:	85 b1       	in	r24, 0x05	; 5
     65a:	8e 7f       	andi	r24, 0xFE	; 254
     65c:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
     65e:	85 b1       	in	r24, 0x05	; 5
     660:	8d 7f       	andi	r24, 0xFD	; 253
     662:	85 b9       	out	0x05, r24	; 5

    OCR0A = 0; //ENB
     664:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0; //ENA
     666:	18 bc       	out	0x28, r1	; 40

    break;
  }
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	08 95       	ret

00000670 <start_timer>:
    TIFR2 |= (1 << OCF2A);
  }
}

void start_timer (void){
	TCCR1A = 0;
     670:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12); // Set the Timer1 Mode to CTC
     674:	e1 e8       	ldi	r30, 0x81	; 129
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	88 60       	ori	r24, 0x08	; 8
     67c:	80 83       	st	Z, r24
	OCR1A = 0x9F; //160 tick (0-159) to reach 10us
     67e:	8f e9       	ldi	r24, 0x9F	; 159
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     686:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); //Set the ISR COMPA vect
     68a:	af e6       	ldi	r26, 0x6F	; 111
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	8c 91       	ld	r24, X
     690:	82 60       	ori	r24, 0x02	; 2
     692:	8c 93       	st	X, r24
	sei();
     694:	78 94       	sei
	TCCR1B |= (1 << CS10); // set pre-scaler to 1 to reach us
     696:	80 81       	ld	r24, Z
     698:	81 60       	ori	r24, 0x01	; 1
     69a:	80 83       	st	Z, r24
     69c:	08 95       	ret

0000069e <__vector_11>:
}

ISR (TIMER1_COMPA_vect){
     69e:	1f 92       	push	r1
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	11 24       	eor	r1, r1
     6a8:	2f 93       	push	r18
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
  ten_us_counter++;
     6ae:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <ten_us_counter>
     6b2:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <ten_us_counter+0x1>
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <ten_us_counter+0x1>
     6bc:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <ten_us_counter>
  if(ten_us_counter>65000) ten_us_counter = 0; //to avoid overflow of int
     6c0:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <ten_us_counter>
     6c4:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <ten_us_counter+0x1>
     6c8:	89 3e       	cpi	r24, 0xE9	; 233
     6ca:	9d 4f       	sbci	r25, 0xFD	; 253
     6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__vector_11+0x38>
     6ce:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <ten_us_counter+0x1>
     6d2:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <ten_us_counter>
}
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0f 90       	pop	r0
     6e2:	1f 90       	pop	r1
     6e4:	18 95       	reti

000006e6 <stop_timer>:

void stop_timer (void){
  TCCR1B = 0; //stop interrupt
     6e6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     6ea:	08 95       	ret

000006ec <reset_prescaler>:
}

void reset_prescaler(void){
  TCCR2B &= ~((1 << CS20) | (1 << CS22));
     6ec:	e1 eb       	ldi	r30, 0xB1	; 177
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	8a 7f       	andi	r24, 0xFA	; 250
     6f4:	80 83       	st	Z, r24
     6f6:	08 95       	ret

000006f8 <delay_ms>:
  TCCR0A |= (1 << WGM00) | (1 << WGM00); //Enable Fast PWM mode on Timer0
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1); //Enable to put out PWM signal to D5 and D6 pins
  TCCR0B |= (1 << CS00) | (1 << CS01); //Set pre-scaler to 64
}

void delay_ms (unsigned int ms){
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
     6fe:	e0 eb       	ldi	r30, 0xB0	; 176
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	82 60       	ori	r24, 0x02	; 2
     706:	80 83       	st	Z, r24
  OCR2A = 0xF9; // count up to 256 ticks (0-255) to reach 1ms
     708:	89 ef       	ldi	r24, 0xF9	; 249
     70a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  reset_prescaler();
     70e:	0e 94 76 03 	call	0x6ec	; 0x6ec <reset_prescaler>
  TCCR2B |= (1 << CS22); // set pre-scaler to 64 and start the timer
     712:	e1 eb       	ldi	r30, 0xB1	; 177
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	84 60       	ori	r24, 0x04	; 4
     71a:	80 83       	st	Z, r24
  for (int i=0; i < ms; i++){
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	07 c0       	rjmp	.+14     	; 0x730 <delay_ms+0x38>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
     722:	b9 9b       	sbis	0x17, 1	; 23
     724:	fe cf       	rjmp	.-4      	; 0x722 <delay_ms+0x2a>
    TIFR2 |= (1 << OCF2A);
     726:	87 b3       	in	r24, 0x17	; 23
     728:	82 60       	ori	r24, 0x02	; 2
     72a:	87 bb       	out	0x17, r24	; 23
void delay_ms (unsigned int ms){
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
  OCR2A = 0xF9; // count up to 256 ticks (0-255) to reach 1ms
  reset_prescaler();
  TCCR2B |= (1 << CS22); // set pre-scaler to 64 and start the timer
  for (int i=0; i < ms; i++){
     72c:	2f 5f       	subi	r18, 0xFF	; 255
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	2c 17       	cp	r18, r28
     732:	3d 07       	cpc	r19, r29
     734:	b0 f3       	brcs	.-20     	; 0x722 <delay_ms+0x2a>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
    TIFR2 |= (1 << OCF2A);
  }
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <delay_us>:

void delay_us (unsigned int us){
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
     742:	e0 eb       	ldi	r30, 0xB0	; 176
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	82 60       	ori	r24, 0x02	; 2
     74a:	80 83       	st	Z, r24
  OCR2A = 0x0F; // count up to 16 ticks (0-15) to reach 1us
     74c:	8f e0       	ldi	r24, 0x0F	; 15
     74e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  reset_prescaler();
     752:	0e 94 76 03 	call	0x6ec	; 0x6ec <reset_prescaler>
  TCCR2B |= (1 << CS20); // set pre-scaler to 1 and start the timer
     756:	e1 eb       	ldi	r30, 0xB1	; 177
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	81 60       	ori	r24, 0x01	; 1
     75e:	80 83       	st	Z, r24
  for (int i=0; i < us; i++){
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	07 c0       	rjmp	.+14     	; 0x774 <delay_us+0x38>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
     766:	b9 9b       	sbis	0x17, 1	; 23
     768:	fe cf       	rjmp	.-4      	; 0x766 <delay_us+0x2a>
    TIFR2 |= (1 << OCF2A);
     76a:	87 b3       	in	r24, 0x17	; 23
     76c:	82 60       	ori	r24, 0x02	; 2
     76e:	87 bb       	out	0x17, r24	; 23
void delay_us (unsigned int us){
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
  OCR2A = 0x0F; // count up to 16 ticks (0-15) to reach 1us
  reset_prescaler();
  TCCR2B |= (1 << CS20); // set pre-scaler to 1 and start the timer
  for (int i=0; i < us; i++){
     770:	2f 5f       	subi	r18, 0xFF	; 255
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	2c 17       	cp	r18, r28
     776:	3d 07       	cpc	r19, r29
     778:	b0 f3       	brcs	.-20     	; 0x766 <delay_us+0x2a>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
    TIFR2 |= (1 << OCF2A);
  }
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <ultrasound_sensor>:
void setup_motors (void);
void reset_prescaler(void);

volatile unsigned int ten_us_counter = 0;

unsigned int ultrasound_sensor (unsigned char sensor){
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	18 2f       	mov	r17, r24
  unsigned char Echo_Pin = sensor;
  unsigned char Trigger_Pin = sensor+2;
     792:	02 e0       	ldi	r16, 0x02	; 2
     794:	08 0f       	add	r16, r24
  unsigned int distance = 0, duration = 0, timer_LOW = 0, timer_HIGH = 0;
  start_timer();
     796:	0e 94 38 03 	call	0x670	; 0x670 <start_timer>
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
     79a:	85 b1       	in	r24, 0x05	; 5
     79c:	c1 e0       	ldi	r28, 0x01	; 1
     79e:	d0 e0       	ldi	r29, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <ultrasound_sensor+0x26>
     7a2:	cc 0f       	add	r28, r28
     7a4:	dd 1f       	adc	r29, r29
     7a6:	0a 95       	dec	r16
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <ultrasound_sensor+0x22>
     7aa:	dc 2f       	mov	r29, r28
     7ac:	d0 95       	com	r29
     7ae:	8d 23       	and	r24, r29
     7b0:	85 b9       	out	0x05, r24	; 5
  delay_us(2);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 9e 03 	call	0x73c	; 0x73c <delay_us>
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
     7ba:	85 b1       	in	r24, 0x05	; 5
     7bc:	c8 2b       	or	r28, r24
     7be:	c5 b9       	out	0x05, r28	; 5
  delay_us(10);
     7c0:	8a e0       	ldi	r24, 0x0A	; 10
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 9e 03 	call	0x73c	; 0x73c <delay_us>
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
     7c8:	85 b1       	in	r24, 0x05	; 5
     7ca:	d8 23       	and	r29, r24
     7cc:	d5 b9       	out	0x05, r29	; 5
volatile unsigned int ten_us_counter = 0;

unsigned int ultrasound_sensor (unsigned char sensor){
  unsigned char Echo_Pin = sensor;
  unsigned char Trigger_Pin = sensor+2;
  unsigned int distance = 0, duration = 0, timer_LOW = 0, timer_HIGH = 0;
     7ce:	c0 e0       	ldi	r28, 0x00	; 0
     7d0:	d0 e0       	ldi	r29, 0x00	; 0
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
  delay_us(2);
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <ultrasound_sensor+0x5c>
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
     7d4:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <ten_us_counter>
     7d8:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <ten_us_counter+0x1>
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
  delay_us(2);
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
     7dc:	86 b1       	in	r24, 0x06	; 6
     7de:	21 2f       	mov	r18, r17
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	01 2e       	mov	r0, r17
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <ultrasound_sensor+0x6a>
     7e6:	95 95       	asr	r25
     7e8:	87 95       	ror	r24
     7ea:	0a 94       	dec	r0
     7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <ultrasound_sensor+0x66>
     7ee:	80 ff       	sbrs	r24, 0
     7f0:	f1 cf       	rjmp	.-30     	; 0x7d4 <ultrasound_sensor+0x54>
     7f2:	00 e0       	ldi	r16, 0x00	; 0
     7f4:	10 e0       	ldi	r17, 0x00	; 0
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
  while (PINC & (1 << Echo_Pin)){
    timer_HIGH = ten_us_counter; } //Wait for the signal to finish (reach Falling edge)
     7f8:	00 91 e4 01 	lds	r16, 0x01E4	; 0x8001e4 <ten_us_counter>
     7fc:	10 91 e5 01 	lds	r17, 0x01E5	; 0x8001e5 <ten_us_counter+0x1>
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
  while (PINC & (1 << Echo_Pin)){
     800:	86 b1       	in	r24, 0x06	; 6
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	02 2e       	mov	r0, r18
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	95 95       	asr	r25
     80a:	87 95       	ror	r24
     80c:	0a 94       	dec	r0
     80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     810:	80 fd       	sbrc	r24, 0
     812:	f2 cf       	rjmp	.-28     	; 0x7f8 <ultrasound_sensor+0x78>
    timer_HIGH = ten_us_counter; } //Wait for the signal to finish (reach Falling edge)
  stop_timer();
     814:	0e 94 73 03 	call	0x6e6	; 0x6e6 <stop_timer>
  duration = timer_HIGH - timer_LOW;
     818:	b8 01       	movw	r22, r16
     81a:	6c 1b       	sub	r22, r28
     81c:	7d 0b       	sbc	r23, r29
  ten_us_counter = 0;
     81e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <ten_us_counter+0x1>
     822:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <ten_us_counter>
  distance = duration * 0.34 / 2; // 340m/s -> 0.34 cm/10us because we measure distance every 10 microseconds
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__floatunsisf>
     82e:	2b e7       	ldi	r18, 0x7B	; 123
     830:	34 e1       	ldi	r19, 0x14	; 20
     832:	4e ea       	ldi	r20, 0xAE	; 174
     834:	5e e3       	ldi	r21, 0x3E	; 62
     836:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__mulsf3>
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	5f e3       	ldi	r21, 0x3F	; 63
     842:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__mulsf3>
     846:	0e 94 71 05 	call	0xae2	; 0xae2 <__fixunssfsi>
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
  delay_ms(60); //Suggested by datasheet to wait 60ms to ultrasound signal interruption
     84e:	8c e3       	ldi	r24, 0x3C	; 60
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delay_ms>
  return distance;
}
     856:	c6 01       	movw	r24, r12
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	08 95       	ret

0000086a <set_pins>:
  TCCR2B &= ~((1 << CS20) | (1 << CS22));
  }

void set_pins (void){
  //Setting Echo pins
  DDRC &= ~(1 << U_FRONT); //A0 set as input
     86a:	87 b1       	in	r24, 0x07	; 7
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	87 b9       	out	0x07, r24	; 7
  DDRC &= ~(1 << U_LEFT); //A1 set as input
     870:	87 b1       	in	r24, 0x07	; 7
     872:	8d 7f       	andi	r24, 0xFD	; 253
     874:	87 b9       	out	0x07, r24	; 7
  DDRC &= ~(1 << U_RIGHT); // A2 set as input
     876:	87 b1       	in	r24, 0x07	; 7
     878:	8b 7f       	andi	r24, 0xFB	; 251
     87a:	87 b9       	out	0x07, r24	; 7

  //Setting Trigger pins
  DDRB |= (1 << (U_FRONT+2)); //D10 set as output
     87c:	84 b1       	in	r24, 0x04	; 4
     87e:	84 60       	ori	r24, 0x04	; 4
     880:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << (U_LEFT+2)); //D11 set as output
     882:	84 b1       	in	r24, 0x04	; 4
     884:	88 60       	ori	r24, 0x08	; 8
     886:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << (U_RIGHT+2)); //D12 set as output
     888:	84 b1       	in	r24, 0x04	; 4
     88a:	80 61       	ori	r24, 0x10	; 16
     88c:	84 b9       	out	0x04, r24	; 4

  //Setting Optocoupler PINS
  DDRD &= ~(1 << O_LEFT); //D2 set as input
     88e:	8a b1       	in	r24, 0x0a	; 10
     890:	8b 7f       	andi	r24, 0xFB	; 251
     892:	8a b9       	out	0x0a, r24	; 10
  DDRD &= ~(1 << O_RIGHT); //D3 set as input
     894:	8a b1       	in	r24, 0x0a	; 10
     896:	87 7f       	andi	r24, 0xF7	; 247
     898:	8a b9       	out	0x0a, r24	; 10

  //Setting motor pins
  DDRD |= (1 << IN1); //D4 set as output
     89a:	8a b1       	in	r24, 0x0a	; 10
     89c:	80 61       	ori	r24, 0x10	; 16
     89e:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << IN2); //D7 set as output
     8a0:	8a b1       	in	r24, 0x0a	; 10
     8a2:	80 68       	ori	r24, 0x80	; 128
     8a4:	8a b9       	out	0x0a, r24	; 10
  DDRB |= (1 << IN3); //D8 set as output
     8a6:	84 b1       	in	r24, 0x04	; 4
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << IN4); //D9 set as output
     8ac:	84 b1       	in	r24, 0x04	; 4
     8ae:	82 60       	ori	r24, 0x02	; 2
     8b0:	84 b9       	out	0x04, r24	; 4
  DDRD |= (1 << ENA); //D5 set as output
     8b2:	8a b1       	in	r24, 0x0a	; 10
     8b4:	80 62       	ori	r24, 0x20	; 32
     8b6:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << ENB); //D6 set as output
     8b8:	8a b1       	in	r24, 0x0a	; 10
     8ba:	80 64       	ori	r24, 0x40	; 64
     8bc:	8a b9       	out	0x0a, r24	; 10
     8be:	08 95       	ret

000008c0 <uart_putchar>:
     8c0:	cf 93       	push	r28
     8c2:	c8 2f       	mov	r28, r24
     8c4:	8a 30       	cpi	r24, 0x0A	; 10
     8c6:	19 f4       	brne	.+6      	; 0x8ce <uart_putchar+0xe>
     8c8:	8d e0       	ldi	r24, 0x0D	; 13
     8ca:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uart_putchar>
     8ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     8d2:	85 ff       	sbrs	r24, 5
     8d4:	fc cf       	rjmp	.-8      	; 0x8ce <uart_putchar+0xe>
     8d6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <uart_getchar>:
     8de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     8e2:	88 23       	and	r24, r24
     8e4:	e4 f7       	brge	.-8      	; 0x8de <uart_getchar>
     8e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8ea:	08 95       	ret

000008ec <uart_init>:
     8ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     8f0:	87 e6       	ldi	r24, 0x67	; 103
     8f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     8f6:	e0 ec       	ldi	r30, 0xC0	; 192
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	8d 7f       	andi	r24, 0xFD	; 253
     8fe:	80 83       	st	Z, r24
     900:	86 e0       	ldi	r24, 0x06	; 6
     902:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     906:	88 e1       	ldi	r24, 0x18	; 24
     908:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     90c:	08 95       	ret

0000090e <io_redirect>:
     90e:	e6 ee       	ldi	r30, 0xE6	; 230
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	8e e0       	ldi	r24, 0x0E	; 14
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	93 83       	std	Z+3, r25	; 0x03
     918:	82 83       	std	Z+2, r24	; 0x02
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
     922:	08 95       	ret

00000924 <__subsf3>:
     924:	50 58       	subi	r21, 0x80	; 128

00000926 <__addsf3>:
     926:	bb 27       	eor	r27, r27
     928:	aa 27       	eor	r26, r26
     92a:	0e 94 aa 04 	call	0x954	; 0x954 <__addsf3x>
     92e:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_round>
     932:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_pscA>
     936:	38 f0       	brcs	.+14     	; 0x946 <__addsf3+0x20>
     938:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_pscB>
     93c:	20 f0       	brcs	.+8      	; 0x946 <__addsf3+0x20>
     93e:	39 f4       	brne	.+14     	; 0x94e <__addsf3+0x28>
     940:	9f 3f       	cpi	r25, 0xFF	; 255
     942:	19 f4       	brne	.+6      	; 0x94a <__addsf3+0x24>
     944:	26 f4       	brtc	.+8      	; 0x94e <__addsf3+0x28>
     946:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_nan>
     94a:	0e f4       	brtc	.+2      	; 0x94e <__addsf3+0x28>
     94c:	e0 95       	com	r30
     94e:	e7 fb       	bst	r30, 7
     950:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_inf>

00000954 <__addsf3x>:
     954:	e9 2f       	mov	r30, r25
     956:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_split3>
     95a:	58 f3       	brcs	.-42     	; 0x932 <__addsf3+0xc>
     95c:	ba 17       	cp	r27, r26
     95e:	62 07       	cpc	r22, r18
     960:	73 07       	cpc	r23, r19
     962:	84 07       	cpc	r24, r20
     964:	95 07       	cpc	r25, r21
     966:	20 f0       	brcs	.+8      	; 0x970 <__addsf3x+0x1c>
     968:	79 f4       	brne	.+30     	; 0x988 <__addsf3x+0x34>
     96a:	a6 f5       	brtc	.+104    	; 0x9d4 <__addsf3x+0x80>
     96c:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_zero>
     970:	0e f4       	brtc	.+2      	; 0x974 <__addsf3x+0x20>
     972:	e0 95       	com	r30
     974:	0b 2e       	mov	r0, r27
     976:	ba 2f       	mov	r27, r26
     978:	a0 2d       	mov	r26, r0
     97a:	0b 01       	movw	r0, r22
     97c:	b9 01       	movw	r22, r18
     97e:	90 01       	movw	r18, r0
     980:	0c 01       	movw	r0, r24
     982:	ca 01       	movw	r24, r20
     984:	a0 01       	movw	r20, r0
     986:	11 24       	eor	r1, r1
     988:	ff 27       	eor	r31, r31
     98a:	59 1b       	sub	r21, r25
     98c:	99 f0       	breq	.+38     	; 0x9b4 <__addsf3x+0x60>
     98e:	59 3f       	cpi	r21, 0xF9	; 249
     990:	50 f4       	brcc	.+20     	; 0x9a6 <__addsf3x+0x52>
     992:	50 3e       	cpi	r21, 0xE0	; 224
     994:	68 f1       	brcs	.+90     	; 0x9f0 <__addsf3x+0x9c>
     996:	1a 16       	cp	r1, r26
     998:	f0 40       	sbci	r31, 0x00	; 0
     99a:	a2 2f       	mov	r26, r18
     99c:	23 2f       	mov	r18, r19
     99e:	34 2f       	mov	r19, r20
     9a0:	44 27       	eor	r20, r20
     9a2:	58 5f       	subi	r21, 0xF8	; 248
     9a4:	f3 cf       	rjmp	.-26     	; 0x98c <__addsf3x+0x38>
     9a6:	46 95       	lsr	r20
     9a8:	37 95       	ror	r19
     9aa:	27 95       	ror	r18
     9ac:	a7 95       	ror	r26
     9ae:	f0 40       	sbci	r31, 0x00	; 0
     9b0:	53 95       	inc	r21
     9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__addsf3x+0x52>
     9b4:	7e f4       	brtc	.+30     	; 0x9d4 <__addsf3x+0x80>
     9b6:	1f 16       	cp	r1, r31
     9b8:	ba 0b       	sbc	r27, r26
     9ba:	62 0b       	sbc	r22, r18
     9bc:	73 0b       	sbc	r23, r19
     9be:	84 0b       	sbc	r24, r20
     9c0:	ba f0       	brmi	.+46     	; 0x9f0 <__addsf3x+0x9c>
     9c2:	91 50       	subi	r25, 0x01	; 1
     9c4:	a1 f0       	breq	.+40     	; 0x9ee <__addsf3x+0x9a>
     9c6:	ff 0f       	add	r31, r31
     9c8:	bb 1f       	adc	r27, r27
     9ca:	66 1f       	adc	r22, r22
     9cc:	77 1f       	adc	r23, r23
     9ce:	88 1f       	adc	r24, r24
     9d0:	c2 f7       	brpl	.-16     	; 0x9c2 <__addsf3x+0x6e>
     9d2:	0e c0       	rjmp	.+28     	; 0x9f0 <__addsf3x+0x9c>
     9d4:	ba 0f       	add	r27, r26
     9d6:	62 1f       	adc	r22, r18
     9d8:	73 1f       	adc	r23, r19
     9da:	84 1f       	adc	r24, r20
     9dc:	48 f4       	brcc	.+18     	; 0x9f0 <__addsf3x+0x9c>
     9de:	87 95       	ror	r24
     9e0:	77 95       	ror	r23
     9e2:	67 95       	ror	r22
     9e4:	b7 95       	ror	r27
     9e6:	f7 95       	ror	r31
     9e8:	9e 3f       	cpi	r25, 0xFE	; 254
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <__addsf3x+0x9a>
     9ec:	b0 cf       	rjmp	.-160    	; 0x94e <__addsf3+0x28>
     9ee:	93 95       	inc	r25
     9f0:	88 0f       	add	r24, r24
     9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__addsf3x+0xa2>
     9f4:	99 27       	eor	r25, r25
     9f6:	ee 0f       	add	r30, r30
     9f8:	97 95       	ror	r25
     9fa:	87 95       	ror	r24
     9fc:	08 95       	ret

000009fe <__divsf3>:
     9fe:	0e 94 13 05 	call	0xa26	; 0xa26 <__divsf3x>
     a02:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_round>
     a06:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_pscB>
     a0a:	58 f0       	brcs	.+22     	; 0xa22 <__divsf3+0x24>
     a0c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_pscA>
     a10:	40 f0       	brcs	.+16     	; 0xa22 <__divsf3+0x24>
     a12:	29 f4       	brne	.+10     	; 0xa1e <__divsf3+0x20>
     a14:	5f 3f       	cpi	r21, 0xFF	; 255
     a16:	29 f0       	breq	.+10     	; 0xa22 <__divsf3+0x24>
     a18:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_inf>
     a1c:	51 11       	cpse	r21, r1
     a1e:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_szero>
     a22:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_nan>

00000a26 <__divsf3x>:
     a26:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_split3>
     a2a:	68 f3       	brcs	.-38     	; 0xa06 <__divsf3+0x8>

00000a2c <__divsf3_pse>:
     a2c:	99 23       	and	r25, r25
     a2e:	b1 f3       	breq	.-20     	; 0xa1c <__divsf3+0x1e>
     a30:	55 23       	and	r21, r21
     a32:	91 f3       	breq	.-28     	; 0xa18 <__divsf3+0x1a>
     a34:	95 1b       	sub	r25, r21
     a36:	55 0b       	sbc	r21, r21
     a38:	bb 27       	eor	r27, r27
     a3a:	aa 27       	eor	r26, r26
     a3c:	62 17       	cp	r22, r18
     a3e:	73 07       	cpc	r23, r19
     a40:	84 07       	cpc	r24, r20
     a42:	38 f0       	brcs	.+14     	; 0xa52 <__divsf3_pse+0x26>
     a44:	9f 5f       	subi	r25, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	44 1f       	adc	r20, r20
     a4e:	aa 1f       	adc	r26, r26
     a50:	a9 f3       	breq	.-22     	; 0xa3c <__divsf3_pse+0x10>
     a52:	35 d0       	rcall	.+106    	; 0xabe <__divsf3_pse+0x92>
     a54:	0e 2e       	mov	r0, r30
     a56:	3a f0       	brmi	.+14     	; 0xa66 <__divsf3_pse+0x3a>
     a58:	e0 e8       	ldi	r30, 0x80	; 128
     a5a:	32 d0       	rcall	.+100    	; 0xac0 <__divsf3_pse+0x94>
     a5c:	91 50       	subi	r25, 0x01	; 1
     a5e:	50 40       	sbci	r21, 0x00	; 0
     a60:	e6 95       	lsr	r30
     a62:	00 1c       	adc	r0, r0
     a64:	ca f7       	brpl	.-14     	; 0xa58 <__divsf3_pse+0x2c>
     a66:	2b d0       	rcall	.+86     	; 0xabe <__divsf3_pse+0x92>
     a68:	fe 2f       	mov	r31, r30
     a6a:	29 d0       	rcall	.+82     	; 0xabe <__divsf3_pse+0x92>
     a6c:	66 0f       	add	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	88 1f       	adc	r24, r24
     a72:	bb 1f       	adc	r27, r27
     a74:	26 17       	cp	r18, r22
     a76:	37 07       	cpc	r19, r23
     a78:	48 07       	cpc	r20, r24
     a7a:	ab 07       	cpc	r26, r27
     a7c:	b0 e8       	ldi	r27, 0x80	; 128
     a7e:	09 f0       	breq	.+2      	; 0xa82 <__divsf3_pse+0x56>
     a80:	bb 0b       	sbc	r27, r27
     a82:	80 2d       	mov	r24, r0
     a84:	bf 01       	movw	r22, r30
     a86:	ff 27       	eor	r31, r31
     a88:	93 58       	subi	r25, 0x83	; 131
     a8a:	5f 4f       	sbci	r21, 0xFF	; 255
     a8c:	3a f0       	brmi	.+14     	; 0xa9c <__divsf3_pse+0x70>
     a8e:	9e 3f       	cpi	r25, 0xFE	; 254
     a90:	51 05       	cpc	r21, r1
     a92:	78 f0       	brcs	.+30     	; 0xab2 <__divsf3_pse+0x86>
     a94:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_inf>
     a98:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_szero>
     a9c:	5f 3f       	cpi	r21, 0xFF	; 255
     a9e:	e4 f3       	brlt	.-8      	; 0xa98 <__divsf3_pse+0x6c>
     aa0:	98 3e       	cpi	r25, 0xE8	; 232
     aa2:	d4 f3       	brlt	.-12     	; 0xa98 <__divsf3_pse+0x6c>
     aa4:	86 95       	lsr	r24
     aa6:	77 95       	ror	r23
     aa8:	67 95       	ror	r22
     aaa:	b7 95       	ror	r27
     aac:	f7 95       	ror	r31
     aae:	9f 5f       	subi	r25, 0xFF	; 255
     ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__divsf3_pse+0x78>
     ab2:	88 0f       	add	r24, r24
     ab4:	91 1d       	adc	r25, r1
     ab6:	96 95       	lsr	r25
     ab8:	87 95       	ror	r24
     aba:	97 f9       	bld	r25, 7
     abc:	08 95       	ret
     abe:	e1 e0       	ldi	r30, 0x01	; 1
     ac0:	66 0f       	add	r22, r22
     ac2:	77 1f       	adc	r23, r23
     ac4:	88 1f       	adc	r24, r24
     ac6:	bb 1f       	adc	r27, r27
     ac8:	62 17       	cp	r22, r18
     aca:	73 07       	cpc	r23, r19
     acc:	84 07       	cpc	r24, r20
     ace:	ba 07       	cpc	r27, r26
     ad0:	20 f0       	brcs	.+8      	; 0xada <__divsf3_pse+0xae>
     ad2:	62 1b       	sub	r22, r18
     ad4:	73 0b       	sbc	r23, r19
     ad6:	84 0b       	sbc	r24, r20
     ad8:	ba 0b       	sbc	r27, r26
     ada:	ee 1f       	adc	r30, r30
     adc:	88 f7       	brcc	.-30     	; 0xac0 <__divsf3_pse+0x94>
     ade:	e0 95       	com	r30
     ae0:	08 95       	ret

00000ae2 <__fixunssfsi>:
     ae2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_splitA>
     ae6:	88 f0       	brcs	.+34     	; 0xb0a <__fixunssfsi+0x28>
     ae8:	9f 57       	subi	r25, 0x7F	; 127
     aea:	98 f0       	brcs	.+38     	; 0xb12 <__fixunssfsi+0x30>
     aec:	b9 2f       	mov	r27, r25
     aee:	99 27       	eor	r25, r25
     af0:	b7 51       	subi	r27, 0x17	; 23
     af2:	b0 f0       	brcs	.+44     	; 0xb20 <__fixunssfsi+0x3e>
     af4:	e1 f0       	breq	.+56     	; 0xb2e <__fixunssfsi+0x4c>
     af6:	66 0f       	add	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	88 1f       	adc	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	1a f0       	brmi	.+6      	; 0xb06 <__fixunssfsi+0x24>
     b00:	ba 95       	dec	r27
     b02:	c9 f7       	brne	.-14     	; 0xaf6 <__fixunssfsi+0x14>
     b04:	14 c0       	rjmp	.+40     	; 0xb2e <__fixunssfsi+0x4c>
     b06:	b1 30       	cpi	r27, 0x01	; 1
     b08:	91 f0       	breq	.+36     	; 0xb2e <__fixunssfsi+0x4c>
     b0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fp_zero>
     b0e:	b1 e0       	ldi	r27, 0x01	; 1
     b10:	08 95       	ret
     b12:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_zero>
     b16:	67 2f       	mov	r22, r23
     b18:	78 2f       	mov	r23, r24
     b1a:	88 27       	eor	r24, r24
     b1c:	b8 5f       	subi	r27, 0xF8	; 248
     b1e:	39 f0       	breq	.+14     	; 0xb2e <__fixunssfsi+0x4c>
     b20:	b9 3f       	cpi	r27, 0xF9	; 249
     b22:	cc f3       	brlt	.-14     	; 0xb16 <__fixunssfsi+0x34>
     b24:	86 95       	lsr	r24
     b26:	77 95       	ror	r23
     b28:	67 95       	ror	r22
     b2a:	b3 95       	inc	r27
     b2c:	d9 f7       	brne	.-10     	; 0xb24 <__fixunssfsi+0x42>
     b2e:	3e f4       	brtc	.+14     	; 0xb3e <__fixunssfsi+0x5c>
     b30:	90 95       	com	r25
     b32:	80 95       	com	r24
     b34:	70 95       	com	r23
     b36:	61 95       	neg	r22
     b38:	7f 4f       	sbci	r23, 0xFF	; 255
     b3a:	8f 4f       	sbci	r24, 0xFF	; 255
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	08 95       	ret

00000b40 <__floatunsisf>:
     b40:	e8 94       	clt
     b42:	09 c0       	rjmp	.+18     	; 0xb56 <__floatsisf+0x12>

00000b44 <__floatsisf>:
     b44:	97 fb       	bst	r25, 7
     b46:	3e f4       	brtc	.+14     	; 0xb56 <__floatsisf+0x12>
     b48:	90 95       	com	r25
     b4a:	80 95       	com	r24
     b4c:	70 95       	com	r23
     b4e:	61 95       	neg	r22
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	8f 4f       	sbci	r24, 0xFF	; 255
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	99 23       	and	r25, r25
     b58:	a9 f0       	breq	.+42     	; 0xb84 <__floatsisf+0x40>
     b5a:	f9 2f       	mov	r31, r25
     b5c:	96 e9       	ldi	r25, 0x96	; 150
     b5e:	bb 27       	eor	r27, r27
     b60:	93 95       	inc	r25
     b62:	f6 95       	lsr	r31
     b64:	87 95       	ror	r24
     b66:	77 95       	ror	r23
     b68:	67 95       	ror	r22
     b6a:	b7 95       	ror	r27
     b6c:	f1 11       	cpse	r31, r1
     b6e:	f8 cf       	rjmp	.-16     	; 0xb60 <__floatsisf+0x1c>
     b70:	fa f4       	brpl	.+62     	; 0xbb0 <__floatsisf+0x6c>
     b72:	bb 0f       	add	r27, r27
     b74:	11 f4       	brne	.+4      	; 0xb7a <__floatsisf+0x36>
     b76:	60 ff       	sbrs	r22, 0
     b78:	1b c0       	rjmp	.+54     	; 0xbb0 <__floatsisf+0x6c>
     b7a:	6f 5f       	subi	r22, 0xFF	; 255
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	8f 4f       	sbci	r24, 0xFF	; 255
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	16 c0       	rjmp	.+44     	; 0xbb0 <__floatsisf+0x6c>
     b84:	88 23       	and	r24, r24
     b86:	11 f0       	breq	.+4      	; 0xb8c <__floatsisf+0x48>
     b88:	96 e9       	ldi	r25, 0x96	; 150
     b8a:	11 c0       	rjmp	.+34     	; 0xbae <__floatsisf+0x6a>
     b8c:	77 23       	and	r23, r23
     b8e:	21 f0       	breq	.+8      	; 0xb98 <__floatsisf+0x54>
     b90:	9e e8       	ldi	r25, 0x8E	; 142
     b92:	87 2f       	mov	r24, r23
     b94:	76 2f       	mov	r23, r22
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <__floatsisf+0x5e>
     b98:	66 23       	and	r22, r22
     b9a:	71 f0       	breq	.+28     	; 0xbb8 <__floatsisf+0x74>
     b9c:	96 e8       	ldi	r25, 0x86	; 134
     b9e:	86 2f       	mov	r24, r22
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	2a f0       	brmi	.+10     	; 0xbb0 <__floatsisf+0x6c>
     ba6:	9a 95       	dec	r25
     ba8:	66 0f       	add	r22, r22
     baa:	77 1f       	adc	r23, r23
     bac:	88 1f       	adc	r24, r24
     bae:	da f7       	brpl	.-10     	; 0xba6 <__floatsisf+0x62>
     bb0:	88 0f       	add	r24, r24
     bb2:	96 95       	lsr	r25
     bb4:	87 95       	ror	r24
     bb6:	97 f9       	bld	r25, 7
     bb8:	08 95       	ret

00000bba <__fp_inf>:
     bba:	97 f9       	bld	r25, 7
     bbc:	9f 67       	ori	r25, 0x7F	; 127
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	08 95       	ret

00000bc6 <__fp_nan>:
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	80 ec       	ldi	r24, 0xC0	; 192
     bca:	08 95       	ret

00000bcc <__fp_pscA>:
     bcc:	00 24       	eor	r0, r0
     bce:	0a 94       	dec	r0
     bd0:	16 16       	cp	r1, r22
     bd2:	17 06       	cpc	r1, r23
     bd4:	18 06       	cpc	r1, r24
     bd6:	09 06       	cpc	r0, r25
     bd8:	08 95       	ret

00000bda <__fp_pscB>:
     bda:	00 24       	eor	r0, r0
     bdc:	0a 94       	dec	r0
     bde:	12 16       	cp	r1, r18
     be0:	13 06       	cpc	r1, r19
     be2:	14 06       	cpc	r1, r20
     be4:	05 06       	cpc	r0, r21
     be6:	08 95       	ret

00000be8 <__fp_round>:
     be8:	09 2e       	mov	r0, r25
     bea:	03 94       	inc	r0
     bec:	00 0c       	add	r0, r0
     bee:	11 f4       	brne	.+4      	; 0xbf4 <__fp_round+0xc>
     bf0:	88 23       	and	r24, r24
     bf2:	52 f0       	brmi	.+20     	; 0xc08 <__fp_round+0x20>
     bf4:	bb 0f       	add	r27, r27
     bf6:	40 f4       	brcc	.+16     	; 0xc08 <__fp_round+0x20>
     bf8:	bf 2b       	or	r27, r31
     bfa:	11 f4       	brne	.+4      	; 0xc00 <__fp_round+0x18>
     bfc:	60 ff       	sbrs	r22, 0
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__fp_round+0x20>
     c00:	6f 5f       	subi	r22, 0xFF	; 255
     c02:	7f 4f       	sbci	r23, 0xFF	; 255
     c04:	8f 4f       	sbci	r24, 0xFF	; 255
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	08 95       	ret

00000c0a <__fp_split3>:
     c0a:	57 fd       	sbrc	r21, 7
     c0c:	90 58       	subi	r25, 0x80	; 128
     c0e:	44 0f       	add	r20, r20
     c10:	55 1f       	adc	r21, r21
     c12:	59 f0       	breq	.+22     	; 0xc2a <__fp_splitA+0x10>
     c14:	5f 3f       	cpi	r21, 0xFF	; 255
     c16:	71 f0       	breq	.+28     	; 0xc34 <__fp_splitA+0x1a>
     c18:	47 95       	ror	r20

00000c1a <__fp_splitA>:
     c1a:	88 0f       	add	r24, r24
     c1c:	97 fb       	bst	r25, 7
     c1e:	99 1f       	adc	r25, r25
     c20:	61 f0       	breq	.+24     	; 0xc3a <__fp_splitA+0x20>
     c22:	9f 3f       	cpi	r25, 0xFF	; 255
     c24:	79 f0       	breq	.+30     	; 0xc44 <__fp_splitA+0x2a>
     c26:	87 95       	ror	r24
     c28:	08 95       	ret
     c2a:	12 16       	cp	r1, r18
     c2c:	13 06       	cpc	r1, r19
     c2e:	14 06       	cpc	r1, r20
     c30:	55 1f       	adc	r21, r21
     c32:	f2 cf       	rjmp	.-28     	; 0xc18 <__fp_split3+0xe>
     c34:	46 95       	lsr	r20
     c36:	f1 df       	rcall	.-30     	; 0xc1a <__fp_splitA>
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <__fp_splitA+0x30>
     c3a:	16 16       	cp	r1, r22
     c3c:	17 06       	cpc	r1, r23
     c3e:	18 06       	cpc	r1, r24
     c40:	99 1f       	adc	r25, r25
     c42:	f1 cf       	rjmp	.-30     	; 0xc26 <__fp_splitA+0xc>
     c44:	86 95       	lsr	r24
     c46:	71 05       	cpc	r23, r1
     c48:	61 05       	cpc	r22, r1
     c4a:	08 94       	sec
     c4c:	08 95       	ret

00000c4e <__fp_zero>:
     c4e:	e8 94       	clt

00000c50 <__fp_szero>:
     c50:	bb 27       	eor	r27, r27
     c52:	66 27       	eor	r22, r22
     c54:	77 27       	eor	r23, r23
     c56:	cb 01       	movw	r24, r22
     c58:	97 f9       	bld	r25, 7
     c5a:	08 95       	ret

00000c5c <__mulsf3>:
     c5c:	0e 94 41 06 	call	0xc82	; 0xc82 <__mulsf3x>
     c60:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_round>
     c64:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_pscA>
     c68:	38 f0       	brcs	.+14     	; 0xc78 <__mulsf3+0x1c>
     c6a:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_pscB>
     c6e:	20 f0       	brcs	.+8      	; 0xc78 <__mulsf3+0x1c>
     c70:	95 23       	and	r25, r21
     c72:	11 f0       	breq	.+4      	; 0xc78 <__mulsf3+0x1c>
     c74:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_inf>
     c78:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_nan>
     c7c:	11 24       	eor	r1, r1
     c7e:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_szero>

00000c82 <__mulsf3x>:
     c82:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_split3>
     c86:	70 f3       	brcs	.-36     	; 0xc64 <__mulsf3+0x8>

00000c88 <__mulsf3_pse>:
     c88:	95 9f       	mul	r25, r21
     c8a:	c1 f3       	breq	.-16     	; 0xc7c <__mulsf3+0x20>
     c8c:	95 0f       	add	r25, r21
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	55 1f       	adc	r21, r21
     c92:	62 9f       	mul	r22, r18
     c94:	f0 01       	movw	r30, r0
     c96:	72 9f       	mul	r23, r18
     c98:	bb 27       	eor	r27, r27
     c9a:	f0 0d       	add	r31, r0
     c9c:	b1 1d       	adc	r27, r1
     c9e:	63 9f       	mul	r22, r19
     ca0:	aa 27       	eor	r26, r26
     ca2:	f0 0d       	add	r31, r0
     ca4:	b1 1d       	adc	r27, r1
     ca6:	aa 1f       	adc	r26, r26
     ca8:	64 9f       	mul	r22, r20
     caa:	66 27       	eor	r22, r22
     cac:	b0 0d       	add	r27, r0
     cae:	a1 1d       	adc	r26, r1
     cb0:	66 1f       	adc	r22, r22
     cb2:	82 9f       	mul	r24, r18
     cb4:	22 27       	eor	r18, r18
     cb6:	b0 0d       	add	r27, r0
     cb8:	a1 1d       	adc	r26, r1
     cba:	62 1f       	adc	r22, r18
     cbc:	73 9f       	mul	r23, r19
     cbe:	b0 0d       	add	r27, r0
     cc0:	a1 1d       	adc	r26, r1
     cc2:	62 1f       	adc	r22, r18
     cc4:	83 9f       	mul	r24, r19
     cc6:	a0 0d       	add	r26, r0
     cc8:	61 1d       	adc	r22, r1
     cca:	22 1f       	adc	r18, r18
     ccc:	74 9f       	mul	r23, r20
     cce:	33 27       	eor	r19, r19
     cd0:	a0 0d       	add	r26, r0
     cd2:	61 1d       	adc	r22, r1
     cd4:	23 1f       	adc	r18, r19
     cd6:	84 9f       	mul	r24, r20
     cd8:	60 0d       	add	r22, r0
     cda:	21 1d       	adc	r18, r1
     cdc:	82 2f       	mov	r24, r18
     cde:	76 2f       	mov	r23, r22
     ce0:	6a 2f       	mov	r22, r26
     ce2:	11 24       	eor	r1, r1
     ce4:	9f 57       	subi	r25, 0x7F	; 127
     ce6:	50 40       	sbci	r21, 0x00	; 0
     ce8:	9a f0       	brmi	.+38     	; 0xd10 <__mulsf3_pse+0x88>
     cea:	f1 f0       	breq	.+60     	; 0xd28 <__mulsf3_pse+0xa0>
     cec:	88 23       	and	r24, r24
     cee:	4a f0       	brmi	.+18     	; 0xd02 <__mulsf3_pse+0x7a>
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	bb 1f       	adc	r27, r27
     cf6:	66 1f       	adc	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	91 50       	subi	r25, 0x01	; 1
     cfe:	50 40       	sbci	r21, 0x00	; 0
     d00:	a9 f7       	brne	.-22     	; 0xcec <__mulsf3_pse+0x64>
     d02:	9e 3f       	cpi	r25, 0xFE	; 254
     d04:	51 05       	cpc	r21, r1
     d06:	80 f0       	brcs	.+32     	; 0xd28 <__mulsf3_pse+0xa0>
     d08:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__fp_inf>
     d0c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_szero>
     d10:	5f 3f       	cpi	r21, 0xFF	; 255
     d12:	e4 f3       	brlt	.-8      	; 0xd0c <__mulsf3_pse+0x84>
     d14:	98 3e       	cpi	r25, 0xE8	; 232
     d16:	d4 f3       	brlt	.-12     	; 0xd0c <__mulsf3_pse+0x84>
     d18:	86 95       	lsr	r24
     d1a:	77 95       	ror	r23
     d1c:	67 95       	ror	r22
     d1e:	b7 95       	ror	r27
     d20:	f7 95       	ror	r31
     d22:	e7 95       	ror	r30
     d24:	9f 5f       	subi	r25, 0xFF	; 255
     d26:	c1 f7       	brne	.-16     	; 0xd18 <__mulsf3_pse+0x90>
     d28:	fe 2b       	or	r31, r30
     d2a:	88 0f       	add	r24, r24
     d2c:	91 1d       	adc	r25, r1
     d2e:	96 95       	lsr	r25
     d30:	87 95       	ror	r24
     d32:	97 f9       	bld	r25, 7
     d34:	08 95       	ret

00000d36 <printf>:
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 ea       	ldi	r30, 0xA1	; 161
     d3c:	f6 e0       	ldi	r31, 0x06	; 6
     d3e:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__prologue_saves__+0x20>
     d42:	ae 01       	movw	r20, r28
     d44:	4b 5f       	subi	r20, 0xFB	; 251
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	fa 01       	movw	r30, r20
     d4a:	61 91       	ld	r22, Z+
     d4c:	71 91       	ld	r23, Z+
     d4e:	af 01       	movw	r20, r30
     d50:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__iob+0x2>
     d54:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <__iob+0x3>
     d58:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vfprintf>
     d5c:	e2 e0       	ldi	r30, 0x02	; 2
     d5e:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__epilogue_restores__+0x20>

00000d62 <puts>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <__iob+0x2>
     d6e:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <__iob+0x3>
     d72:	23 81       	ldd	r18, Z+3	; 0x03
     d74:	21 ff       	sbrs	r18, 1
     d76:	1b c0       	rjmp	.+54     	; 0xdae <puts+0x4c>
     d78:	8c 01       	movw	r16, r24
     d7a:	d0 e0       	ldi	r29, 0x00	; 0
     d7c:	c0 e0       	ldi	r28, 0x00	; 0
     d7e:	f8 01       	movw	r30, r16
     d80:	81 91       	ld	r24, Z+
     d82:	8f 01       	movw	r16, r30
     d84:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <__iob+0x2>
     d88:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <__iob+0x3>
     d8c:	db 01       	movw	r26, r22
     d8e:	18 96       	adiw	r26, 0x08	; 8
     d90:	ed 91       	ld	r30, X+
     d92:	fc 91       	ld	r31, X
     d94:	19 97       	sbiw	r26, 0x09	; 9
     d96:	88 23       	and	r24, r24
     d98:	31 f0       	breq	.+12     	; 0xda6 <puts+0x44>
     d9a:	09 95       	icall
     d9c:	89 2b       	or	r24, r25
     d9e:	79 f3       	breq	.-34     	; 0xd7e <puts+0x1c>
     da0:	df ef       	ldi	r29, 0xFF	; 255
     da2:	cf ef       	ldi	r28, 0xFF	; 255
     da4:	ec cf       	rjmp	.-40     	; 0xd7e <puts+0x1c>
     da6:	8a e0       	ldi	r24, 0x0A	; 10
     da8:	09 95       	icall
     daa:	89 2b       	or	r24, r25
     dac:	19 f0       	breq	.+6      	; 0xdb4 <puts+0x52>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	9f ef       	ldi	r25, 0xFF	; 255
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <puts+0x56>
     db4:	8d 2f       	mov	r24, r29
     db6:	9c 2f       	mov	r25, r28
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <vfprintf>:
     dc2:	ab e0       	ldi	r26, 0x0B	; 11
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e7 ee       	ldi	r30, 0xE7	; 231
     dc8:	f6 e0       	ldi	r31, 0x06	; 6
     dca:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__prologue_saves__>
     dce:	6c 01       	movw	r12, r24
     dd0:	7b 01       	movw	r14, r22
     dd2:	8a 01       	movw	r16, r20
     dd4:	fc 01       	movw	r30, r24
     dd6:	17 82       	std	Z+7, r1	; 0x07
     dd8:	16 82       	std	Z+6, r1	; 0x06
     dda:	83 81       	ldd	r24, Z+3	; 0x03
     ddc:	81 ff       	sbrs	r24, 1
     dde:	cc c1       	rjmp	.+920    	; 0x1178 <vfprintf+0x3b6>
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	3c 01       	movw	r6, r24
     de6:	f6 01       	movw	r30, r12
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	f7 01       	movw	r30, r14
     dec:	93 fd       	sbrc	r25, 3
     dee:	85 91       	lpm	r24, Z+
     df0:	93 ff       	sbrs	r25, 3
     df2:	81 91       	ld	r24, Z+
     df4:	7f 01       	movw	r14, r30
     df6:	88 23       	and	r24, r24
     df8:	09 f4       	brne	.+2      	; 0xdfc <vfprintf+0x3a>
     dfa:	ba c1       	rjmp	.+884    	; 0x1170 <vfprintf+0x3ae>
     dfc:	85 32       	cpi	r24, 0x25	; 37
     dfe:	39 f4       	brne	.+14     	; 0xe0e <vfprintf+0x4c>
     e00:	93 fd       	sbrc	r25, 3
     e02:	85 91       	lpm	r24, Z+
     e04:	93 ff       	sbrs	r25, 3
     e06:	81 91       	ld	r24, Z+
     e08:	7f 01       	movw	r14, r30
     e0a:	85 32       	cpi	r24, 0x25	; 37
     e0c:	29 f4       	brne	.+10     	; 0xe18 <vfprintf+0x56>
     e0e:	b6 01       	movw	r22, r12
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
     e16:	e7 cf       	rjmp	.-50     	; 0xde6 <vfprintf+0x24>
     e18:	91 2c       	mov	r9, r1
     e1a:	21 2c       	mov	r2, r1
     e1c:	31 2c       	mov	r3, r1
     e1e:	ff e1       	ldi	r31, 0x1F	; 31
     e20:	f3 15       	cp	r31, r3
     e22:	d8 f0       	brcs	.+54     	; 0xe5a <vfprintf+0x98>
     e24:	8b 32       	cpi	r24, 0x2B	; 43
     e26:	79 f0       	breq	.+30     	; 0xe46 <vfprintf+0x84>
     e28:	38 f4       	brcc	.+14     	; 0xe38 <vfprintf+0x76>
     e2a:	80 32       	cpi	r24, 0x20	; 32
     e2c:	79 f0       	breq	.+30     	; 0xe4c <vfprintf+0x8a>
     e2e:	83 32       	cpi	r24, 0x23	; 35
     e30:	a1 f4       	brne	.+40     	; 0xe5a <vfprintf+0x98>
     e32:	23 2d       	mov	r18, r3
     e34:	20 61       	ori	r18, 0x10	; 16
     e36:	1d c0       	rjmp	.+58     	; 0xe72 <vfprintf+0xb0>
     e38:	8d 32       	cpi	r24, 0x2D	; 45
     e3a:	61 f0       	breq	.+24     	; 0xe54 <vfprintf+0x92>
     e3c:	80 33       	cpi	r24, 0x30	; 48
     e3e:	69 f4       	brne	.+26     	; 0xe5a <vfprintf+0x98>
     e40:	23 2d       	mov	r18, r3
     e42:	21 60       	ori	r18, 0x01	; 1
     e44:	16 c0       	rjmp	.+44     	; 0xe72 <vfprintf+0xb0>
     e46:	83 2d       	mov	r24, r3
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	38 2e       	mov	r3, r24
     e4c:	e3 2d       	mov	r30, r3
     e4e:	e4 60       	ori	r30, 0x04	; 4
     e50:	3e 2e       	mov	r3, r30
     e52:	2a c0       	rjmp	.+84     	; 0xea8 <vfprintf+0xe6>
     e54:	f3 2d       	mov	r31, r3
     e56:	f8 60       	ori	r31, 0x08	; 8
     e58:	1d c0       	rjmp	.+58     	; 0xe94 <vfprintf+0xd2>
     e5a:	37 fc       	sbrc	r3, 7
     e5c:	2d c0       	rjmp	.+90     	; 0xeb8 <vfprintf+0xf6>
     e5e:	20 ed       	ldi	r18, 0xD0	; 208
     e60:	28 0f       	add	r18, r24
     e62:	2a 30       	cpi	r18, 0x0A	; 10
     e64:	40 f0       	brcs	.+16     	; 0xe76 <vfprintf+0xb4>
     e66:	8e 32       	cpi	r24, 0x2E	; 46
     e68:	b9 f4       	brne	.+46     	; 0xe98 <vfprintf+0xd6>
     e6a:	36 fc       	sbrc	r3, 6
     e6c:	81 c1       	rjmp	.+770    	; 0x1170 <vfprintf+0x3ae>
     e6e:	23 2d       	mov	r18, r3
     e70:	20 64       	ori	r18, 0x40	; 64
     e72:	32 2e       	mov	r3, r18
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <vfprintf+0xe6>
     e76:	36 fe       	sbrs	r3, 6
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0xc4>
     e7a:	8a e0       	ldi	r24, 0x0A	; 10
     e7c:	98 9e       	mul	r9, r24
     e7e:	20 0d       	add	r18, r0
     e80:	11 24       	eor	r1, r1
     e82:	92 2e       	mov	r9, r18
     e84:	11 c0       	rjmp	.+34     	; 0xea8 <vfprintf+0xe6>
     e86:	ea e0       	ldi	r30, 0x0A	; 10
     e88:	2e 9e       	mul	r2, r30
     e8a:	20 0d       	add	r18, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	22 2e       	mov	r2, r18
     e90:	f3 2d       	mov	r31, r3
     e92:	f0 62       	ori	r31, 0x20	; 32
     e94:	3f 2e       	mov	r3, r31
     e96:	08 c0       	rjmp	.+16     	; 0xea8 <vfprintf+0xe6>
     e98:	8c 36       	cpi	r24, 0x6C	; 108
     e9a:	21 f4       	brne	.+8      	; 0xea4 <vfprintf+0xe2>
     e9c:	83 2d       	mov	r24, r3
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	38 2e       	mov	r3, r24
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <vfprintf+0xe6>
     ea4:	88 36       	cpi	r24, 0x68	; 104
     ea6:	41 f4       	brne	.+16     	; 0xeb8 <vfprintf+0xf6>
     ea8:	f7 01       	movw	r30, r14
     eaa:	93 fd       	sbrc	r25, 3
     eac:	85 91       	lpm	r24, Z+
     eae:	93 ff       	sbrs	r25, 3
     eb0:	81 91       	ld	r24, Z+
     eb2:	7f 01       	movw	r14, r30
     eb4:	81 11       	cpse	r24, r1
     eb6:	b3 cf       	rjmp	.-154    	; 0xe1e <vfprintf+0x5c>
     eb8:	98 2f       	mov	r25, r24
     eba:	9f 7d       	andi	r25, 0xDF	; 223
     ebc:	95 54       	subi	r25, 0x45	; 69
     ebe:	93 30       	cpi	r25, 0x03	; 3
     ec0:	28 f4       	brcc	.+10     	; 0xecc <vfprintf+0x10a>
     ec2:	0c 5f       	subi	r16, 0xFC	; 252
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	9f e3       	ldi	r25, 0x3F	; 63
     ec8:	99 83       	std	Y+1, r25	; 0x01
     eca:	0d c0       	rjmp	.+26     	; 0xee6 <vfprintf+0x124>
     ecc:	83 36       	cpi	r24, 0x63	; 99
     ece:	31 f0       	breq	.+12     	; 0xedc <vfprintf+0x11a>
     ed0:	83 37       	cpi	r24, 0x73	; 115
     ed2:	71 f0       	breq	.+28     	; 0xef0 <vfprintf+0x12e>
     ed4:	83 35       	cpi	r24, 0x53	; 83
     ed6:	09 f0       	breq	.+2      	; 0xeda <vfprintf+0x118>
     ed8:	59 c0       	rjmp	.+178    	; 0xf8c <vfprintf+0x1ca>
     eda:	21 c0       	rjmp	.+66     	; 0xf1e <vfprintf+0x15c>
     edc:	f8 01       	movw	r30, r16
     ede:	80 81       	ld	r24, Z
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	0e 5f       	subi	r16, 0xFE	; 254
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	88 24       	eor	r8, r8
     ee8:	83 94       	inc	r8
     eea:	91 2c       	mov	r9, r1
     eec:	53 01       	movw	r10, r6
     eee:	13 c0       	rjmp	.+38     	; 0xf16 <vfprintf+0x154>
     ef0:	28 01       	movw	r4, r16
     ef2:	f2 e0       	ldi	r31, 0x02	; 2
     ef4:	4f 0e       	add	r4, r31
     ef6:	51 1c       	adc	r5, r1
     ef8:	f8 01       	movw	r30, r16
     efa:	a0 80       	ld	r10, Z
     efc:	b1 80       	ldd	r11, Z+1	; 0x01
     efe:	36 fe       	sbrs	r3, 6
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <vfprintf+0x146>
     f02:	69 2d       	mov	r22, r9
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <vfprintf+0x14a>
     f08:	6f ef       	ldi	r22, 0xFF	; 255
     f0a:	7f ef       	ldi	r23, 0xFF	; 255
     f0c:	c5 01       	movw	r24, r10
     f0e:	0e 94 cd 08 	call	0x119a	; 0x119a <strnlen>
     f12:	4c 01       	movw	r8, r24
     f14:	82 01       	movw	r16, r4
     f16:	f3 2d       	mov	r31, r3
     f18:	ff 77       	andi	r31, 0x7F	; 127
     f1a:	3f 2e       	mov	r3, r31
     f1c:	16 c0       	rjmp	.+44     	; 0xf4a <vfprintf+0x188>
     f1e:	28 01       	movw	r4, r16
     f20:	22 e0       	ldi	r18, 0x02	; 2
     f22:	42 0e       	add	r4, r18
     f24:	51 1c       	adc	r5, r1
     f26:	f8 01       	movw	r30, r16
     f28:	a0 80       	ld	r10, Z
     f2a:	b1 80       	ldd	r11, Z+1	; 0x01
     f2c:	36 fe       	sbrs	r3, 6
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x174>
     f30:	69 2d       	mov	r22, r9
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x178>
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	c5 01       	movw	r24, r10
     f3c:	0e 94 c2 08 	call	0x1184	; 0x1184 <strnlen_P>
     f40:	4c 01       	movw	r8, r24
     f42:	f3 2d       	mov	r31, r3
     f44:	f0 68       	ori	r31, 0x80	; 128
     f46:	3f 2e       	mov	r3, r31
     f48:	82 01       	movw	r16, r4
     f4a:	33 fc       	sbrc	r3, 3
     f4c:	1b c0       	rjmp	.+54     	; 0xf84 <vfprintf+0x1c2>
     f4e:	82 2d       	mov	r24, r2
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	88 16       	cp	r8, r24
     f54:	99 06       	cpc	r9, r25
     f56:	b0 f4       	brcc	.+44     	; 0xf84 <vfprintf+0x1c2>
     f58:	b6 01       	movw	r22, r12
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
     f62:	2a 94       	dec	r2
     f64:	f4 cf       	rjmp	.-24     	; 0xf4e <vfprintf+0x18c>
     f66:	f5 01       	movw	r30, r10
     f68:	37 fc       	sbrc	r3, 7
     f6a:	85 91       	lpm	r24, Z+
     f6c:	37 fe       	sbrs	r3, 7
     f6e:	81 91       	ld	r24, Z+
     f70:	5f 01       	movw	r10, r30
     f72:	b6 01       	movw	r22, r12
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
     f7a:	21 10       	cpse	r2, r1
     f7c:	2a 94       	dec	r2
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	82 1a       	sub	r8, r18
     f82:	91 08       	sbc	r9, r1
     f84:	81 14       	cp	r8, r1
     f86:	91 04       	cpc	r9, r1
     f88:	71 f7       	brne	.-36     	; 0xf66 <vfprintf+0x1a4>
     f8a:	e8 c0       	rjmp	.+464    	; 0x115c <vfprintf+0x39a>
     f8c:	84 36       	cpi	r24, 0x64	; 100
     f8e:	11 f0       	breq	.+4      	; 0xf94 <vfprintf+0x1d2>
     f90:	89 36       	cpi	r24, 0x69	; 105
     f92:	41 f5       	brne	.+80     	; 0xfe4 <vfprintf+0x222>
     f94:	f8 01       	movw	r30, r16
     f96:	37 fe       	sbrs	r3, 7
     f98:	07 c0       	rjmp	.+14     	; 0xfa8 <vfprintf+0x1e6>
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	0c 5f       	subi	r16, 0xFC	; 252
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	08 c0       	rjmp	.+16     	; 0xfb8 <vfprintf+0x1f6>
     fa8:	60 81       	ld	r22, Z
     faa:	71 81       	ldd	r23, Z+1	; 0x01
     fac:	07 2e       	mov	r0, r23
     fae:	00 0c       	add	r0, r0
     fb0:	88 0b       	sbc	r24, r24
     fb2:	99 0b       	sbc	r25, r25
     fb4:	0e 5f       	subi	r16, 0xFE	; 254
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	f3 2d       	mov	r31, r3
     fba:	ff 76       	andi	r31, 0x6F	; 111
     fbc:	3f 2e       	mov	r3, r31
     fbe:	97 ff       	sbrs	r25, 7
     fc0:	09 c0       	rjmp	.+18     	; 0xfd4 <vfprintf+0x212>
     fc2:	90 95       	com	r25
     fc4:	80 95       	com	r24
     fc6:	70 95       	com	r23
     fc8:	61 95       	neg	r22
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	f0 68       	ori	r31, 0x80	; 128
     fd2:	3f 2e       	mov	r3, r31
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	a3 01       	movw	r20, r6
     fda:	0e 94 14 09 	call	0x1228	; 0x1228 <__ultoa_invert>
     fde:	88 2e       	mov	r8, r24
     fe0:	86 18       	sub	r8, r6
     fe2:	45 c0       	rjmp	.+138    	; 0x106e <vfprintf+0x2ac>
     fe4:	85 37       	cpi	r24, 0x75	; 117
     fe6:	31 f4       	brne	.+12     	; 0xff4 <vfprintf+0x232>
     fe8:	23 2d       	mov	r18, r3
     fea:	2f 7e       	andi	r18, 0xEF	; 239
     fec:	b2 2e       	mov	r11, r18
     fee:	2a e0       	ldi	r18, 0x0A	; 10
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	25 c0       	rjmp	.+74     	; 0x103e <vfprintf+0x27c>
     ff4:	93 2d       	mov	r25, r3
     ff6:	99 7f       	andi	r25, 0xF9	; 249
     ff8:	b9 2e       	mov	r11, r25
     ffa:	8f 36       	cpi	r24, 0x6F	; 111
     ffc:	c1 f0       	breq	.+48     	; 0x102e <vfprintf+0x26c>
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <vfprintf+0x244>
    1000:	88 35       	cpi	r24, 0x58	; 88
    1002:	79 f0       	breq	.+30     	; 0x1022 <vfprintf+0x260>
    1004:	b5 c0       	rjmp	.+362    	; 0x1170 <vfprintf+0x3ae>
    1006:	80 37       	cpi	r24, 0x70	; 112
    1008:	19 f0       	breq	.+6      	; 0x1010 <vfprintf+0x24e>
    100a:	88 37       	cpi	r24, 0x78	; 120
    100c:	21 f0       	breq	.+8      	; 0x1016 <vfprintf+0x254>
    100e:	b0 c0       	rjmp	.+352    	; 0x1170 <vfprintf+0x3ae>
    1010:	e9 2f       	mov	r30, r25
    1012:	e0 61       	ori	r30, 0x10	; 16
    1014:	be 2e       	mov	r11, r30
    1016:	b4 fe       	sbrs	r11, 4
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <vfprintf+0x272>
    101a:	fb 2d       	mov	r31, r11
    101c:	f4 60       	ori	r31, 0x04	; 4
    101e:	bf 2e       	mov	r11, r31
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <vfprintf+0x272>
    1022:	34 fe       	sbrs	r3, 4
    1024:	0a c0       	rjmp	.+20     	; 0x103a <vfprintf+0x278>
    1026:	29 2f       	mov	r18, r25
    1028:	26 60       	ori	r18, 0x06	; 6
    102a:	b2 2e       	mov	r11, r18
    102c:	06 c0       	rjmp	.+12     	; 0x103a <vfprintf+0x278>
    102e:	28 e0       	ldi	r18, 0x08	; 8
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	05 c0       	rjmp	.+10     	; 0x103e <vfprintf+0x27c>
    1034:	20 e1       	ldi	r18, 0x10	; 16
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0x27c>
    103a:	20 e1       	ldi	r18, 0x10	; 16
    103c:	32 e0       	ldi	r19, 0x02	; 2
    103e:	f8 01       	movw	r30, r16
    1040:	b7 fe       	sbrs	r11, 7
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <vfprintf+0x290>
    1044:	60 81       	ld	r22, Z
    1046:	71 81       	ldd	r23, Z+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	0c 5f       	subi	r16, 0xFC	; 252
    104e:	1f 4f       	sbci	r17, 0xFF	; 255
    1050:	06 c0       	rjmp	.+12     	; 0x105e <vfprintf+0x29c>
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 5f       	subi	r16, 0xFE	; 254
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	a3 01       	movw	r20, r6
    1060:	0e 94 14 09 	call	0x1228	; 0x1228 <__ultoa_invert>
    1064:	88 2e       	mov	r8, r24
    1066:	86 18       	sub	r8, r6
    1068:	fb 2d       	mov	r31, r11
    106a:	ff 77       	andi	r31, 0x7F	; 127
    106c:	3f 2e       	mov	r3, r31
    106e:	36 fe       	sbrs	r3, 6
    1070:	0d c0       	rjmp	.+26     	; 0x108c <vfprintf+0x2ca>
    1072:	23 2d       	mov	r18, r3
    1074:	2e 7f       	andi	r18, 0xFE	; 254
    1076:	a2 2e       	mov	r10, r18
    1078:	89 14       	cp	r8, r9
    107a:	58 f4       	brcc	.+22     	; 0x1092 <vfprintf+0x2d0>
    107c:	34 fe       	sbrs	r3, 4
    107e:	0b c0       	rjmp	.+22     	; 0x1096 <vfprintf+0x2d4>
    1080:	32 fc       	sbrc	r3, 2
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <vfprintf+0x2d4>
    1084:	83 2d       	mov	r24, r3
    1086:	8e 7e       	andi	r24, 0xEE	; 238
    1088:	a8 2e       	mov	r10, r24
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <vfprintf+0x2d4>
    108c:	b8 2c       	mov	r11, r8
    108e:	a3 2c       	mov	r10, r3
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <vfprintf+0x2d6>
    1092:	b8 2c       	mov	r11, r8
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <vfprintf+0x2d6>
    1096:	b9 2c       	mov	r11, r9
    1098:	a4 fe       	sbrs	r10, 4
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <vfprintf+0x2f8>
    109c:	fe 01       	movw	r30, r28
    109e:	e8 0d       	add	r30, r8
    10a0:	f1 1d       	adc	r31, r1
    10a2:	80 81       	ld	r24, Z
    10a4:	80 33       	cpi	r24, 0x30	; 48
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <vfprintf+0x2ee>
    10a8:	9a 2d       	mov	r25, r10
    10aa:	99 7e       	andi	r25, 0xE9	; 233
    10ac:	a9 2e       	mov	r10, r25
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <vfprintf+0x300>
    10b0:	a2 fe       	sbrs	r10, 2
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <vfprintf+0x2fe>
    10b4:	b3 94       	inc	r11
    10b6:	b3 94       	inc	r11
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <vfprintf+0x300>
    10ba:	8a 2d       	mov	r24, r10
    10bc:	86 78       	andi	r24, 0x86	; 134
    10be:	09 f0       	breq	.+2      	; 0x10c2 <vfprintf+0x300>
    10c0:	b3 94       	inc	r11
    10c2:	a3 fc       	sbrc	r10, 3
    10c4:	11 c0       	rjmp	.+34     	; 0x10e8 <vfprintf+0x326>
    10c6:	a0 fe       	sbrs	r10, 0
    10c8:	06 c0       	rjmp	.+12     	; 0x10d6 <vfprintf+0x314>
    10ca:	b2 14       	cp	r11, r2
    10cc:	88 f4       	brcc	.+34     	; 0x10f0 <vfprintf+0x32e>
    10ce:	28 0c       	add	r2, r8
    10d0:	92 2c       	mov	r9, r2
    10d2:	9b 18       	sub	r9, r11
    10d4:	0e c0       	rjmp	.+28     	; 0x10f2 <vfprintf+0x330>
    10d6:	b2 14       	cp	r11, r2
    10d8:	60 f4       	brcc	.+24     	; 0x10f2 <vfprintf+0x330>
    10da:	b6 01       	movw	r22, r12
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
    10e4:	b3 94       	inc	r11
    10e6:	f7 cf       	rjmp	.-18     	; 0x10d6 <vfprintf+0x314>
    10e8:	b2 14       	cp	r11, r2
    10ea:	18 f4       	brcc	.+6      	; 0x10f2 <vfprintf+0x330>
    10ec:	2b 18       	sub	r2, r11
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <vfprintf+0x332>
    10f0:	98 2c       	mov	r9, r8
    10f2:	21 2c       	mov	r2, r1
    10f4:	a4 fe       	sbrs	r10, 4
    10f6:	10 c0       	rjmp	.+32     	; 0x1118 <vfprintf+0x356>
    10f8:	b6 01       	movw	r22, r12
    10fa:	80 e3       	ldi	r24, 0x30	; 48
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
    1102:	a2 fe       	sbrs	r10, 2
    1104:	17 c0       	rjmp	.+46     	; 0x1134 <vfprintf+0x372>
    1106:	a1 fc       	sbrc	r10, 1
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <vfprintf+0x34e>
    110a:	88 e7       	ldi	r24, 0x78	; 120
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <vfprintf+0x352>
    1110:	88 e5       	ldi	r24, 0x58	; 88
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	b6 01       	movw	r22, r12
    1116:	0c c0       	rjmp	.+24     	; 0x1130 <vfprintf+0x36e>
    1118:	8a 2d       	mov	r24, r10
    111a:	86 78       	andi	r24, 0x86	; 134
    111c:	59 f0       	breq	.+22     	; 0x1134 <vfprintf+0x372>
    111e:	a1 fe       	sbrs	r10, 1
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <vfprintf+0x364>
    1122:	8b e2       	ldi	r24, 0x2B	; 43
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <vfprintf+0x366>
    1126:	80 e2       	ldi	r24, 0x20	; 32
    1128:	a7 fc       	sbrc	r10, 7
    112a:	8d e2       	ldi	r24, 0x2D	; 45
    112c:	b6 01       	movw	r22, r12
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
    1134:	89 14       	cp	r8, r9
    1136:	38 f4       	brcc	.+14     	; 0x1146 <vfprintf+0x384>
    1138:	b6 01       	movw	r22, r12
    113a:	80 e3       	ldi	r24, 0x30	; 48
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
    1142:	9a 94       	dec	r9
    1144:	f7 cf       	rjmp	.-18     	; 0x1134 <vfprintf+0x372>
    1146:	8a 94       	dec	r8
    1148:	f3 01       	movw	r30, r6
    114a:	e8 0d       	add	r30, r8
    114c:	f1 1d       	adc	r31, r1
    114e:	80 81       	ld	r24, Z
    1150:	b6 01       	movw	r22, r12
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
    1158:	81 10       	cpse	r8, r1
    115a:	f5 cf       	rjmp	.-22     	; 0x1146 <vfprintf+0x384>
    115c:	22 20       	and	r2, r2
    115e:	09 f4       	brne	.+2      	; 0x1162 <vfprintf+0x3a0>
    1160:	42 ce       	rjmp	.-892    	; 0xde6 <vfprintf+0x24>
    1162:	b6 01       	movw	r22, r12
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fputc>
    116c:	2a 94       	dec	r2
    116e:	f6 cf       	rjmp	.-20     	; 0x115c <vfprintf+0x39a>
    1170:	f6 01       	movw	r30, r12
    1172:	86 81       	ldd	r24, Z+6	; 0x06
    1174:	97 81       	ldd	r25, Z+7	; 0x07
    1176:	02 c0       	rjmp	.+4      	; 0x117c <vfprintf+0x3ba>
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	9f ef       	ldi	r25, 0xFF	; 255
    117c:	2b 96       	adiw	r28, 0x0b	; 11
    117e:	e2 e1       	ldi	r30, 0x12	; 18
    1180:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__epilogue_restores__>

00001184 <strnlen_P>:
    1184:	fc 01       	movw	r30, r24
    1186:	05 90       	lpm	r0, Z+
    1188:	61 50       	subi	r22, 0x01	; 1
    118a:	70 40       	sbci	r23, 0x00	; 0
    118c:	01 10       	cpse	r0, r1
    118e:	d8 f7       	brcc	.-10     	; 0x1186 <strnlen_P+0x2>
    1190:	80 95       	com	r24
    1192:	90 95       	com	r25
    1194:	8e 0f       	add	r24, r30
    1196:	9f 1f       	adc	r25, r31
    1198:	08 95       	ret

0000119a <strnlen>:
    119a:	fc 01       	movw	r30, r24
    119c:	61 50       	subi	r22, 0x01	; 1
    119e:	70 40       	sbci	r23, 0x00	; 0
    11a0:	01 90       	ld	r0, Z+
    11a2:	01 10       	cpse	r0, r1
    11a4:	d8 f7       	brcc	.-10     	; 0x119c <strnlen+0x2>
    11a6:	80 95       	com	r24
    11a8:	90 95       	com	r25
    11aa:	8e 0f       	add	r24, r30
    11ac:	9f 1f       	adc	r25, r31
    11ae:	08 95       	ret

000011b0 <fputc>:
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	fb 01       	movw	r30, r22
    11ba:	23 81       	ldd	r18, Z+3	; 0x03
    11bc:	21 fd       	sbrc	r18, 1
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <fputc+0x16>
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	9f ef       	ldi	r25, 0xFF	; 255
    11c4:	2c c0       	rjmp	.+88     	; 0x121e <fputc+0x6e>
    11c6:	22 ff       	sbrs	r18, 2
    11c8:	16 c0       	rjmp	.+44     	; 0x11f6 <fputc+0x46>
    11ca:	46 81       	ldd	r20, Z+6	; 0x06
    11cc:	57 81       	ldd	r21, Z+7	; 0x07
    11ce:	24 81       	ldd	r18, Z+4	; 0x04
    11d0:	35 81       	ldd	r19, Z+5	; 0x05
    11d2:	42 17       	cp	r20, r18
    11d4:	53 07       	cpc	r21, r19
    11d6:	44 f4       	brge	.+16     	; 0x11e8 <fputc+0x38>
    11d8:	a0 81       	ld	r26, Z
    11da:	b1 81       	ldd	r27, Z+1	; 0x01
    11dc:	9d 01       	movw	r18, r26
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	31 83       	std	Z+1, r19	; 0x01
    11e4:	20 83       	st	Z, r18
    11e6:	8c 93       	st	X, r24
    11e8:	26 81       	ldd	r18, Z+6	; 0x06
    11ea:	37 81       	ldd	r19, Z+7	; 0x07
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	37 83       	std	Z+7, r19	; 0x07
    11f2:	26 83       	std	Z+6, r18	; 0x06
    11f4:	14 c0       	rjmp	.+40     	; 0x121e <fputc+0x6e>
    11f6:	8b 01       	movw	r16, r22
    11f8:	ec 01       	movw	r28, r24
    11fa:	fb 01       	movw	r30, r22
    11fc:	00 84       	ldd	r0, Z+8	; 0x08
    11fe:	f1 85       	ldd	r31, Z+9	; 0x09
    1200:	e0 2d       	mov	r30, r0
    1202:	09 95       	icall
    1204:	89 2b       	or	r24, r25
    1206:	e1 f6       	brne	.-72     	; 0x11c0 <fputc+0x10>
    1208:	d8 01       	movw	r26, r16
    120a:	16 96       	adiw	r26, 0x06	; 6
    120c:	8d 91       	ld	r24, X+
    120e:	9c 91       	ld	r25, X
    1210:	17 97       	sbiw	r26, 0x07	; 7
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	17 96       	adiw	r26, 0x07	; 7
    1216:	9c 93       	st	X, r25
    1218:	8e 93       	st	-X, r24
    121a:	16 97       	sbiw	r26, 0x06	; 6
    121c:	ce 01       	movw	r24, r28
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <__ultoa_invert>:
    1228:	fa 01       	movw	r30, r20
    122a:	aa 27       	eor	r26, r26
    122c:	28 30       	cpi	r18, 0x08	; 8
    122e:	51 f1       	breq	.+84     	; 0x1284 <__ultoa_invert+0x5c>
    1230:	20 31       	cpi	r18, 0x10	; 16
    1232:	81 f1       	breq	.+96     	; 0x1294 <__ultoa_invert+0x6c>
    1234:	e8 94       	clt
    1236:	6f 93       	push	r22
    1238:	6e 7f       	andi	r22, 0xFE	; 254
    123a:	6e 5f       	subi	r22, 0xFE	; 254
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	8f 4f       	sbci	r24, 0xFF	; 255
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	af 4f       	sbci	r26, 0xFF	; 255
    1244:	b1 e0       	ldi	r27, 0x01	; 1
    1246:	3e d0       	rcall	.+124    	; 0x12c4 <__ultoa_invert+0x9c>
    1248:	b4 e0       	ldi	r27, 0x04	; 4
    124a:	3c d0       	rcall	.+120    	; 0x12c4 <__ultoa_invert+0x9c>
    124c:	67 0f       	add	r22, r23
    124e:	78 1f       	adc	r23, r24
    1250:	89 1f       	adc	r24, r25
    1252:	9a 1f       	adc	r25, r26
    1254:	a1 1d       	adc	r26, r1
    1256:	68 0f       	add	r22, r24
    1258:	79 1f       	adc	r23, r25
    125a:	8a 1f       	adc	r24, r26
    125c:	91 1d       	adc	r25, r1
    125e:	a1 1d       	adc	r26, r1
    1260:	6a 0f       	add	r22, r26
    1262:	71 1d       	adc	r23, r1
    1264:	81 1d       	adc	r24, r1
    1266:	91 1d       	adc	r25, r1
    1268:	a1 1d       	adc	r26, r1
    126a:	20 d0       	rcall	.+64     	; 0x12ac <__ultoa_invert+0x84>
    126c:	09 f4       	brne	.+2      	; 0x1270 <__ultoa_invert+0x48>
    126e:	68 94       	set
    1270:	3f 91       	pop	r19
    1272:	2a e0       	ldi	r18, 0x0A	; 10
    1274:	26 9f       	mul	r18, r22
    1276:	11 24       	eor	r1, r1
    1278:	30 19       	sub	r19, r0
    127a:	30 5d       	subi	r19, 0xD0	; 208
    127c:	31 93       	st	Z+, r19
    127e:	de f6       	brtc	.-74     	; 0x1236 <__ultoa_invert+0xe>
    1280:	cf 01       	movw	r24, r30
    1282:	08 95       	ret
    1284:	46 2f       	mov	r20, r22
    1286:	47 70       	andi	r20, 0x07	; 7
    1288:	40 5d       	subi	r20, 0xD0	; 208
    128a:	41 93       	st	Z+, r20
    128c:	b3 e0       	ldi	r27, 0x03	; 3
    128e:	0f d0       	rcall	.+30     	; 0x12ae <__ultoa_invert+0x86>
    1290:	c9 f7       	brne	.-14     	; 0x1284 <__ultoa_invert+0x5c>
    1292:	f6 cf       	rjmp	.-20     	; 0x1280 <__ultoa_invert+0x58>
    1294:	46 2f       	mov	r20, r22
    1296:	4f 70       	andi	r20, 0x0F	; 15
    1298:	40 5d       	subi	r20, 0xD0	; 208
    129a:	4a 33       	cpi	r20, 0x3A	; 58
    129c:	18 f0       	brcs	.+6      	; 0x12a4 <__ultoa_invert+0x7c>
    129e:	49 5d       	subi	r20, 0xD9	; 217
    12a0:	31 fd       	sbrc	r19, 1
    12a2:	40 52       	subi	r20, 0x20	; 32
    12a4:	41 93       	st	Z+, r20
    12a6:	02 d0       	rcall	.+4      	; 0x12ac <__ultoa_invert+0x84>
    12a8:	a9 f7       	brne	.-22     	; 0x1294 <__ultoa_invert+0x6c>
    12aa:	ea cf       	rjmp	.-44     	; 0x1280 <__ultoa_invert+0x58>
    12ac:	b4 e0       	ldi	r27, 0x04	; 4
    12ae:	a6 95       	lsr	r26
    12b0:	97 95       	ror	r25
    12b2:	87 95       	ror	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	ba 95       	dec	r27
    12ba:	c9 f7       	brne	.-14     	; 0x12ae <__ultoa_invert+0x86>
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 05       	cpc	r22, r1
    12c0:	71 05       	cpc	r23, r1
    12c2:	08 95       	ret
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	0a 2e       	mov	r0, r26
    12ca:	06 94       	lsr	r0
    12cc:	57 95       	ror	r21
    12ce:	47 95       	ror	r20
    12d0:	37 95       	ror	r19
    12d2:	27 95       	ror	r18
    12d4:	ba 95       	dec	r27
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <__ultoa_invert+0xa2>
    12d8:	62 0f       	add	r22, r18
    12da:	73 1f       	adc	r23, r19
    12dc:	84 1f       	adc	r24, r20
    12de:	95 1f       	adc	r25, r21
    12e0:	a0 1d       	adc	r26, r0
    12e2:	08 95       	ret

000012e4 <__prologue_saves__>:
    12e4:	2f 92       	push	r2
    12e6:	3f 92       	push	r3
    12e8:	4f 92       	push	r4
    12ea:	5f 92       	push	r5
    12ec:	6f 92       	push	r6
    12ee:	7f 92       	push	r7
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	ca 1b       	sub	r28, r26
    130e:	db 0b       	sbc	r29, r27
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	09 94       	ijmp

0000131c <__epilogue_restores__>:
    131c:	2a 88       	ldd	r2, Y+18	; 0x12
    131e:	39 88       	ldd	r3, Y+17	; 0x11
    1320:	48 88       	ldd	r4, Y+16	; 0x10
    1322:	5f 84       	ldd	r5, Y+15	; 0x0f
    1324:	6e 84       	ldd	r6, Y+14	; 0x0e
    1326:	7d 84       	ldd	r7, Y+13	; 0x0d
    1328:	8c 84       	ldd	r8, Y+12	; 0x0c
    132a:	9b 84       	ldd	r9, Y+11	; 0x0b
    132c:	aa 84       	ldd	r10, Y+10	; 0x0a
    132e:	b9 84       	ldd	r11, Y+9	; 0x09
    1330:	c8 84       	ldd	r12, Y+8	; 0x08
    1332:	df 80       	ldd	r13, Y+7	; 0x07
    1334:	ee 80       	ldd	r14, Y+6	; 0x06
    1336:	fd 80       	ldd	r15, Y+5	; 0x05
    1338:	0c 81       	ldd	r16, Y+4	; 0x04
    133a:	1b 81       	ldd	r17, Y+3	; 0x03
    133c:	aa 81       	ldd	r26, Y+2	; 0x02
    133e:	b9 81       	ldd	r27, Y+1	; 0x01
    1340:	ce 0f       	add	r28, r30
    1342:	d1 1d       	adc	r29, r1
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	ed 01       	movw	r28, r26
    1350:	08 95       	ret

00001352 <_exit>:
    1352:	f8 94       	cli

00001354 <__stop_program>:
    1354:	ff cf       	rjmp	.-2      	; 0x1354 <__stop_program>
