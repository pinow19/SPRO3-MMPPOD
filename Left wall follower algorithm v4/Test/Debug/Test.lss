
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000756  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000007ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1b  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  000014df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000680  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ba  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000416  00000000  00000000  00002936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a9 03 	jmp	0x752	; 0x752 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include "samd.h"
#include <stdio.h>

int main(void)
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	set_pins();
  b2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <set_pins>
	unsigned int FrontSensor = 0, RightSensor = 0, LeftSensor = 0;
  do
  {
	  FrontSensor = ultrasound_sensor(U_FRONT);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ultrasound_sensor>
  bc:	ec 01       	movw	r28, r24
	  LeftSensor = ultrasound_sensor(U_LEFT);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ultrasound_sensor>
  c4:	7c 01       	movw	r14, r24
	  RightSensor = ultrasound_sensor(U_RIGHT);
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ultrasound_sensor>
  cc:	8c 01       	movw	r16, r24

	  if (FrontSensor < DIS && RightSensor < DIS && LeftSensor < DIS) //obstacles in front of all three sides
  ce:	c9 31       	cpi	r28, 0x19	; 25
  d0:	d1 05       	cpc	r29, r1
  d2:	90 f4       	brcc	.+36     	; 0xf8 <main+0x52>
  d4:	49 97       	sbiw	r24, 0x19	; 25
  d6:	80 f4       	brcc	.+32     	; 0xf8 <main+0x52>
  d8:	89 e1       	ldi	r24, 0x19	; 25
  da:	e8 16       	cp	r14, r24
  dc:	f1 04       	cpc	r15, r1
  de:	40 f0       	brcs	.+16     	; 0xf0 <main+0x4a>
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <main+0x52>
	  {
		  while(!(FrontSensor > DIS)){
			  select_motor_direction(RIGHT); //Turn right until there is free way at front
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
			  FrontSensor = ultrasound_sensor(U_FRONT);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ultrasound_sensor>
  ee:	ec 01       	movw	r28, r24
	  LeftSensor = ultrasound_sensor(U_LEFT);
	  RightSensor = ultrasound_sensor(U_RIGHT);

	  if (FrontSensor < DIS && RightSensor < DIS && LeftSensor < DIS) //obstacles in front of all three sides
	  {
		  while(!(FrontSensor > DIS)){
  f0:	ca 31       	cpi	r28, 0x1A	; 26
  f2:	d1 05       	cpc	r29, r1
  f4:	b0 f3       	brcs	.-20     	; 0xe2 <main+0x3c>
  f6:	49 c0       	rjmp	.+146    	; 0x18a <main+0xe4>
			  select_motor_direction(RIGHT); //Turn right until there is free way at front
			  FrontSensor = ultrasound_sensor(U_FRONT);
		  }
	  }

	  else if (FrontSensor < DIS && RightSensor < DIS && LeftSensor > DIS) //obstacles on right and front sides
  f8:	c9 31       	cpi	r28, 0x19	; 25
  fa:	d1 05       	cpc	r29, r1
  fc:	58 f4       	brcc	.+22     	; 0x114 <main+0x6e>
  fe:	09 31       	cpi	r16, 0x19	; 25
 100:	11 05       	cpc	r17, r1
 102:	40 f4       	brcc	.+16     	; 0x114 <main+0x6e>
 104:	8a e1       	ldi	r24, 0x1A	; 26
 106:	e8 16       	cp	r14, r24
 108:	f1 04       	cpc	r15, r1
 10a:	20 f0       	brcs	.+8      	; 0x114 <main+0x6e>
	  {
		  select_motor_direction(LEFT); //turn left side
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
 112:	3b c0       	rjmp	.+118    	; 0x18a <main+0xe4>
	  }

	  else if (FrontSensor < DIS && RightSensor > DIS && LeftSensor < DIS) //obstacles on left and front sides
 114:	c9 31       	cpi	r28, 0x19	; 25
 116:	d1 05       	cpc	r29, r1
 118:	58 f4       	brcc	.+22     	; 0x130 <main+0x8a>
 11a:	0a 31       	cpi	r16, 0x1A	; 26
 11c:	11 05       	cpc	r17, r1
 11e:	40 f0       	brcs	.+16     	; 0x130 <main+0x8a>
 120:	89 e1       	ldi	r24, 0x19	; 25
 122:	e8 16       	cp	r14, r24
 124:	f1 04       	cpc	r15, r1
 126:	20 f4       	brcc	.+8      	; 0x130 <main+0x8a>
	  {
		  select_motor_direction(RIGHT); //turn right side
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
 12e:	2d c0       	rjmp	.+90     	; 0x18a <main+0xe4>
	  }
	  
	  else if (FrontSensor < DIS && RightSensor > DIS && LeftSensor > DIS) //obstacles on the front side
 130:	c9 31       	cpi	r28, 0x19	; 25
 132:	d1 05       	cpc	r29, r1
 134:	90 f4       	brcc	.+36     	; 0x15a <main+0xb4>
 136:	0a 31       	cpi	r16, 0x1A	; 26
 138:	11 05       	cpc	r17, r1
 13a:	78 f0       	brcs	.+30     	; 0x15a <main+0xb4>
 13c:	8a e1       	ldi	r24, 0x1A	; 26
 13e:	e8 16       	cp	r14, r24
 140:	f1 04       	cpc	r15, r1
 142:	58 f0       	brcs	.+22     	; 0x15a <main+0xb4>
	  {
		  select_motor_direction(RIGHT); //turn right side
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
		  delay_ms(180);
 14a:	84 eb       	ldi	r24, 0xB4	; 180
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 8d 01 	call	0x31a	; 0x31a <delay_ms>
		  select_motor_direction(FORWARD);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
 158:	18 c0       	rjmp	.+48     	; 0x18a <main+0xe4>
	  }
	  else if (FrontSensor > DIS && RightSensor < DIS && LeftSensor > DIS) //obstacle on the right side
 15a:	ca 31       	cpi	r28, 0x1A	; 26
 15c:	d1 05       	cpc	r29, r1
 15e:	90 f0       	brcs	.+36     	; 0x184 <main+0xde>
 160:	09 31       	cpi	r16, 0x19	; 25
 162:	11 05       	cpc	r17, r1
 164:	78 f4       	brcc	.+30     	; 0x184 <main+0xde>
 166:	8a e1       	ldi	r24, 0x1A	; 26
 168:	e8 16       	cp	r14, r24
 16a:	f1 04       	cpc	r15, r1
 16c:	58 f0       	brcs	.+22     	; 0x184 <main+0xde>
	  {
		  select_motor_direction (LEFT); //turn right side
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
		  delay_ms(180);
 174:	84 eb       	ldi	r24, 0xB4	; 180
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8d 01 	call	0x31a	; 0x31a <delay_ms>
		  select_motor_direction(FORWARD);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
 182:	03 c0       	rjmp	.+6      	; 0x18a <main+0xe4>
	  }

	  else
	  {
		  select_motor_direction(FORWARD);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
	  }
	  
  } while (!(FrontSensor > DIS && RightSensor > DIS && LeftSensor > DIS)); //if all three sensors does not sense anything
 18a:	6a 97       	sbiw	r28, 0x1a	; 26
 18c:	08 f4       	brcc	.+2      	; 0x190 <main+0xea>
 18e:	93 cf       	rjmp	.-218    	; 0xb6 <main+0x10>
 190:	0a 31       	cpi	r16, 0x1A	; 26
 192:	11 05       	cpc	r17, r1
 194:	08 f4       	brcc	.+2      	; 0x198 <main+0xf2>
 196:	8f cf       	rjmp	.-226    	; 0xb6 <main+0x10>
 198:	8a e1       	ldi	r24, 0x1A	; 26
 19a:	e8 16       	cp	r14, r24
 19c:	f1 04       	cpc	r15, r1
 19e:	08 f4       	brcc	.+2      	; 0x1a2 <main+0xfc>
 1a0:	8a cf       	rjmp	.-236    	; 0xb6 <main+0x10>
  select_motor_direction(STOP); //Stop motor	
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <select_motor_direction>
}
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <setup_motors>:
    break;
  }
}

void setup_motors (void){
  TCCR0A |= (1 << WGM00) | (1 << WGM00); //Enable Fast PWM mode on Timer0
 1ba:	84 b5       	in	r24, 0x24	; 36
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1); //Enable to put out PWM signal to D5 and D6 pins
 1c0:	84 b5       	in	r24, 0x24	; 36
 1c2:	80 6a       	ori	r24, 0xA0	; 160
 1c4:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1 << CS00) | (1 << CS01); //Set pre-scaler to 64
 1c6:	85 b5       	in	r24, 0x25	; 37
 1c8:	83 60       	ori	r24, 0x03	; 3
 1ca:	85 bd       	out	0x25, r24	; 37
 1cc:	08 95       	ret

000001ce <select_motor_direction>:
  if (distance > OUT_OF_RANGE_HIGH) return DIS+1;
  else if (distance < OUT_OF_RANGE_LOW) return DIS-1;
  else return distance;
}

void select_motor_direction (unsigned char direction){
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
  setup_motors();
 1d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <setup_motors>
  switch (direction)
 1d6:	c2 30       	cpi	r28, 0x02	; 2
 1d8:	61 f1       	breq	.+88     	; 0x232 <select_motor_direction+0x64>
 1da:	28 f4       	brcc	.+10     	; 0x1e6 <select_motor_direction+0x18>
 1dc:	cc 23       	and	r28, r28
 1de:	49 f0       	breq	.+18     	; 0x1f2 <select_motor_direction+0x24>
 1e0:	c1 30       	cpi	r28, 0x01	; 1
 1e2:	b9 f0       	breq	.+46     	; 0x212 <select_motor_direction+0x44>
 1e4:	54 c0       	rjmp	.+168    	; 0x28e <select_motor_direction+0xc0>
 1e6:	c3 30       	cpi	r28, 0x03	; 3
 1e8:	a1 f1       	breq	.+104    	; 0x252 <select_motor_direction+0x84>
 1ea:	c4 30       	cpi	r28, 0x04	; 4
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <select_motor_direction+0x22>
 1ee:	41 c0       	rjmp	.+130    	; 0x272 <select_motor_direction+0xa4>
 1f0:	4e c0       	rjmp	.+156    	; 0x28e <select_motor_direction+0xc0>
  {
  case FORWARD:
    PORTD |= (1 << IN1);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8f 77       	andi	r24, 0x7F	; 127
 1fc:	8b b9       	out	0x0b, r24	; 11

    PORTB |= (1 << IN3);
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	81 60       	ori	r24, 0x01	; 1
 202:	85 b9       	out	0x05, r24	; 5
    PORTB &= (1 << IN4);
 204:	85 b1       	in	r24, 0x05	; 5
 206:	82 70       	andi	r24, 0x02	; 2
 208:	85 b9       	out	0x05, r24	; 5

		OCR0A = PWM; //ENB
 20a:	84 e6       	ldi	r24, 0x64	; 100
 20c:	87 bd       	out	0x27, r24	; 39
		OCR0B = PWM; //ENA
 20e:	88 bd       	out	0x28, r24	; 40

    break;
 210:	3e c0       	rjmp	.+124    	; 0x28e <select_motor_direction+0xc0>

  case BACKWARD:
    PORTD &= ~(1 << IN1);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	8f 7e       	andi	r24, 0xEF	; 239
 216:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1 << IN2);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	8b b9       	out	0x0b, r24	; 11

    PORTB &= ~(1 << IN3);
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	85 b9       	out	0x05, r24	; 5
    PORTB |= (1 << IN4);
 224:	85 b1       	in	r24, 0x05	; 5
 226:	82 60       	ori	r24, 0x02	; 2
 228:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWM; //ENB
 22a:	84 e6       	ldi	r24, 0x64	; 100
 22c:	87 bd       	out	0x27, r24	; 39
	OCR0B = PWM; //ENA
 22e:	88 bd       	out	0x28, r24	; 40

    break;
 230:	2e c0       	rjmp	.+92     	; 0x28e <select_motor_direction+0xc0>
  
  case LEFT:
    //Left goes backward
    PORTD &= ~(1 << IN1);
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1 << IN2);
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	8b b9       	out	0x0b, r24	; 11

    //Right goes forward
    PORTB |= (1 << IN3);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	81 60       	ori	r24, 0x01	; 1
 242:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
 244:	85 b1       	in	r24, 0x05	; 5
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWM; //ENB
 24a:	84 e6       	ldi	r24, 0x64	; 100
 24c:	87 bd       	out	0x27, r24	; 39
	OCR0B = PWM; //ENA
 24e:	88 bd       	out	0x28, r24	; 40

    break;
 250:	1e c0       	rjmp	.+60     	; 0x28e <select_motor_direction+0xc0>
  
  case RIGHT:
    //Left goes forward
    PORTD |= (1 << IN1);
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	80 61       	ori	r24, 0x10	; 16
 256:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	8f 77       	andi	r24, 0x7F	; 127
 25c:	8b b9       	out	0x0b, r24	; 11

    //Right goes backward
    PORTB &= ~(1 << IN3);
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	8e 7f       	andi	r24, 0xFE	; 254
 262:	85 b9       	out	0x05, r24	; 5
    PORTB |= (1 << IN4);
 264:	85 b1       	in	r24, 0x05	; 5
 266:	82 60       	ori	r24, 0x02	; 2
 268:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWM; //ENB
 26a:	84 e6       	ldi	r24, 0x64	; 100
 26c:	87 bd       	out	0x27, r24	; 39
	OCR0B = PWM; //ENA
 26e:	88 bd       	out	0x28, r24	; 40

  break;
 270:	0e c0       	rjmp	.+28     	; 0x28e <select_motor_direction+0xc0>
  
  case STOP:
    PORTD &= ~(1 << IN1);
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	8f 7e       	andi	r24, 0xEF	; 239
 276:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	8f 77       	andi	r24, 0x7F	; 127
 27c:	8b b9       	out	0x0b, r24	; 11

    PORTB &= ~(1 << IN3);
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	8e 7f       	andi	r24, 0xFE	; 254
 282:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
 284:	85 b1       	in	r24, 0x05	; 5
 286:	8d 7f       	andi	r24, 0xFD	; 253
 288:	85 b9       	out	0x05, r24	; 5

    OCR0A = 0; //ENB
 28a:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0; //ENA
 28c:	18 bc       	out	0x28, r1	; 40

    break;
  }
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <start_timer>:
    TIFR2 |= (1 << OCF2A);
  }
}

void start_timer (void){
	TCCR1A = 0;
 292:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12); // Set the Timer1 Mode to CTC
 296:	e1 e8       	ldi	r30, 0x81	; 129
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	80 83       	st	Z, r24
	OCR1A = 0x9F; //160 tick (0-159) to reach 10us
 2a0:	8f e9       	ldi	r24, 0x9F	; 159
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); //Set the ISR COMPA vect
 2ac:	af e6       	ldi	r26, 0x6F	; 111
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	8c 91       	ld	r24, X
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	8c 93       	st	X, r24
	sei();
 2b6:	78 94       	sei
	TCCR1B |= (1 << CS10); // set pre-scaler to 1 to reach us
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 83       	st	Z, r24
 2be:	08 95       	ret

000002c0 <__vector_11>:
}

ISR (TIMER1_COMPA_vect){
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
  ten_us_counter++;
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  if(ten_us_counter>65000) ten_us_counter = 0; //to avoid overflow of int
 2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	89 3e       	cpi	r24, 0xE9	; 233
 2ec:	9d 4f       	sbci	r25, 0xFD	; 253
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <__vector_11+0x38>
 2f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <stop_timer>:

void stop_timer (void){
  TCCR1B = 0; //stop interrupt
 308:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 30c:	08 95       	ret

0000030e <reset_prescaler>:
}

void reset_prescaler(void){
  TCCR2B &= ~((1 << CS20) | (1 << CS22));
 30e:	e1 eb       	ldi	r30, 0xB1	; 177
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	8a 7f       	andi	r24, 0xFA	; 250
 316:	80 83       	st	Z, r24
 318:	08 95       	ret

0000031a <delay_ms>:
  TCCR0A |= (1 << WGM00) | (1 << WGM00); //Enable Fast PWM mode on Timer0
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1); //Enable to put out PWM signal to D5 and D6 pins
  TCCR0B |= (1 << CS00) | (1 << CS01); //Set pre-scaler to 64
}

void delay_ms (unsigned int ms){
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
 320:	e0 eb       	ldi	r30, 0xB0	; 176
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	82 60       	ori	r24, 0x02	; 2
 328:	80 83       	st	Z, r24
  OCR2A = 0xF9; // count up to 256 ticks (0-255) to reach 1ms
 32a:	89 ef       	ldi	r24, 0xF9	; 249
 32c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  reset_prescaler();
 330:	0e 94 87 01 	call	0x30e	; 0x30e <reset_prescaler>
  TCCR2B |= (1 << CS22); // set pre-scaler to 64 and start the timer
 334:	e1 eb       	ldi	r30, 0xB1	; 177
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	80 83       	st	Z, r24
  for (int i=0; i < ms; i++){
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	07 c0       	rjmp	.+14     	; 0x352 <delay_ms+0x38>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
 344:	b9 9b       	sbis	0x17, 1	; 23
 346:	fe cf       	rjmp	.-4      	; 0x344 <delay_ms+0x2a>
    TIFR2 |= (1 << OCF2A);
 348:	87 b3       	in	r24, 0x17	; 23
 34a:	82 60       	ori	r24, 0x02	; 2
 34c:	87 bb       	out	0x17, r24	; 23
void delay_ms (unsigned int ms){
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
  OCR2A = 0xF9; // count up to 256 ticks (0-255) to reach 1ms
  reset_prescaler();
  TCCR2B |= (1 << CS22); // set pre-scaler to 64 and start the timer
  for (int i=0; i < ms; i++){
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	2c 17       	cp	r18, r28
 354:	3d 07       	cpc	r19, r29
 356:	b0 f3       	brcs	.-20     	; 0x344 <delay_ms+0x2a>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
    TIFR2 |= (1 << OCF2A);
  }
}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <delay_us>:

void delay_us (unsigned int us){
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
 364:	e0 eb       	ldi	r30, 0xB0	; 176
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	80 83       	st	Z, r24
  OCR2A = 0x0F; // count up to 16 ticks (0-15) to reach 1us
 36e:	8f e0       	ldi	r24, 0x0F	; 15
 370:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  reset_prescaler();
 374:	0e 94 87 01 	call	0x30e	; 0x30e <reset_prescaler>
  TCCR2B |= (1 << CS20); // set pre-scaler to 1 and start the timer
 378:	e1 eb       	ldi	r30, 0xB1	; 177
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	80 83       	st	Z, r24
  for (int i=0; i < us; i++){
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	07 c0       	rjmp	.+14     	; 0x396 <delay_us+0x38>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
 388:	b9 9b       	sbis	0x17, 1	; 23
 38a:	fe cf       	rjmp	.-4      	; 0x388 <delay_us+0x2a>
    TIFR2 |= (1 << OCF2A);
 38c:	87 b3       	in	r24, 0x17	; 23
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	87 bb       	out	0x17, r24	; 23
void delay_us (unsigned int us){
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
  OCR2A = 0x0F; // count up to 16 ticks (0-15) to reach 1us
  reset_prescaler();
  TCCR2B |= (1 << CS20); // set pre-scaler to 1 and start the timer
  for (int i=0; i < us; i++){
 392:	2f 5f       	subi	r18, 0xFF	; 255
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	2c 17       	cp	r18, r28
 398:	3d 07       	cpc	r19, r29
 39a:	b0 f3       	brcs	.-20     	; 0x388 <delay_us+0x2a>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
    TIFR2 |= (1 << OCF2A);
  }
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <ultrasound_sensor>:
void setup_motors (void);
void reset_prescaler(void);

volatile unsigned int ten_us_counter = 0;

unsigned int ultrasound_sensor (unsigned char sensor){
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	18 2f       	mov	r17, r24
  unsigned char Echo_Pin = sensor;
  unsigned char Trigger_Pin = sensor+2;
 3b4:	02 e0       	ldi	r16, 0x02	; 2
 3b6:	08 0f       	add	r16, r24
  unsigned int distance = 0, duration = 0, timer_LOW = 0, timer_HIGH = 0;
  start_timer();
 3b8:	0e 94 49 01 	call	0x292	; 0x292 <start_timer>
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	c1 e0       	ldi	r28, 0x01	; 1
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <ultrasound_sensor+0x26>
 3c4:	cc 0f       	add	r28, r28
 3c6:	dd 1f       	adc	r29, r29
 3c8:	0a 95       	dec	r16
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <ultrasound_sensor+0x22>
 3cc:	dc 2f       	mov	r29, r28
 3ce:	d0 95       	com	r29
 3d0:	8d 23       	and	r24, r29
 3d2:	85 b9       	out	0x05, r24	; 5
  delay_us(2);
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 af 01 	call	0x35e	; 0x35e <delay_us>
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
 3dc:	85 b1       	in	r24, 0x05	; 5
 3de:	c8 2b       	or	r28, r24
 3e0:	c5 b9       	out	0x05, r28	; 5
  delay_us(10);
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 af 01 	call	0x35e	; 0x35e <delay_us>
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	d8 23       	and	r29, r24
 3ee:	d5 b9       	out	0x05, r29	; 5
volatile unsigned int ten_us_counter = 0;

unsigned int ultrasound_sensor (unsigned char sensor){
  unsigned char Echo_Pin = sensor;
  unsigned char Trigger_Pin = sensor+2;
  unsigned int distance = 0, duration = 0, timer_LOW = 0, timer_HIGH = 0;
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
  delay_us(2);
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <ultrasound_sensor+0x5c>
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
 3f6:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3fa:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
  delay_us(2);
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
 3fe:	86 b1       	in	r24, 0x06	; 6
 400:	21 2f       	mov	r18, r17
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	01 2e       	mov	r0, r17
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	80 ff       	sbrs	r24, 0
 412:	f1 cf       	rjmp	.-30     	; 0x3f6 <ultrasound_sensor+0x54>
 414:	00 e0       	ldi	r16, 0x00	; 0
 416:	10 e0       	ldi	r17, 0x00	; 0
 418:	04 c0       	rjmp	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
  while (PINC & (1 << Echo_Pin)){
    timer_HIGH = ten_us_counter; } //Wait for the signal to finish (reach Falling edge)
 41a:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41e:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
  while (PINC & (1 << Echo_Pin)){
 422:	86 b1       	in	r24, 0x06	; 6
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 2e       	mov	r0, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	95 95       	asr	r25
 42c:	87 95       	ror	r24
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	80 fd       	sbrc	r24, 0
 434:	f2 cf       	rjmp	.-28     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
    timer_HIGH = ten_us_counter; } //Wait for the signal to finish (reach Falling edge)
  stop_timer();
 436:	0e 94 84 01 	call	0x308	; 0x308 <stop_timer>
  duration = timer_HIGH - timer_LOW;
 43a:	b8 01       	movw	r22, r16
 43c:	6c 1b       	sub	r22, r28
 43e:	7d 0b       	sbc	r23, r29
  ten_us_counter = 0;
 440:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 444:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  distance = duration * 0.34 / 2; // 340m/s -> 0.34 cm/10us because we measure distance every 10 microseconds
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 ae 02 	call	0x55c	; 0x55c <__floatunsisf>
 450:	2b e7       	ldi	r18, 0x7B	; 123
 452:	34 e1       	ldi	r19, 0x14	; 20
 454:	4e ea       	ldi	r20, 0xAE	; 174
 456:	5e e3       	ldi	r21, 0x3E	; 62
 458:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	5f e3       	ldi	r21, 0x3F	; 63
 464:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3>
 468:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fixunssfsi>
 46c:	6b 01       	movw	r12, r22
 46e:	7c 01       	movw	r14, r24
 470:	eb 01       	movw	r28, r22
  delay_ms(60); //Suggested by datasheet to wait 60ms to ultrasound signal interruption
 472:	8c e3       	ldi	r24, 0x3C	; 60
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 8d 01 	call	0x31a	; 0x31a <delay_ms>
  if (distance > OUT_OF_RANGE_HIGH) return DIS+1;
 47a:	81 e9       	ldi	r24, 0x91	; 145
 47c:	c8 16       	cp	r12, r24
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	d8 06       	cpc	r13, r24
 482:	28 f4       	brcc	.+10     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
  else if (distance < OUT_OF_RANGE_LOW) return DIS-1;
 484:	22 97       	sbiw	r28, 0x02	; 2
 486:	30 f4       	brcc	.+12     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 488:	88 e1       	ldi	r24, 0x18	; 24
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	04 c0       	rjmp	.+8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
  stop_timer();
  duration = timer_HIGH - timer_LOW;
  ten_us_counter = 0;
  distance = duration * 0.34 / 2; // 340m/s -> 0.34 cm/10us because we measure distance every 10 microseconds
  delay_ms(60); //Suggested by datasheet to wait 60ms to ultrasound signal interruption
  if (distance > OUT_OF_RANGE_HIGH) return DIS+1;
 48e:	8a e1       	ldi	r24, 0x1A	; 26
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	01 c0       	rjmp	.+2      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
  else if (distance < OUT_OF_RANGE_LOW) return DIS-1;
  else return distance;
 494:	c6 01       	movw	r24, r12
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	df 90       	pop	r13
 4a4:	cf 90       	pop	r12
 4a6:	08 95       	ret

000004a8 <set_pins>:
  TCCR2B &= ~((1 << CS20) | (1 << CS22));
  }

void set_pins (void){
  //Setting Echo pins
  DDRC &= ~(1 << U_FRONT); //A0 set as input
 4a8:	87 b1       	in	r24, 0x07	; 7
 4aa:	8e 7f       	andi	r24, 0xFE	; 254
 4ac:	87 b9       	out	0x07, r24	; 7
  DDRC &= ~(1 << U_LEFT); //A1 set as input
 4ae:	87 b1       	in	r24, 0x07	; 7
 4b0:	8d 7f       	andi	r24, 0xFD	; 253
 4b2:	87 b9       	out	0x07, r24	; 7
  DDRC &= ~(1 << U_RIGHT); // A2 set as input
 4b4:	87 b1       	in	r24, 0x07	; 7
 4b6:	8b 7f       	andi	r24, 0xFB	; 251
 4b8:	87 b9       	out	0x07, r24	; 7

  //Setting Trigger pins
  DDRB |= (1 << (U_FRONT+2)); //D10 set as output
 4ba:	84 b1       	in	r24, 0x04	; 4
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << (U_LEFT+2)); //D11 set as output
 4c0:	84 b1       	in	r24, 0x04	; 4
 4c2:	88 60       	ori	r24, 0x08	; 8
 4c4:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << (U_RIGHT+2)); //D12 set as output
 4c6:	84 b1       	in	r24, 0x04	; 4
 4c8:	80 61       	ori	r24, 0x10	; 16
 4ca:	84 b9       	out	0x04, r24	; 4

  //Setting Optocoupler PINS
  DDRD &= ~(1 << O_LEFT); //D2 set as input
 4cc:	8a b1       	in	r24, 0x0a	; 10
 4ce:	8b 7f       	andi	r24, 0xFB	; 251
 4d0:	8a b9       	out	0x0a, r24	; 10
  DDRD &= ~(1 << O_RIGHT); //D3 set as input
 4d2:	8a b1       	in	r24, 0x0a	; 10
 4d4:	87 7f       	andi	r24, 0xF7	; 247
 4d6:	8a b9       	out	0x0a, r24	; 10

  //Setting motor pins
  DDRD |= (1 << IN1); //D4 set as output
 4d8:	8a b1       	in	r24, 0x0a	; 10
 4da:	80 61       	ori	r24, 0x10	; 16
 4dc:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << IN2); //D7 set as output
 4de:	8a b1       	in	r24, 0x0a	; 10
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	8a b9       	out	0x0a, r24	; 10
  DDRB |= (1 << IN3); //D8 set as output
 4e4:	84 b1       	in	r24, 0x04	; 4
 4e6:	81 60       	ori	r24, 0x01	; 1
 4e8:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << IN4); //D9 set as output
 4ea:	84 b1       	in	r24, 0x04	; 4
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	84 b9       	out	0x04, r24	; 4
  DDRD |= (1 << ENA); //D5 set as output
 4f0:	8a b1       	in	r24, 0x0a	; 10
 4f2:	80 62       	ori	r24, 0x20	; 32
 4f4:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << ENB); //D6 set as output
 4f6:	8a b1       	in	r24, 0x0a	; 10
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	8a b9       	out	0x0a, r24	; 10
 4fc:	08 95       	ret

000004fe <__fixunssfsi>:
 4fe:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_splitA>
 502:	88 f0       	brcs	.+34     	; 0x526 <__fixunssfsi+0x28>
 504:	9f 57       	subi	r25, 0x7F	; 127
 506:	98 f0       	brcs	.+38     	; 0x52e <__fixunssfsi+0x30>
 508:	b9 2f       	mov	r27, r25
 50a:	99 27       	eor	r25, r25
 50c:	b7 51       	subi	r27, 0x17	; 23
 50e:	b0 f0       	brcs	.+44     	; 0x53c <__fixunssfsi+0x3e>
 510:	e1 f0       	breq	.+56     	; 0x54a <__fixunssfsi+0x4c>
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	1a f0       	brmi	.+6      	; 0x522 <__fixunssfsi+0x24>
 51c:	ba 95       	dec	r27
 51e:	c9 f7       	brne	.-14     	; 0x512 <__fixunssfsi+0x14>
 520:	14 c0       	rjmp	.+40     	; 0x54a <__fixunssfsi+0x4c>
 522:	b1 30       	cpi	r27, 0x01	; 1
 524:	91 f0       	breq	.+36     	; 0x54a <__fixunssfsi+0x4c>
 526:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_zero>
 52a:	b1 e0       	ldi	r27, 0x01	; 1
 52c:	08 95       	ret
 52e:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_zero>
 532:	67 2f       	mov	r22, r23
 534:	78 2f       	mov	r23, r24
 536:	88 27       	eor	r24, r24
 538:	b8 5f       	subi	r27, 0xF8	; 248
 53a:	39 f0       	breq	.+14     	; 0x54a <__fixunssfsi+0x4c>
 53c:	b9 3f       	cpi	r27, 0xF9	; 249
 53e:	cc f3       	brlt	.-14     	; 0x532 <__fixunssfsi+0x34>
 540:	86 95       	lsr	r24
 542:	77 95       	ror	r23
 544:	67 95       	ror	r22
 546:	b3 95       	inc	r27
 548:	d9 f7       	brne	.-10     	; 0x540 <__fixunssfsi+0x42>
 54a:	3e f4       	brtc	.+14     	; 0x55a <__fixunssfsi+0x5c>
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__floatunsisf>:
 55c:	e8 94       	clt
 55e:	09 c0       	rjmp	.+18     	; 0x572 <__floatsisf+0x12>

00000560 <__floatsisf>:
 560:	97 fb       	bst	r25, 7
 562:	3e f4       	brtc	.+14     	; 0x572 <__floatsisf+0x12>
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	99 23       	and	r25, r25
 574:	a9 f0       	breq	.+42     	; 0x5a0 <__floatsisf+0x40>
 576:	f9 2f       	mov	r31, r25
 578:	96 e9       	ldi	r25, 0x96	; 150
 57a:	bb 27       	eor	r27, r27
 57c:	93 95       	inc	r25
 57e:	f6 95       	lsr	r31
 580:	87 95       	ror	r24
 582:	77 95       	ror	r23
 584:	67 95       	ror	r22
 586:	b7 95       	ror	r27
 588:	f1 11       	cpse	r31, r1
 58a:	f8 cf       	rjmp	.-16     	; 0x57c <__floatsisf+0x1c>
 58c:	fa f4       	brpl	.+62     	; 0x5cc <__floatsisf+0x6c>
 58e:	bb 0f       	add	r27, r27
 590:	11 f4       	brne	.+4      	; 0x596 <__floatsisf+0x36>
 592:	60 ff       	sbrs	r22, 0
 594:	1b c0       	rjmp	.+54     	; 0x5cc <__floatsisf+0x6c>
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <__floatsisf+0x6c>
 5a0:	88 23       	and	r24, r24
 5a2:	11 f0       	breq	.+4      	; 0x5a8 <__floatsisf+0x48>
 5a4:	96 e9       	ldi	r25, 0x96	; 150
 5a6:	11 c0       	rjmp	.+34     	; 0x5ca <__floatsisf+0x6a>
 5a8:	77 23       	and	r23, r23
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <__floatsisf+0x54>
 5ac:	9e e8       	ldi	r25, 0x8E	; 142
 5ae:	87 2f       	mov	r24, r23
 5b0:	76 2f       	mov	r23, r22
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__floatsisf+0x5e>
 5b4:	66 23       	and	r22, r22
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__floatsisf+0x74>
 5b8:	96 e8       	ldi	r25, 0x86	; 134
 5ba:	86 2f       	mov	r24, r22
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	2a f0       	brmi	.+10     	; 0x5cc <__floatsisf+0x6c>
 5c2:	9a 95       	dec	r25
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	da f7       	brpl	.-10     	; 0x5c2 <__floatsisf+0x62>
 5cc:	88 0f       	add	r24, r24
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	97 f9       	bld	r25, 7
 5d4:	08 95       	ret

000005d6 <__fp_split3>:
 5d6:	57 fd       	sbrc	r21, 7
 5d8:	90 58       	subi	r25, 0x80	; 128
 5da:	44 0f       	add	r20, r20
 5dc:	55 1f       	adc	r21, r21
 5de:	59 f0       	breq	.+22     	; 0x5f6 <__fp_splitA+0x10>
 5e0:	5f 3f       	cpi	r21, 0xFF	; 255
 5e2:	71 f0       	breq	.+28     	; 0x600 <__fp_splitA+0x1a>
 5e4:	47 95       	ror	r20

000005e6 <__fp_splitA>:
 5e6:	88 0f       	add	r24, r24
 5e8:	97 fb       	bst	r25, 7
 5ea:	99 1f       	adc	r25, r25
 5ec:	61 f0       	breq	.+24     	; 0x606 <__fp_splitA+0x20>
 5ee:	9f 3f       	cpi	r25, 0xFF	; 255
 5f0:	79 f0       	breq	.+30     	; 0x610 <__fp_splitA+0x2a>
 5f2:	87 95       	ror	r24
 5f4:	08 95       	ret
 5f6:	12 16       	cp	r1, r18
 5f8:	13 06       	cpc	r1, r19
 5fa:	14 06       	cpc	r1, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	f2 cf       	rjmp	.-28     	; 0x5e4 <__fp_split3+0xe>
 600:	46 95       	lsr	r20
 602:	f1 df       	rcall	.-30     	; 0x5e6 <__fp_splitA>
 604:	08 c0       	rjmp	.+16     	; 0x616 <__fp_splitA+0x30>
 606:	16 16       	cp	r1, r22
 608:	17 06       	cpc	r1, r23
 60a:	18 06       	cpc	r1, r24
 60c:	99 1f       	adc	r25, r25
 60e:	f1 cf       	rjmp	.-30     	; 0x5f2 <__fp_splitA+0xc>
 610:	86 95       	lsr	r24
 612:	71 05       	cpc	r23, r1
 614:	61 05       	cpc	r22, r1
 616:	08 94       	sec
 618:	08 95       	ret

0000061a <__fp_zero>:
 61a:	e8 94       	clt

0000061c <__fp_szero>:
 61c:	bb 27       	eor	r27, r27
 61e:	66 27       	eor	r22, r22
 620:	77 27       	eor	r23, r23
 622:	cb 01       	movw	r24, r22
 624:	97 f9       	bld	r25, 7
 626:	08 95       	ret

00000628 <__mulsf3>:
 628:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3x>
 62c:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_round>
 630:	0e 94 8a 03 	call	0x714	; 0x714 <__fp_pscA>
 634:	38 f0       	brcs	.+14     	; 0x644 <__mulsf3+0x1c>
 636:	0e 94 91 03 	call	0x722	; 0x722 <__fp_pscB>
 63a:	20 f0       	brcs	.+8      	; 0x644 <__mulsf3+0x1c>
 63c:	95 23       	and	r25, r21
 63e:	11 f0       	breq	.+4      	; 0x644 <__mulsf3+0x1c>
 640:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_inf>
 644:	0c 94 87 03 	jmp	0x70e	; 0x70e <__fp_nan>
 648:	11 24       	eor	r1, r1
 64a:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_szero>

0000064e <__mulsf3x>:
 64e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_split3>
 652:	70 f3       	brcs	.-36     	; 0x630 <__mulsf3+0x8>

00000654 <__mulsf3_pse>:
 654:	95 9f       	mul	r25, r21
 656:	c1 f3       	breq	.-16     	; 0x648 <__mulsf3+0x20>
 658:	95 0f       	add	r25, r21
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	55 1f       	adc	r21, r21
 65e:	62 9f       	mul	r22, r18
 660:	f0 01       	movw	r30, r0
 662:	72 9f       	mul	r23, r18
 664:	bb 27       	eor	r27, r27
 666:	f0 0d       	add	r31, r0
 668:	b1 1d       	adc	r27, r1
 66a:	63 9f       	mul	r22, r19
 66c:	aa 27       	eor	r26, r26
 66e:	f0 0d       	add	r31, r0
 670:	b1 1d       	adc	r27, r1
 672:	aa 1f       	adc	r26, r26
 674:	64 9f       	mul	r22, r20
 676:	66 27       	eor	r22, r22
 678:	b0 0d       	add	r27, r0
 67a:	a1 1d       	adc	r26, r1
 67c:	66 1f       	adc	r22, r22
 67e:	82 9f       	mul	r24, r18
 680:	22 27       	eor	r18, r18
 682:	b0 0d       	add	r27, r0
 684:	a1 1d       	adc	r26, r1
 686:	62 1f       	adc	r22, r18
 688:	73 9f       	mul	r23, r19
 68a:	b0 0d       	add	r27, r0
 68c:	a1 1d       	adc	r26, r1
 68e:	62 1f       	adc	r22, r18
 690:	83 9f       	mul	r24, r19
 692:	a0 0d       	add	r26, r0
 694:	61 1d       	adc	r22, r1
 696:	22 1f       	adc	r18, r18
 698:	74 9f       	mul	r23, r20
 69a:	33 27       	eor	r19, r19
 69c:	a0 0d       	add	r26, r0
 69e:	61 1d       	adc	r22, r1
 6a0:	23 1f       	adc	r18, r19
 6a2:	84 9f       	mul	r24, r20
 6a4:	60 0d       	add	r22, r0
 6a6:	21 1d       	adc	r18, r1
 6a8:	82 2f       	mov	r24, r18
 6aa:	76 2f       	mov	r23, r22
 6ac:	6a 2f       	mov	r22, r26
 6ae:	11 24       	eor	r1, r1
 6b0:	9f 57       	subi	r25, 0x7F	; 127
 6b2:	50 40       	sbci	r21, 0x00	; 0
 6b4:	9a f0       	brmi	.+38     	; 0x6dc <__mulsf3_pse+0x88>
 6b6:	f1 f0       	breq	.+60     	; 0x6f4 <__mulsf3_pse+0xa0>
 6b8:	88 23       	and	r24, r24
 6ba:	4a f0       	brmi	.+18     	; 0x6ce <__mulsf3_pse+0x7a>
 6bc:	ee 0f       	add	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	bb 1f       	adc	r27, r27
 6c2:	66 1f       	adc	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	91 50       	subi	r25, 0x01	; 1
 6ca:	50 40       	sbci	r21, 0x00	; 0
 6cc:	a9 f7       	brne	.-22     	; 0x6b8 <__mulsf3_pse+0x64>
 6ce:	9e 3f       	cpi	r25, 0xFE	; 254
 6d0:	51 05       	cpc	r21, r1
 6d2:	80 f0       	brcs	.+32     	; 0x6f4 <__mulsf3_pse+0xa0>
 6d4:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_inf>
 6d8:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_szero>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	e4 f3       	brlt	.-8      	; 0x6d8 <__mulsf3_pse+0x84>
 6e0:	98 3e       	cpi	r25, 0xE8	; 232
 6e2:	d4 f3       	brlt	.-12     	; 0x6d8 <__mulsf3_pse+0x84>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f7 95       	ror	r31
 6ee:	e7 95       	ror	r30
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	c1 f7       	brne	.-16     	; 0x6e4 <__mulsf3_pse+0x90>
 6f4:	fe 2b       	or	r31, r30
 6f6:	88 0f       	add	r24, r24
 6f8:	91 1d       	adc	r25, r1
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_inf>:
 702:	97 f9       	bld	r25, 7
 704:	9f 67       	ori	r25, 0x7F	; 127
 706:	80 e8       	ldi	r24, 0x80	; 128
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	08 95       	ret

0000070e <__fp_nan>:
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	80 ec       	ldi	r24, 0xC0	; 192
 712:	08 95       	ret

00000714 <__fp_pscA>:
 714:	00 24       	eor	r0, r0
 716:	0a 94       	dec	r0
 718:	16 16       	cp	r1, r22
 71a:	17 06       	cpc	r1, r23
 71c:	18 06       	cpc	r1, r24
 71e:	09 06       	cpc	r0, r25
 720:	08 95       	ret

00000722 <__fp_pscB>:
 722:	00 24       	eor	r0, r0
 724:	0a 94       	dec	r0
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	14 06       	cpc	r1, r20
 72c:	05 06       	cpc	r0, r21
 72e:	08 95       	ret

00000730 <__fp_round>:
 730:	09 2e       	mov	r0, r25
 732:	03 94       	inc	r0
 734:	00 0c       	add	r0, r0
 736:	11 f4       	brne	.+4      	; 0x73c <__fp_round+0xc>
 738:	88 23       	and	r24, r24
 73a:	52 f0       	brmi	.+20     	; 0x750 <__fp_round+0x20>
 73c:	bb 0f       	add	r27, r27
 73e:	40 f4       	brcc	.+16     	; 0x750 <__fp_round+0x20>
 740:	bf 2b       	or	r27, r31
 742:	11 f4       	brne	.+4      	; 0x748 <__fp_round+0x18>
 744:	60 ff       	sbrs	r22, 0
 746:	04 c0       	rjmp	.+8      	; 0x750 <__fp_round+0x20>
 748:	6f 5f       	subi	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
