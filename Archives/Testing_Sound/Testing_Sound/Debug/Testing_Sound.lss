
Testing_Sound.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000d70  00000e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080014c  0080014c  00000e50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c80  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000900  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e3  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d4  00000000  00000000  0000328f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 35       	cpi	r26, 0x5A	; 90
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "usart.h"


int main(void)
{
	uart_init();
  a6:	0e 94 92 02 	call	0x524	; 0x524 <uart_init>
	io_redirect();
  aa:	0e 94 a3 02 	call	0x546	; 0x546 <io_redirect>
	unsigned int Sensor1, Sensor2, Sensor3;
    /* Replace with your application code */
    while (1) 
    {
		Sensor1=ultra_sound_sensor(1);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ultra_sound_sensor>
		printf("Sensor1: %d cm\n", Sensor1);
  b6:	9f 93       	push	r25
  b8:	8f 93       	push	r24
  ba:	8c e1       	ldi	r24, 0x1C	; 28
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	9f 93       	push	r25
  c0:	8f 93       	push	r24
  c2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x26>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x30>
  d6:	00 00       	nop
		_delay_ms(1000);
		Sensor2=ultra_sound_sensor(2);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ultra_sound_sensor>
		printf("Sensor2: %d cm\n", Sensor2);
  e0:	9f 93       	push	r25
  e2:	8f 93       	push	r24
  e4:	8c e2       	ldi	r24, 0x2C	; 44
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <printf>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	83 ed       	ldi	r24, 0xD3	; 211
  f4:	90 e3       	ldi	r25, 0x30	; 48
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x50>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x5a>
 100:	00 00       	nop
		_delay_ms(1000);
		Sensor3=ultra_sound_sensor(3);
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ultra_sound_sensor>
		printf("Sensor3: %d cm\n", Sensor3);
 10a:	9f 93       	push	r25
 10c:	8f 93       	push	r24
 10e:	8c e3       	ldi	r24, 0x3C	; 60
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	9f 93       	push	r25
 114:	8f 93       	push	r24
 116:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <printf>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	83 ed       	ldi	r24, 0xD3	; 211
 11e:	90 e3       	ldi	r25, 0x30	; 48
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x7a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x84>
 12a:	00 00       	nop
 12c:	8d b7       	in	r24, 0x3d	; 61
 12e:	9e b7       	in	r25, 0x3e	; 62
 130:	0c 96       	adiw	r24, 0x0c	; 12
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	9e bf       	out	0x3e, r25	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	8d bf       	out	0x3d, r24	; 61
 13c:	b8 cf       	rjmp	.-144    	; 0xae <main+0x8>

0000013e <reset_prescaler>:
			disable_interrupt();
		}
	}
}
void reset_prescaler(void){
	TCCR0B &= ~((1<<CS00) | (1<<CS01));
 13e:	85 b5       	in	r24, 0x25	; 37
 140:	8c 7f       	andi	r24, 0xFC	; 252
 142:	85 bd       	out	0x25, r24	; 37
 144:	08 95       	ret

00000146 <delay_ms>:
		delay_ms(60);
	}
	return distance;
	
}
void delay_ms(unsigned int milliseconds){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
	// Set the value that you want to count to
	OCR0A = 0xF9;
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	87 bd       	out	0x27, r24	; 39
	// start the timer
	reset_prescaler();
 156:	0e 94 9f 00 	call	0x13e	; 0x13e <reset_prescaler>
	//resetting pins
	TCCR0B |= (1 << CS01) | (1 << CS00);// set pre-scaler to 64 and start the timer
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	85 bd       	out	0x25, r24	; 37
	for (int i=0; i<milliseconds; i++)
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	05 c0       	rjmp	.+10     	; 0x170 <delay_ms+0x2a>
	{
		while ( (TIFR0 & (1 << OCF0A) ) == 0) // wait for the overflow event
 166:	a9 9b       	sbis	0x15, 1	; 21
 168:	fe cf       	rjmp	.-4      	; 0x166 <delay_ms+0x20>
		{
		}
		// reset the overflow flag
		TIFR0 = (1 << OCF0A);
 16a:	22 e0       	ldi	r18, 0x02	; 2
 16c:	25 bb       	out	0x15, r18	; 21
	OCR0A = 0xF9;
	// start the timer
	reset_prescaler();
	//resetting pins
	TCCR0B |= (1 << CS01) | (1 << CS00);// set pre-scaler to 64 and start the timer
	for (int i=0; i<milliseconds; i++)
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	8c 17       	cp	r24, r28
 172:	9d 07       	cpc	r25, r29
 174:	c0 f3       	brcs	.-16     	; 0x166 <delay_ms+0x20>
		{
		}
		// reset the overflow flag
		TIFR0 = (1 << OCF0A);
	}
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <delay_us>:
void delay_us(unsigned int microseconds){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
 182:	84 b5       	in	r24, 0x24	; 36
 184:	82 60       	ori	r24, 0x02	; 2
 186:	84 bd       	out	0x24, r24	; 36
	// Set the value that you want to count to
	OCR0A = 0x0F;
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	87 bd       	out	0x27, r24	; 39
	// start the timer
	reset_prescaler();
 18c:	0e 94 9f 00 	call	0x13e	; 0x13e <reset_prescaler>
	TCCR0B |= (1 << CS00);// set pre-scaler to 1 and start the timer
 190:	85 b5       	in	r24, 0x25	; 37
 192:	81 60       	ori	r24, 0x01	; 1
 194:	85 bd       	out	0x25, r24	; 37
	for (int i=0; i<microseconds; i++)
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <delay_us+0x2a>
	{
		while ( (TIFR0 & (1 << OCF0A) ) == 0) // wait for the overflow event
 19c:	a9 9b       	sbis	0x15, 1	; 21
 19e:	fe cf       	rjmp	.-4      	; 0x19c <delay_us+0x20>
		{
		}
		// reset the overflow flag
		TIFR0 = (1 << OCF0A);
 1a0:	22 e0       	ldi	r18, 0x02	; 2
 1a2:	25 bb       	out	0x15, r18	; 21
	// Set the value that you want to count to
	OCR0A = 0x0F;
	// start the timer
	reset_prescaler();
	TCCR0B |= (1 << CS00);// set pre-scaler to 1 and start the timer
	for (int i=0; i<microseconds; i++)
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	8c 17       	cp	r24, r28
 1a8:	9d 07       	cpc	r25, r29
 1aa:	c0 f3       	brcs	.-16     	; 0x19c <delay_us+0x20>
		{
		}
		// reset the overflow flag
		TIFR0 = (1 << OCF0A);
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <init_getEcho>:
void init_getEcho (void){
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
 1b2:	84 b5       	in	r24, 0x24	; 36
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	84 bd       	out	0x24, r24	; 36
	// Set the value that you want to count to
	OCR0A = 0x5F;// 0-159 (160 timer ticks)
 1b8:	8f e5       	ldi	r24, 0x5F	; 95
 1ba:	87 bd       	out	0x27, r24	; 39
	//Start the timer
	TIMSK0 |= (1 << OCIE0A); //Set the ISR COMPA vect
 1bc:	ee e6       	ldi	r30, 0x6E	; 110
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	80 83       	st	Z, r24
	sei(); //enable interrupts;
 1c6:	78 94       	sei
	reset_prescaler(); //resetting pins
 1c8:	0e 94 9f 00 	call	0x13e	; 0x13e <reset_prescaler>
	TCCR0B |= (1 << CS00);// set pre-scaler to 1 and start the timer
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 bd       	out	0x25, r24	; 37
 1d2:	08 95       	ret

000001d4 <ultra_sound_sensor>:
void reset_prescaler(void);
void disable_interrupt(void);

volatile unsigned long us_counter=0, total_time=0;

unsigned int ultra_sound_sensor(unsigned int sensor){
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	unsigned int distance;
	if (sensor == 1)
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <ultra_sound_sensor+0x10>
 1e2:	5c c0       	rjmp	.+184    	; 0x29c <ultra_sound_sensor+0xc8>
	{
		DDRD &= ~(1<<DDD2); // Set PINB0 to input -> Echo
 1e4:	8a b1       	in	r24, 0x0a	; 10
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	8a b9       	out	0x0a, r24	; 10
		DDRD |= (1<<DDD3); // Set PIND2 to output -> Trigger
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	8a b9       	out	0x0a, r24	; 10
		PORTD &= ~(1<<PORTD3);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	87 7f       	andi	r24, 0xF7	; 247
 1f4:	8b b9       	out	0x0b, r24	; 11
		delay_us(2);
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 be 00 	call	0x17c	; 0x17c <delay_us>
		PORTD |= (1<<PORTD3);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	88 60       	ori	r24, 0x08	; 8
 202:	8b b9       	out	0x0b, r24	; 11
		delay_us(10);
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 be 00 	call	0x17c	; 0x17c <delay_us>
		PORTD &= ~(1<< PORTD3);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	87 7f       	andi	r24, 0xF7	; 247
 210:	8b b9       	out	0x0b, r24	; 11
		init_getEcho();
 212:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init_getEcho>
		while (total_time == 0)
 216:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 21a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 21e:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end+0x2>
 222:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <__data_end+0x3>
 226:	89 2b       	or	r24, r25
 228:	8a 2b       	or	r24, r26
 22a:	8b 2b       	or	r24, r27
 22c:	a1 f3       	breq	.-24     	; 0x216 <ultra_sound_sensor+0x42>
		{
				//wait until we not measured the HIGH state
		}
		distance = (total_time * 6) * 0.034 /2;
 22e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 232:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 236:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end+0x2>
 23a:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <__data_end+0x3>
 23e:	ac 01       	movw	r20, r24
 240:	bd 01       	movw	r22, r26
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	66 1f       	adc	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	8a 01       	movw	r16, r20
 24c:	9b 01       	movw	r18, r22
 24e:	08 0f       	add	r16, r24
 250:	19 1f       	adc	r17, r25
 252:	2a 1f       	adc	r18, r26
 254:	3b 1f       	adc	r19, r27
 256:	c9 01       	movw	r24, r18
 258:	b8 01       	movw	r22, r16
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
 266:	26 e9       	ldi	r18, 0x96	; 150
 268:	33 e4       	ldi	r19, 0x43	; 67
 26a:	4b e0       	ldi	r20, 0x0B	; 11
 26c:	5d e3       	ldi	r21, 0x3D	; 61
 26e:	0e 94 43 03 	call	0x686	; 0x686 <__mulsf3>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	5f e3       	ldi	r21, 0x3F	; 63
 27a:	0e 94 43 03 	call	0x686	; 0x686 <__mulsf3>
 27e:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
 282:	8b 01       	movw	r16, r22
		total_time = 0;
 284:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
 288:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x1>
 28c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end+0x2>
 290:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__data_end+0x3>
		delay_ms(60);
 294:	8c e3       	ldi	r24, 0x3C	; 60
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	}
	if (sensor == 2)
 29c:	c2 30       	cpi	r28, 0x02	; 2
 29e:	d1 05       	cpc	r29, r1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <ultra_sound_sensor+0xd0>
 2a2:	5c c0       	rjmp	.+184    	; 0x35c <ultra_sound_sensor+0x188>
	{
		DDRD &= ~(1<<DDD4); // Set PINB0 to input -> Echo
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	8a b9       	out	0x0a, r24	; 10
		DDRD |= (1<<DDD5); // Set PIND2 to output -> Trigger
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	80 62       	ori	r24, 0x20	; 32
 2ae:	8a b9       	out	0x0a, r24	; 10
		PORTD &= ~(1<<PORTD5);
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	8f 7d       	andi	r24, 0xDF	; 223
 2b4:	8b b9       	out	0x0b, r24	; 11
		delay_us(2);
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 be 00 	call	0x17c	; 0x17c <delay_us>
		PORTD |= (1<<PORTD5);
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	80 62       	ori	r24, 0x20	; 32
 2c2:	8b b9       	out	0x0b, r24	; 11
		delay_us(10);
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 be 00 	call	0x17c	; 0x17c <delay_us>
		PORTD &= ~(1<< PORTD5);
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	8f 7d       	andi	r24, 0xDF	; 223
 2d0:	8b b9       	out	0x0b, r24	; 11
		init_getEcho();
 2d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init_getEcho>
		while (total_time == 0)
 2d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 2da:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 2de:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end+0x2>
 2e2:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <__data_end+0x3>
 2e6:	89 2b       	or	r24, r25
 2e8:	8a 2b       	or	r24, r26
 2ea:	8b 2b       	or	r24, r27
 2ec:	a1 f3       	breq	.-24     	; 0x2d6 <ultra_sound_sensor+0x102>
		{
			//wait until we not measured the HIGH state
		}
		distance = (total_time * 6) * 0.034 /2;
 2ee:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 2f2:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 2f6:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end+0x2>
 2fa:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <__data_end+0x3>
 2fe:	ac 01       	movw	r20, r24
 300:	bd 01       	movw	r22, r26
 302:	44 0f       	add	r20, r20
 304:	55 1f       	adc	r21, r21
 306:	66 1f       	adc	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	8a 01       	movw	r16, r20
 30c:	9b 01       	movw	r18, r22
 30e:	08 0f       	add	r16, r24
 310:	19 1f       	adc	r17, r25
 312:	2a 1f       	adc	r18, r26
 314:	3b 1f       	adc	r19, r27
 316:	c9 01       	movw	r24, r18
 318:	b8 01       	movw	r22, r16
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	88 1f       	adc	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
 326:	26 e9       	ldi	r18, 0x96	; 150
 328:	33 e4       	ldi	r19, 0x43	; 67
 32a:	4b e0       	ldi	r20, 0x0B	; 11
 32c:	5d e3       	ldi	r21, 0x3D	; 61
 32e:	0e 94 43 03 	call	0x686	; 0x686 <__mulsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	5f e3       	ldi	r21, 0x3F	; 63
 33a:	0e 94 43 03 	call	0x686	; 0x686 <__mulsf3>
 33e:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
 342:	8b 01       	movw	r16, r22
		total_time = 0;
 344:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
 348:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x1>
 34c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end+0x2>
 350:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__data_end+0x3>
		delay_ms(60);
 354:	8c e3       	ldi	r24, 0x3C	; 60
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	}
	if (sensor == 3)
 35c:	23 97       	sbiw	r28, 0x03	; 3
 35e:	09 f0       	breq	.+2      	; 0x362 <ultra_sound_sensor+0x18e>
 360:	5c c0       	rjmp	.+184    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		DDRD &= ~(1<<DDD6); // Set PINB0 to input -> Echo
 362:	8a b1       	in	r24, 0x0a	; 10
 364:	8f 7b       	andi	r24, 0xBF	; 191
 366:	8a b9       	out	0x0a, r24	; 10
		DDRD |= (1<<DDD7); // Set PIND2 to output -> Trigger
 368:	8a b1       	in	r24, 0x0a	; 10
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	8a b9       	out	0x0a, r24	; 10
		PORTD &= ~(1<<PORTD7);
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	8f 77       	andi	r24, 0x7F	; 127
 372:	8b b9       	out	0x0b, r24	; 11
		delay_us(2);
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 be 00 	call	0x17c	; 0x17c <delay_us>
		PORTD |= (1<<PORTD7);
 37c:	8b b1       	in	r24, 0x0b	; 11
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	8b b9       	out	0x0b, r24	; 11
		delay_us(10);
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 be 00 	call	0x17c	; 0x17c <delay_us>
		PORTD &= ~(1<< PORTD7);
 38a:	8b b1       	in	r24, 0x0b	; 11
 38c:	8f 77       	andi	r24, 0x7F	; 127
 38e:	8b b9       	out	0x0b, r24	; 11
		init_getEcho();
 390:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init_getEcho>
		while (total_time == 0)
 394:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 398:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 39c:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end+0x2>
 3a0:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <__data_end+0x3>
 3a4:	89 2b       	or	r24, r25
 3a6:	8a 2b       	or	r24, r26
 3a8:	8b 2b       	or	r24, r27
 3aa:	a1 f3       	breq	.-24     	; 0x394 <ultra_sound_sensor+0x1c0>
		{
			//wait until we not measured the HIGH state
		}
		distance = (total_time * 6) * 0.034 /2;
 3ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 3b0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 3b4:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <__data_end+0x2>
 3b8:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <__data_end+0x3>
 3bc:	ac 01       	movw	r20, r24
 3be:	bd 01       	movw	r22, r26
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	66 1f       	adc	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	8a 01       	movw	r16, r20
 3ca:	9b 01       	movw	r18, r22
 3cc:	08 0f       	add	r16, r24
 3ce:	19 1f       	adc	r17, r25
 3d0:	2a 1f       	adc	r18, r26
 3d2:	3b 1f       	adc	r19, r27
 3d4:	c9 01       	movw	r24, r18
 3d6:	b8 01       	movw	r22, r16
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
 3e4:	26 e9       	ldi	r18, 0x96	; 150
 3e6:	33 e4       	ldi	r19, 0x43	; 67
 3e8:	4b e0       	ldi	r20, 0x0B	; 11
 3ea:	5d e3       	ldi	r21, 0x3D	; 61
 3ec:	0e 94 43 03 	call	0x686	; 0x686 <__mulsf3>
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	5f e3       	ldi	r21, 0x3F	; 63
 3f8:	0e 94 43 03 	call	0x686	; 0x686 <__mulsf3>
 3fc:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
 400:	8b 01       	movw	r16, r22
		total_time = 0;
 402:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <__data_end>
 406:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__data_end+0x1>
 40a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end+0x2>
 40e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__data_end+0x3>
		delay_ms(60);
 412:	8c e3       	ldi	r24, 0x3C	; 60
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 a3 00 	call	0x146	; 0x146 <delay_ms>
	}
	return distance;
	
}
 41a:	c8 01       	movw	r24, r16
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <disable_interrupt>:
}
void reset_prescaler(void){
	TCCR0B &= ~((1<<CS00) | (1<<CS01));
}
void disable_interrupt(void){
	TCCR0B = 0;
 426:	15 bc       	out	0x25, r1	; 37
 428:	08 95       	ret

0000042a <__vector_14>:
	TIMSK0 |= (1 << OCIE0A); //Set the ISR COMPA vect
	sei(); //enable interrupts;
	reset_prescaler(); //resetting pins
	TCCR0B |= (1 << CS00);// set pre-scaler to 1 and start the timer
}
ISR (TIMER0_COMPA_vect) {
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	if (PIND & (1<<PIND2) | PIND & (1<<PIND4) | PIND & (1<<PIND6))
 44c:	89 b1       	in	r24, 0x09	; 9
 44e:	29 b1       	in	r18, 0x09	; 9
 450:	99 b1       	in	r25, 0x09	; 9
 452:	38 2f       	mov	r19, r24
 454:	34 70       	andi	r19, 0x04	; 4
 456:	82 2f       	mov	r24, r18
 458:	80 71       	andi	r24, 0x10	; 16
 45a:	83 2b       	or	r24, r19
 45c:	90 74       	andi	r25, 0x40	; 64
 45e:	89 2b       	or	r24, r25
 460:	a1 f0       	breq	.+40     	; 0x48a <__vector_14+0x60>
	{
		us_counter++;
 462:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <us_counter>
 466:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <us_counter+0x1>
 46a:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <us_counter+0x2>
 46e:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <us_counter+0x3>
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	a1 1d       	adc	r26, r1
 476:	b1 1d       	adc	r27, r1
 478:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <us_counter>
 47c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <us_counter+0x1>
 480:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <us_counter+0x2>
 484:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <us_counter+0x3>
 488:	26 c0       	rjmp	.+76     	; 0x4d6 <__vector_14+0xac>
	}
	else
	{
		if (us_counter !=0)
 48a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <us_counter>
 48e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <us_counter+0x1>
 492:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <us_counter+0x2>
 496:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <us_counter+0x3>
 49a:	89 2b       	or	r24, r25
 49c:	8a 2b       	or	r24, r26
 49e:	8b 2b       	or	r24, r27
 4a0:	d1 f0       	breq	.+52     	; 0x4d6 <__vector_14+0xac>
		{
			total_time = us_counter;
 4a2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <us_counter>
 4a6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <us_counter+0x1>
 4aa:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <us_counter+0x2>
 4ae:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <us_counter+0x3>
 4b2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
 4b6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
 4ba:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <__data_end+0x2>
 4be:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <__data_end+0x3>
			us_counter = 0;
 4c2:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <us_counter>
 4c6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <us_counter+0x1>
 4ca:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <us_counter+0x2>
 4ce:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <us_counter+0x3>
			disable_interrupt();
 4d2:	0e 94 13 02 	call	0x426	; 0x426 <disable_interrupt>
		}
	}
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
 4f8:	cf 93       	push	r28
 4fa:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 4fc:	8a 30       	cpi	r24, 0x0A	; 10
 4fe:	19 f4       	brne	.+6      	; 0x506 <uart_putchar+0xe>
		uart_putchar('\r', stream);
 500:	8d e0       	ldi	r24, 0x0D	; 13
 502:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 506:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 50a:	85 ff       	sbrs	r24, 5
 50c:	fc cf       	rjmp	.-8      	; 0x506 <uart_putchar+0xe>
	UDR0 = c;
 50e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 516:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 51a:	88 23       	and	r24, r24
 51c:	e4 f7       	brge	.-8      	; 0x516 <uart_getchar>
	return UDR0;
 51e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 522:	08 95       	ret

00000524 <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
 524:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
 528:	87 e6       	ldi	r24, 0x67	; 103
 52a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 52e:	e0 ec       	ldi	r30, 0xC0	; 192
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	8d 7f       	andi	r24, 0xFD	; 253
 536:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 53e:	88 e1       	ldi	r24, 0x18	; 24
 540:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 544:	08 95       	ret

00000546 <io_redirect>:
}

void io_redirect(void ){
		
		
		stdout = &uart_output;	//redirect standard output to uart
 546:	e4 e5       	ldi	r30, 0x54	; 84
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	8e e0       	ldi	r24, 0x0E	; 14
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	93 83       	std	Z+3, r25	; 0x03
 550:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	91 83       	std	Z+1, r25	; 0x01
 558:	80 83       	st	Z, r24
 55a:	08 95       	ret

0000055c <__fixunssfsi>:
 55c:	0e 94 22 03 	call	0x644	; 0x644 <__fp_splitA>
 560:	88 f0       	brcs	.+34     	; 0x584 <__fixunssfsi+0x28>
 562:	9f 57       	subi	r25, 0x7F	; 127
 564:	98 f0       	brcs	.+38     	; 0x58c <__fixunssfsi+0x30>
 566:	b9 2f       	mov	r27, r25
 568:	99 27       	eor	r25, r25
 56a:	b7 51       	subi	r27, 0x17	; 23
 56c:	b0 f0       	brcs	.+44     	; 0x59a <__fixunssfsi+0x3e>
 56e:	e1 f0       	breq	.+56     	; 0x5a8 <__fixunssfsi+0x4c>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	1a f0       	brmi	.+6      	; 0x580 <__fixunssfsi+0x24>
 57a:	ba 95       	dec	r27
 57c:	c9 f7       	brne	.-14     	; 0x570 <__fixunssfsi+0x14>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <__fixunssfsi+0x4c>
 580:	b1 30       	cpi	r27, 0x01	; 1
 582:	91 f0       	breq	.+36     	; 0x5a8 <__fixunssfsi+0x4c>
 584:	0e 94 3c 03 	call	0x678	; 0x678 <__fp_zero>
 588:	b1 e0       	ldi	r27, 0x01	; 1
 58a:	08 95       	ret
 58c:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_zero>
 590:	67 2f       	mov	r22, r23
 592:	78 2f       	mov	r23, r24
 594:	88 27       	eor	r24, r24
 596:	b8 5f       	subi	r27, 0xF8	; 248
 598:	39 f0       	breq	.+14     	; 0x5a8 <__fixunssfsi+0x4c>
 59a:	b9 3f       	cpi	r27, 0xF9	; 249
 59c:	cc f3       	brlt	.-14     	; 0x590 <__fixunssfsi+0x34>
 59e:	86 95       	lsr	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b3 95       	inc	r27
 5a6:	d9 f7       	brne	.-10     	; 0x59e <__fixunssfsi+0x42>
 5a8:	3e f4       	brtc	.+14     	; 0x5b8 <__fixunssfsi+0x5c>
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__floatunsisf>:
 5ba:	e8 94       	clt
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__floatsisf+0x12>

000005be <__floatsisf>:
 5be:	97 fb       	bst	r25, 7
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__floatsisf+0x12>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	99 23       	and	r25, r25
 5d2:	a9 f0       	breq	.+42     	; 0x5fe <__floatsisf+0x40>
 5d4:	f9 2f       	mov	r31, r25
 5d6:	96 e9       	ldi	r25, 0x96	; 150
 5d8:	bb 27       	eor	r27, r27
 5da:	93 95       	inc	r25
 5dc:	f6 95       	lsr	r31
 5de:	87 95       	ror	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f1 11       	cpse	r31, r1
 5e8:	f8 cf       	rjmp	.-16     	; 0x5da <__floatsisf+0x1c>
 5ea:	fa f4       	brpl	.+62     	; 0x62a <__floatsisf+0x6c>
 5ec:	bb 0f       	add	r27, r27
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__floatsisf+0x36>
 5f0:	60 ff       	sbrs	r22, 0
 5f2:	1b c0       	rjmp	.+54     	; 0x62a <__floatsisf+0x6c>
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <__floatsisf+0x6c>
 5fe:	88 23       	and	r24, r24
 600:	11 f0       	breq	.+4      	; 0x606 <__floatsisf+0x48>
 602:	96 e9       	ldi	r25, 0x96	; 150
 604:	11 c0       	rjmp	.+34     	; 0x628 <__floatsisf+0x6a>
 606:	77 23       	and	r23, r23
 608:	21 f0       	breq	.+8      	; 0x612 <__floatsisf+0x54>
 60a:	9e e8       	ldi	r25, 0x8E	; 142
 60c:	87 2f       	mov	r24, r23
 60e:	76 2f       	mov	r23, r22
 610:	05 c0       	rjmp	.+10     	; 0x61c <__floatsisf+0x5e>
 612:	66 23       	and	r22, r22
 614:	71 f0       	breq	.+28     	; 0x632 <__floatsisf+0x74>
 616:	96 e8       	ldi	r25, 0x86	; 134
 618:	86 2f       	mov	r24, r22
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	2a f0       	brmi	.+10     	; 0x62a <__floatsisf+0x6c>
 620:	9a 95       	dec	r25
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	da f7       	brpl	.-10     	; 0x620 <__floatsisf+0x62>
 62a:	88 0f       	add	r24, r24
 62c:	96 95       	lsr	r25
 62e:	87 95       	ror	r24
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <__fp_split3>:
 634:	57 fd       	sbrc	r21, 7
 636:	90 58       	subi	r25, 0x80	; 128
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	59 f0       	breq	.+22     	; 0x654 <__fp_splitA+0x10>
 63e:	5f 3f       	cpi	r21, 0xFF	; 255
 640:	71 f0       	breq	.+28     	; 0x65e <__fp_splitA+0x1a>
 642:	47 95       	ror	r20

00000644 <__fp_splitA>:
 644:	88 0f       	add	r24, r24
 646:	97 fb       	bst	r25, 7
 648:	99 1f       	adc	r25, r25
 64a:	61 f0       	breq	.+24     	; 0x664 <__fp_splitA+0x20>
 64c:	9f 3f       	cpi	r25, 0xFF	; 255
 64e:	79 f0       	breq	.+30     	; 0x66e <__fp_splitA+0x2a>
 650:	87 95       	ror	r24
 652:	08 95       	ret
 654:	12 16       	cp	r1, r18
 656:	13 06       	cpc	r1, r19
 658:	14 06       	cpc	r1, r20
 65a:	55 1f       	adc	r21, r21
 65c:	f2 cf       	rjmp	.-28     	; 0x642 <__fp_split3+0xe>
 65e:	46 95       	lsr	r20
 660:	f1 df       	rcall	.-30     	; 0x644 <__fp_splitA>
 662:	08 c0       	rjmp	.+16     	; 0x674 <__fp_splitA+0x30>
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	18 06       	cpc	r1, r24
 66a:	99 1f       	adc	r25, r25
 66c:	f1 cf       	rjmp	.-30     	; 0x650 <__fp_splitA+0xc>
 66e:	86 95       	lsr	r24
 670:	71 05       	cpc	r23, r1
 672:	61 05       	cpc	r22, r1
 674:	08 94       	sec
 676:	08 95       	ret

00000678 <__fp_zero>:
 678:	e8 94       	clt

0000067a <__fp_szero>:
 67a:	bb 27       	eor	r27, r27
 67c:	66 27       	eor	r22, r22
 67e:	77 27       	eor	r23, r23
 680:	cb 01       	movw	r24, r22
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret

00000686 <__mulsf3>:
 686:	0e 94 56 03 	call	0x6ac	; 0x6ac <__mulsf3x>
 68a:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_round>
 68e:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscA>
 692:	38 f0       	brcs	.+14     	; 0x6a2 <__mulsf3+0x1c>
 694:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_pscB>
 698:	20 f0       	brcs	.+8      	; 0x6a2 <__mulsf3+0x1c>
 69a:	95 23       	and	r25, r21
 69c:	11 f0       	breq	.+4      	; 0x6a2 <__mulsf3+0x1c>
 69e:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 6a2:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_nan>
 6a6:	11 24       	eor	r1, r1
 6a8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_szero>

000006ac <__mulsf3x>:
 6ac:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_split3>
 6b0:	70 f3       	brcs	.-36     	; 0x68e <__mulsf3+0x8>

000006b2 <__mulsf3_pse>:
 6b2:	95 9f       	mul	r25, r21
 6b4:	c1 f3       	breq	.-16     	; 0x6a6 <__mulsf3+0x20>
 6b6:	95 0f       	add	r25, r21
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	55 1f       	adc	r21, r21
 6bc:	62 9f       	mul	r22, r18
 6be:	f0 01       	movw	r30, r0
 6c0:	72 9f       	mul	r23, r18
 6c2:	bb 27       	eor	r27, r27
 6c4:	f0 0d       	add	r31, r0
 6c6:	b1 1d       	adc	r27, r1
 6c8:	63 9f       	mul	r22, r19
 6ca:	aa 27       	eor	r26, r26
 6cc:	f0 0d       	add	r31, r0
 6ce:	b1 1d       	adc	r27, r1
 6d0:	aa 1f       	adc	r26, r26
 6d2:	64 9f       	mul	r22, r20
 6d4:	66 27       	eor	r22, r22
 6d6:	b0 0d       	add	r27, r0
 6d8:	a1 1d       	adc	r26, r1
 6da:	66 1f       	adc	r22, r22
 6dc:	82 9f       	mul	r24, r18
 6de:	22 27       	eor	r18, r18
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	62 1f       	adc	r22, r18
 6e6:	73 9f       	mul	r23, r19
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	62 1f       	adc	r22, r18
 6ee:	83 9f       	mul	r24, r19
 6f0:	a0 0d       	add	r26, r0
 6f2:	61 1d       	adc	r22, r1
 6f4:	22 1f       	adc	r18, r18
 6f6:	74 9f       	mul	r23, r20
 6f8:	33 27       	eor	r19, r19
 6fa:	a0 0d       	add	r26, r0
 6fc:	61 1d       	adc	r22, r1
 6fe:	23 1f       	adc	r18, r19
 700:	84 9f       	mul	r24, r20
 702:	60 0d       	add	r22, r0
 704:	21 1d       	adc	r18, r1
 706:	82 2f       	mov	r24, r18
 708:	76 2f       	mov	r23, r22
 70a:	6a 2f       	mov	r22, r26
 70c:	11 24       	eor	r1, r1
 70e:	9f 57       	subi	r25, 0x7F	; 127
 710:	50 40       	sbci	r21, 0x00	; 0
 712:	9a f0       	brmi	.+38     	; 0x73a <__mulsf3_pse+0x88>
 714:	f1 f0       	breq	.+60     	; 0x752 <__mulsf3_pse+0xa0>
 716:	88 23       	and	r24, r24
 718:	4a f0       	brmi	.+18     	; 0x72c <__mulsf3_pse+0x7a>
 71a:	ee 0f       	add	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	bb 1f       	adc	r27, r27
 720:	66 1f       	adc	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	91 50       	subi	r25, 0x01	; 1
 728:	50 40       	sbci	r21, 0x00	; 0
 72a:	a9 f7       	brne	.-22     	; 0x716 <__mulsf3_pse+0x64>
 72c:	9e 3f       	cpi	r25, 0xFE	; 254
 72e:	51 05       	cpc	r21, r1
 730:	80 f0       	brcs	.+32     	; 0x752 <__mulsf3_pse+0xa0>
 732:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 736:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_szero>
 73a:	5f 3f       	cpi	r21, 0xFF	; 255
 73c:	e4 f3       	brlt	.-8      	; 0x736 <__mulsf3_pse+0x84>
 73e:	98 3e       	cpi	r25, 0xE8	; 232
 740:	d4 f3       	brlt	.-12     	; 0x736 <__mulsf3_pse+0x84>
 742:	86 95       	lsr	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	b7 95       	ror	r27
 74a:	f7 95       	ror	r31
 74c:	e7 95       	ror	r30
 74e:	9f 5f       	subi	r25, 0xFF	; 255
 750:	c1 f7       	brne	.-16     	; 0x742 <__mulsf3_pse+0x90>
 752:	fe 2b       	or	r31, r30
 754:	88 0f       	add	r24, r24
 756:	91 1d       	adc	r25, r1
 758:	96 95       	lsr	r25
 75a:	87 95       	ror	r24
 75c:	97 f9       	bld	r25, 7
 75e:	08 95       	ret

00000760 <__fp_inf>:
 760:	97 f9       	bld	r25, 7
 762:	9f 67       	ori	r25, 0x7F	; 127
 764:	80 e8       	ldi	r24, 0x80	; 128
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	08 95       	ret

0000076c <__fp_nan>:
 76c:	9f ef       	ldi	r25, 0xFF	; 255
 76e:	80 ec       	ldi	r24, 0xC0	; 192
 770:	08 95       	ret

00000772 <__fp_pscA>:
 772:	00 24       	eor	r0, r0
 774:	0a 94       	dec	r0
 776:	16 16       	cp	r1, r22
 778:	17 06       	cpc	r1, r23
 77a:	18 06       	cpc	r1, r24
 77c:	09 06       	cpc	r0, r25
 77e:	08 95       	ret

00000780 <__fp_pscB>:
 780:	00 24       	eor	r0, r0
 782:	0a 94       	dec	r0
 784:	12 16       	cp	r1, r18
 786:	13 06       	cpc	r1, r19
 788:	14 06       	cpc	r1, r20
 78a:	05 06       	cpc	r0, r21
 78c:	08 95       	ret

0000078e <__fp_round>:
 78e:	09 2e       	mov	r0, r25
 790:	03 94       	inc	r0
 792:	00 0c       	add	r0, r0
 794:	11 f4       	brne	.+4      	; 0x79a <__fp_round+0xc>
 796:	88 23       	and	r24, r24
 798:	52 f0       	brmi	.+20     	; 0x7ae <__fp_round+0x20>
 79a:	bb 0f       	add	r27, r27
 79c:	40 f4       	brcc	.+16     	; 0x7ae <__fp_round+0x20>
 79e:	bf 2b       	or	r27, r31
 7a0:	11 f4       	brne	.+4      	; 0x7a6 <__fp_round+0x18>
 7a2:	60 ff       	sbrs	r22, 0
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <__fp_round+0x20>
 7a6:	6f 5f       	subi	r22, 0xFF	; 255
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	08 95       	ret

000007b0 <printf>:
 7b0:	a0 e0       	ldi	r26, 0x00	; 0
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	ee ed       	ldi	r30, 0xDE	; 222
 7b6:	f3 e0       	ldi	r31, 0x03	; 3
 7b8:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__prologue_saves__+0x20>
 7bc:	ae 01       	movw	r20, r28
 7be:	4b 5f       	subi	r20, 0xFB	; 251
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
 7c2:	fa 01       	movw	r30, r20
 7c4:	61 91       	ld	r22, Z+
 7c6:	71 91       	ld	r23, Z+
 7c8:	af 01       	movw	r20, r30
 7ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__iob+0x2>
 7ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__iob+0x3>
 7d2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vfprintf>
 7d6:	e2 e0       	ldi	r30, 0x02	; 2
 7d8:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__epilogue_restores__+0x20>

000007dc <vfprintf>:
 7dc:	ab e0       	ldi	r26, 0x0B	; 11
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e4 ef       	ldi	r30, 0xF4	; 244
 7e2:	f3 e0       	ldi	r31, 0x03	; 3
 7e4:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__prologue_saves__>
 7e8:	6c 01       	movw	r12, r24
 7ea:	7b 01       	movw	r14, r22
 7ec:	8a 01       	movw	r16, r20
 7ee:	fc 01       	movw	r30, r24
 7f0:	17 82       	std	Z+7, r1	; 0x07
 7f2:	16 82       	std	Z+6, r1	; 0x06
 7f4:	83 81       	ldd	r24, Z+3	; 0x03
 7f6:	81 ff       	sbrs	r24, 1
 7f8:	cc c1       	rjmp	.+920    	; 0xb92 <__stack+0x293>
 7fa:	ce 01       	movw	r24, r28
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	3c 01       	movw	r6, r24
 800:	f6 01       	movw	r30, r12
 802:	93 81       	ldd	r25, Z+3	; 0x03
 804:	f7 01       	movw	r30, r14
 806:	93 fd       	sbrc	r25, 3
 808:	85 91       	lpm	r24, Z+
 80a:	93 ff       	sbrs	r25, 3
 80c:	81 91       	ld	r24, Z+
 80e:	7f 01       	movw	r14, r30
 810:	88 23       	and	r24, r24
 812:	09 f4       	brne	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	ba c1       	rjmp	.+884    	; 0xb8a <__stack+0x28b>
 816:	85 32       	cpi	r24, 0x25	; 37
 818:	39 f4       	brne	.+14     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 81a:	93 fd       	sbrc	r25, 3
 81c:	85 91       	lpm	r24, Z+
 81e:	93 ff       	sbrs	r25, 3
 820:	81 91       	ld	r24, Z+
 822:	7f 01       	movw	r14, r30
 824:	85 32       	cpi	r24, 0x25	; 37
 826:	29 f4       	brne	.+10     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 828:	b6 01       	movw	r22, r12
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 830:	e7 cf       	rjmp	.-50     	; 0x800 <__DATA_REGION_LENGTH__>
 832:	91 2c       	mov	r9, r1
 834:	21 2c       	mov	r2, r1
 836:	31 2c       	mov	r3, r1
 838:	ff e1       	ldi	r31, 0x1F	; 31
 83a:	f3 15       	cp	r31, r3
 83c:	d8 f0       	brcs	.+54     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 83e:	8b 32       	cpi	r24, 0x2B	; 43
 840:	79 f0       	breq	.+30     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 842:	38 f4       	brcc	.+14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 844:	80 32       	cpi	r24, 0x20	; 32
 846:	79 f0       	breq	.+30     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 848:	83 32       	cpi	r24, 0x23	; 35
 84a:	a1 f4       	brne	.+40     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 84c:	23 2d       	mov	r18, r3
 84e:	20 61       	ori	r18, 0x10	; 16
 850:	1d c0       	rjmp	.+58     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 852:	8d 32       	cpi	r24, 0x2D	; 45
 854:	61 f0       	breq	.+24     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 856:	80 33       	cpi	r24, 0x30	; 48
 858:	69 f4       	brne	.+26     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 85a:	23 2d       	mov	r18, r3
 85c:	21 60       	ori	r18, 0x01	; 1
 85e:	16 c0       	rjmp	.+44     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 860:	83 2d       	mov	r24, r3
 862:	82 60       	ori	r24, 0x02	; 2
 864:	38 2e       	mov	r3, r24
 866:	e3 2d       	mov	r30, r3
 868:	e4 60       	ori	r30, 0x04	; 4
 86a:	3e 2e       	mov	r3, r30
 86c:	2a c0       	rjmp	.+84     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 86e:	f3 2d       	mov	r31, r3
 870:	f8 60       	ori	r31, 0x08	; 8
 872:	1d c0       	rjmp	.+58     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 874:	37 fc       	sbrc	r3, 7
 876:	2d c0       	rjmp	.+90     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 878:	20 ed       	ldi	r18, 0xD0	; 208
 87a:	28 0f       	add	r18, r24
 87c:	2a 30       	cpi	r18, 0x0A	; 10
 87e:	40 f0       	brcs	.+16     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 880:	8e 32       	cpi	r24, 0x2E	; 46
 882:	b9 f4       	brne	.+46     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 884:	36 fc       	sbrc	r3, 6
 886:	81 c1       	rjmp	.+770    	; 0xb8a <__stack+0x28b>
 888:	23 2d       	mov	r18, r3
 88a:	20 64       	ori	r18, 0x40	; 64
 88c:	32 2e       	mov	r3, r18
 88e:	19 c0       	rjmp	.+50     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 890:	36 fe       	sbrs	r3, 6
 892:	06 c0       	rjmp	.+12     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 894:	8a e0       	ldi	r24, 0x0A	; 10
 896:	98 9e       	mul	r9, r24
 898:	20 0d       	add	r18, r0
 89a:	11 24       	eor	r1, r1
 89c:	92 2e       	mov	r9, r18
 89e:	11 c0       	rjmp	.+34     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8a0:	ea e0       	ldi	r30, 0x0A	; 10
 8a2:	2e 9e       	mul	r2, r30
 8a4:	20 0d       	add	r18, r0
 8a6:	11 24       	eor	r1, r1
 8a8:	22 2e       	mov	r2, r18
 8aa:	f3 2d       	mov	r31, r3
 8ac:	f0 62       	ori	r31, 0x20	; 32
 8ae:	3f 2e       	mov	r3, r31
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8b2:	8c 36       	cpi	r24, 0x6C	; 108
 8b4:	21 f4       	brne	.+8      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8b6:	83 2d       	mov	r24, r3
 8b8:	80 68       	ori	r24, 0x80	; 128
 8ba:	38 2e       	mov	r3, r24
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8be:	88 36       	cpi	r24, 0x68	; 104
 8c0:	41 f4       	brne	.+16     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c2:	f7 01       	movw	r30, r14
 8c4:	93 fd       	sbrc	r25, 3
 8c6:	85 91       	lpm	r24, Z+
 8c8:	93 ff       	sbrs	r25, 3
 8ca:	81 91       	ld	r24, Z+
 8cc:	7f 01       	movw	r14, r30
 8ce:	81 11       	cpse	r24, r1
 8d0:	b3 cf       	rjmp	.-154    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 8d2:	98 2f       	mov	r25, r24
 8d4:	9f 7d       	andi	r25, 0xDF	; 223
 8d6:	95 54       	subi	r25, 0x45	; 69
 8d8:	93 30       	cpi	r25, 0x03	; 3
 8da:	28 f4       	brcc	.+10     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8dc:	0c 5f       	subi	r16, 0xFC	; 252
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	9f e3       	ldi	r25, 0x3F	; 63
 8e2:	99 83       	std	Y+1, r25	; 0x01
 8e4:	0d c0       	rjmp	.+26     	; 0x900 <__stack+0x1>
 8e6:	83 36       	cpi	r24, 0x63	; 99
 8e8:	31 f0       	breq	.+12     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8ea:	83 37       	cpi	r24, 0x73	; 115
 8ec:	71 f0       	breq	.+28     	; 0x90a <__stack+0xb>
 8ee:	83 35       	cpi	r24, 0x53	; 83
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8f2:	59 c0       	rjmp	.+178    	; 0x9a6 <__stack+0xa7>
 8f4:	21 c0       	rjmp	.+66     	; 0x938 <__stack+0x39>
 8f6:	f8 01       	movw	r30, r16
 8f8:	80 81       	ld	r24, Z
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	0e 5f       	subi	r16, 0xFE	; 254
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	88 24       	eor	r8, r8
 902:	83 94       	inc	r8
 904:	91 2c       	mov	r9, r1
 906:	53 01       	movw	r10, r6
 908:	13 c0       	rjmp	.+38     	; 0x930 <__stack+0x31>
 90a:	28 01       	movw	r4, r16
 90c:	f2 e0       	ldi	r31, 0x02	; 2
 90e:	4f 0e       	add	r4, r31
 910:	51 1c       	adc	r5, r1
 912:	f8 01       	movw	r30, r16
 914:	a0 80       	ld	r10, Z
 916:	b1 80       	ldd	r11, Z+1	; 0x01
 918:	36 fe       	sbrs	r3, 6
 91a:	03 c0       	rjmp	.+6      	; 0x922 <__stack+0x23>
 91c:	69 2d       	mov	r22, r9
 91e:	70 e0       	ldi	r23, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
 922:	6f ef       	ldi	r22, 0xFF	; 255
 924:	7f ef       	ldi	r23, 0xFF	; 255
 926:	c5 01       	movw	r24, r10
 928:	0e 94 da 05 	call	0xbb4	; 0xbb4 <strnlen>
 92c:	4c 01       	movw	r8, r24
 92e:	82 01       	movw	r16, r4
 930:	f3 2d       	mov	r31, r3
 932:	ff 77       	andi	r31, 0x7F	; 127
 934:	3f 2e       	mov	r3, r31
 936:	16 c0       	rjmp	.+44     	; 0x964 <__stack+0x65>
 938:	28 01       	movw	r4, r16
 93a:	22 e0       	ldi	r18, 0x02	; 2
 93c:	42 0e       	add	r4, r18
 93e:	51 1c       	adc	r5, r1
 940:	f8 01       	movw	r30, r16
 942:	a0 80       	ld	r10, Z
 944:	b1 80       	ldd	r11, Z+1	; 0x01
 946:	36 fe       	sbrs	r3, 6
 948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
 94a:	69 2d       	mov	r22, r9
 94c:	70 e0       	ldi	r23, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
 950:	6f ef       	ldi	r22, 0xFF	; 255
 952:	7f ef       	ldi	r23, 0xFF	; 255
 954:	c5 01       	movw	r24, r10
 956:	0e 94 cf 05 	call	0xb9e	; 0xb9e <strnlen_P>
 95a:	4c 01       	movw	r8, r24
 95c:	f3 2d       	mov	r31, r3
 95e:	f0 68       	ori	r31, 0x80	; 128
 960:	3f 2e       	mov	r3, r31
 962:	82 01       	movw	r16, r4
 964:	33 fc       	sbrc	r3, 3
 966:	1b c0       	rjmp	.+54     	; 0x99e <__stack+0x9f>
 968:	82 2d       	mov	r24, r2
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	88 16       	cp	r8, r24
 96e:	99 06       	cpc	r9, r25
 970:	b0 f4       	brcc	.+44     	; 0x99e <__stack+0x9f>
 972:	b6 01       	movw	r22, r12
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 97c:	2a 94       	dec	r2
 97e:	f4 cf       	rjmp	.-24     	; 0x968 <__stack+0x69>
 980:	f5 01       	movw	r30, r10
 982:	37 fc       	sbrc	r3, 7
 984:	85 91       	lpm	r24, Z+
 986:	37 fe       	sbrs	r3, 7
 988:	81 91       	ld	r24, Z+
 98a:	5f 01       	movw	r10, r30
 98c:	b6 01       	movw	r22, r12
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 994:	21 10       	cpse	r2, r1
 996:	2a 94       	dec	r2
 998:	21 e0       	ldi	r18, 0x01	; 1
 99a:	82 1a       	sub	r8, r18
 99c:	91 08       	sbc	r9, r1
 99e:	81 14       	cp	r8, r1
 9a0:	91 04       	cpc	r9, r1
 9a2:	71 f7       	brne	.-36     	; 0x980 <__stack+0x81>
 9a4:	e8 c0       	rjmp	.+464    	; 0xb76 <__stack+0x277>
 9a6:	84 36       	cpi	r24, 0x64	; 100
 9a8:	11 f0       	breq	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	89 36       	cpi	r24, 0x69	; 105
 9ac:	41 f5       	brne	.+80     	; 0x9fe <__stack+0xff>
 9ae:	f8 01       	movw	r30, r16
 9b0:	37 fe       	sbrs	r3, 7
 9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__stack+0xc3>
 9b4:	60 81       	ld	r22, Z
 9b6:	71 81       	ldd	r23, Z+1	; 0x01
 9b8:	82 81       	ldd	r24, Z+2	; 0x02
 9ba:	93 81       	ldd	r25, Z+3	; 0x03
 9bc:	0c 5f       	subi	r16, 0xFC	; 252
 9be:	1f 4f       	sbci	r17, 0xFF	; 255
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__stack+0xd3>
 9c2:	60 81       	ld	r22, Z
 9c4:	71 81       	ldd	r23, Z+1	; 0x01
 9c6:	07 2e       	mov	r0, r23
 9c8:	00 0c       	add	r0, r0
 9ca:	88 0b       	sbc	r24, r24
 9cc:	99 0b       	sbc	r25, r25
 9ce:	0e 5f       	subi	r16, 0xFE	; 254
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	f3 2d       	mov	r31, r3
 9d4:	ff 76       	andi	r31, 0x6F	; 111
 9d6:	3f 2e       	mov	r3, r31
 9d8:	97 ff       	sbrs	r25, 7
 9da:	09 c0       	rjmp	.+18     	; 0x9ee <__stack+0xef>
 9dc:	90 95       	com	r25
 9de:	80 95       	com	r24
 9e0:	70 95       	com	r23
 9e2:	61 95       	neg	r22
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	f0 68       	ori	r31, 0x80	; 128
 9ec:	3f 2e       	mov	r3, r31
 9ee:	2a e0       	ldi	r18, 0x0A	; 10
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	a3 01       	movw	r20, r6
 9f4:	0e 94 21 06 	call	0xc42	; 0xc42 <__ultoa_invert>
 9f8:	88 2e       	mov	r8, r24
 9fa:	86 18       	sub	r8, r6
 9fc:	45 c0       	rjmp	.+138    	; 0xa88 <__stack+0x189>
 9fe:	85 37       	cpi	r24, 0x75	; 117
 a00:	31 f4       	brne	.+12     	; 0xa0e <__stack+0x10f>
 a02:	23 2d       	mov	r18, r3
 a04:	2f 7e       	andi	r18, 0xEF	; 239
 a06:	b2 2e       	mov	r11, r18
 a08:	2a e0       	ldi	r18, 0x0A	; 10
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	25 c0       	rjmp	.+74     	; 0xa58 <__stack+0x159>
 a0e:	93 2d       	mov	r25, r3
 a10:	99 7f       	andi	r25, 0xF9	; 249
 a12:	b9 2e       	mov	r11, r25
 a14:	8f 36       	cpi	r24, 0x6F	; 111
 a16:	c1 f0       	breq	.+48     	; 0xa48 <__stack+0x149>
 a18:	18 f4       	brcc	.+6      	; 0xa20 <__stack+0x121>
 a1a:	88 35       	cpi	r24, 0x58	; 88
 a1c:	79 f0       	breq	.+30     	; 0xa3c <__stack+0x13d>
 a1e:	b5 c0       	rjmp	.+362    	; 0xb8a <__stack+0x28b>
 a20:	80 37       	cpi	r24, 0x70	; 112
 a22:	19 f0       	breq	.+6      	; 0xa2a <__stack+0x12b>
 a24:	88 37       	cpi	r24, 0x78	; 120
 a26:	21 f0       	breq	.+8      	; 0xa30 <__stack+0x131>
 a28:	b0 c0       	rjmp	.+352    	; 0xb8a <__stack+0x28b>
 a2a:	e9 2f       	mov	r30, r25
 a2c:	e0 61       	ori	r30, 0x10	; 16
 a2e:	be 2e       	mov	r11, r30
 a30:	b4 fe       	sbrs	r11, 4
 a32:	0d c0       	rjmp	.+26     	; 0xa4e <__stack+0x14f>
 a34:	fb 2d       	mov	r31, r11
 a36:	f4 60       	ori	r31, 0x04	; 4
 a38:	bf 2e       	mov	r11, r31
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <__stack+0x14f>
 a3c:	34 fe       	sbrs	r3, 4
 a3e:	0a c0       	rjmp	.+20     	; 0xa54 <__stack+0x155>
 a40:	29 2f       	mov	r18, r25
 a42:	26 60       	ori	r18, 0x06	; 6
 a44:	b2 2e       	mov	r11, r18
 a46:	06 c0       	rjmp	.+12     	; 0xa54 <__stack+0x155>
 a48:	28 e0       	ldi	r18, 0x08	; 8
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__stack+0x159>
 a4e:	20 e1       	ldi	r18, 0x10	; 16
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <__stack+0x159>
 a54:	20 e1       	ldi	r18, 0x10	; 16
 a56:	32 e0       	ldi	r19, 0x02	; 2
 a58:	f8 01       	movw	r30, r16
 a5a:	b7 fe       	sbrs	r11, 7
 a5c:	07 c0       	rjmp	.+14     	; 0xa6c <__stack+0x16d>
 a5e:	60 81       	ld	r22, Z
 a60:	71 81       	ldd	r23, Z+1	; 0x01
 a62:	82 81       	ldd	r24, Z+2	; 0x02
 a64:	93 81       	ldd	r25, Z+3	; 0x03
 a66:	0c 5f       	subi	r16, 0xFC	; 252
 a68:	1f 4f       	sbci	r17, 0xFF	; 255
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__stack+0x179>
 a6c:	60 81       	ld	r22, Z
 a6e:	71 81       	ldd	r23, Z+1	; 0x01
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 5f       	subi	r16, 0xFE	; 254
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	a3 01       	movw	r20, r6
 a7a:	0e 94 21 06 	call	0xc42	; 0xc42 <__ultoa_invert>
 a7e:	88 2e       	mov	r8, r24
 a80:	86 18       	sub	r8, r6
 a82:	fb 2d       	mov	r31, r11
 a84:	ff 77       	andi	r31, 0x7F	; 127
 a86:	3f 2e       	mov	r3, r31
 a88:	36 fe       	sbrs	r3, 6
 a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__stack+0x1a7>
 a8c:	23 2d       	mov	r18, r3
 a8e:	2e 7f       	andi	r18, 0xFE	; 254
 a90:	a2 2e       	mov	r10, r18
 a92:	89 14       	cp	r8, r9
 a94:	58 f4       	brcc	.+22     	; 0xaac <__stack+0x1ad>
 a96:	34 fe       	sbrs	r3, 4
 a98:	0b c0       	rjmp	.+22     	; 0xab0 <__stack+0x1b1>
 a9a:	32 fc       	sbrc	r3, 2
 a9c:	09 c0       	rjmp	.+18     	; 0xab0 <__stack+0x1b1>
 a9e:	83 2d       	mov	r24, r3
 aa0:	8e 7e       	andi	r24, 0xEE	; 238
 aa2:	a8 2e       	mov	r10, r24
 aa4:	05 c0       	rjmp	.+10     	; 0xab0 <__stack+0x1b1>
 aa6:	b8 2c       	mov	r11, r8
 aa8:	a3 2c       	mov	r10, r3
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <__stack+0x1b3>
 aac:	b8 2c       	mov	r11, r8
 aae:	01 c0       	rjmp	.+2      	; 0xab2 <__stack+0x1b3>
 ab0:	b9 2c       	mov	r11, r9
 ab2:	a4 fe       	sbrs	r10, 4
 ab4:	0f c0       	rjmp	.+30     	; 0xad4 <__stack+0x1d5>
 ab6:	fe 01       	movw	r30, r28
 ab8:	e8 0d       	add	r30, r8
 aba:	f1 1d       	adc	r31, r1
 abc:	80 81       	ld	r24, Z
 abe:	80 33       	cpi	r24, 0x30	; 48
 ac0:	21 f4       	brne	.+8      	; 0xaca <__stack+0x1cb>
 ac2:	9a 2d       	mov	r25, r10
 ac4:	99 7e       	andi	r25, 0xE9	; 233
 ac6:	a9 2e       	mov	r10, r25
 ac8:	09 c0       	rjmp	.+18     	; 0xadc <__stack+0x1dd>
 aca:	a2 fe       	sbrs	r10, 2
 acc:	06 c0       	rjmp	.+12     	; 0xada <__stack+0x1db>
 ace:	b3 94       	inc	r11
 ad0:	b3 94       	inc	r11
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <__stack+0x1dd>
 ad4:	8a 2d       	mov	r24, r10
 ad6:	86 78       	andi	r24, 0x86	; 134
 ad8:	09 f0       	breq	.+2      	; 0xadc <__stack+0x1dd>
 ada:	b3 94       	inc	r11
 adc:	a3 fc       	sbrc	r10, 3
 ade:	11 c0       	rjmp	.+34     	; 0xb02 <__stack+0x203>
 ae0:	a0 fe       	sbrs	r10, 0
 ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <__stack+0x1f1>
 ae4:	b2 14       	cp	r11, r2
 ae6:	88 f4       	brcc	.+34     	; 0xb0a <__stack+0x20b>
 ae8:	28 0c       	add	r2, r8
 aea:	92 2c       	mov	r9, r2
 aec:	9b 18       	sub	r9, r11
 aee:	0e c0       	rjmp	.+28     	; 0xb0c <__stack+0x20d>
 af0:	b2 14       	cp	r11, r2
 af2:	60 f4       	brcc	.+24     	; 0xb0c <__stack+0x20d>
 af4:	b6 01       	movw	r22, r12
 af6:	80 e2       	ldi	r24, 0x20	; 32
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 afe:	b3 94       	inc	r11
 b00:	f7 cf       	rjmp	.-18     	; 0xaf0 <__stack+0x1f1>
 b02:	b2 14       	cp	r11, r2
 b04:	18 f4       	brcc	.+6      	; 0xb0c <__stack+0x20d>
 b06:	2b 18       	sub	r2, r11
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <__stack+0x20f>
 b0a:	98 2c       	mov	r9, r8
 b0c:	21 2c       	mov	r2, r1
 b0e:	a4 fe       	sbrs	r10, 4
 b10:	10 c0       	rjmp	.+32     	; 0xb32 <__stack+0x233>
 b12:	b6 01       	movw	r22, r12
 b14:	80 e3       	ldi	r24, 0x30	; 48
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 b1c:	a2 fe       	sbrs	r10, 2
 b1e:	17 c0       	rjmp	.+46     	; 0xb4e <__stack+0x24f>
 b20:	a1 fc       	sbrc	r10, 1
 b22:	03 c0       	rjmp	.+6      	; 0xb2a <__stack+0x22b>
 b24:	88 e7       	ldi	r24, 0x78	; 120
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <__stack+0x22f>
 b2a:	88 e5       	ldi	r24, 0x58	; 88
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	b6 01       	movw	r22, r12
 b30:	0c c0       	rjmp	.+24     	; 0xb4a <__stack+0x24b>
 b32:	8a 2d       	mov	r24, r10
 b34:	86 78       	andi	r24, 0x86	; 134
 b36:	59 f0       	breq	.+22     	; 0xb4e <__stack+0x24f>
 b38:	a1 fe       	sbrs	r10, 1
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__stack+0x241>
 b3c:	8b e2       	ldi	r24, 0x2B	; 43
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <__stack+0x243>
 b40:	80 e2       	ldi	r24, 0x20	; 32
 b42:	a7 fc       	sbrc	r10, 7
 b44:	8d e2       	ldi	r24, 0x2D	; 45
 b46:	b6 01       	movw	r22, r12
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 b4e:	89 14       	cp	r8, r9
 b50:	38 f4       	brcc	.+14     	; 0xb60 <__stack+0x261>
 b52:	b6 01       	movw	r22, r12
 b54:	80 e3       	ldi	r24, 0x30	; 48
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 b5c:	9a 94       	dec	r9
 b5e:	f7 cf       	rjmp	.-18     	; 0xb4e <__stack+0x24f>
 b60:	8a 94       	dec	r8
 b62:	f3 01       	movw	r30, r6
 b64:	e8 0d       	add	r30, r8
 b66:	f1 1d       	adc	r31, r1
 b68:	80 81       	ld	r24, Z
 b6a:	b6 01       	movw	r22, r12
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 b72:	81 10       	cpse	r8, r1
 b74:	f5 cf       	rjmp	.-22     	; 0xb60 <__stack+0x261>
 b76:	22 20       	and	r2, r2
 b78:	09 f4       	brne	.+2      	; 0xb7c <__stack+0x27d>
 b7a:	42 ce       	rjmp	.-892    	; 0x800 <__DATA_REGION_LENGTH__>
 b7c:	b6 01       	movw	r22, r12
 b7e:	80 e2       	ldi	r24, 0x20	; 32
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 e5 05 	call	0xbca	; 0xbca <fputc>
 b86:	2a 94       	dec	r2
 b88:	f6 cf       	rjmp	.-20     	; 0xb76 <__stack+0x277>
 b8a:	f6 01       	movw	r30, r12
 b8c:	86 81       	ldd	r24, Z+6	; 0x06
 b8e:	97 81       	ldd	r25, Z+7	; 0x07
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <__stack+0x297>
 b92:	8f ef       	ldi	r24, 0xFF	; 255
 b94:	9f ef       	ldi	r25, 0xFF	; 255
 b96:	2b 96       	adiw	r28, 0x0b	; 11
 b98:	e2 e1       	ldi	r30, 0x12	; 18
 b9a:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__epilogue_restores__>

00000b9e <strnlen_P>:
 b9e:	fc 01       	movw	r30, r24
 ba0:	05 90       	lpm	r0, Z+
 ba2:	61 50       	subi	r22, 0x01	; 1
 ba4:	70 40       	sbci	r23, 0x00	; 0
 ba6:	01 10       	cpse	r0, r1
 ba8:	d8 f7       	brcc	.-10     	; 0xba0 <strnlen_P+0x2>
 baa:	80 95       	com	r24
 bac:	90 95       	com	r25
 bae:	8e 0f       	add	r24, r30
 bb0:	9f 1f       	adc	r25, r31
 bb2:	08 95       	ret

00000bb4 <strnlen>:
 bb4:	fc 01       	movw	r30, r24
 bb6:	61 50       	subi	r22, 0x01	; 1
 bb8:	70 40       	sbci	r23, 0x00	; 0
 bba:	01 90       	ld	r0, Z+
 bbc:	01 10       	cpse	r0, r1
 bbe:	d8 f7       	brcc	.-10     	; 0xbb6 <strnlen+0x2>
 bc0:	80 95       	com	r24
 bc2:	90 95       	com	r25
 bc4:	8e 0f       	add	r24, r30
 bc6:	9f 1f       	adc	r25, r31
 bc8:	08 95       	ret

00000bca <fputc>:
 bca:	0f 93       	push	r16
 bcc:	1f 93       	push	r17
 bce:	cf 93       	push	r28
 bd0:	df 93       	push	r29
 bd2:	fb 01       	movw	r30, r22
 bd4:	23 81       	ldd	r18, Z+3	; 0x03
 bd6:	21 fd       	sbrc	r18, 1
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <fputc+0x16>
 bda:	8f ef       	ldi	r24, 0xFF	; 255
 bdc:	9f ef       	ldi	r25, 0xFF	; 255
 bde:	2c c0       	rjmp	.+88     	; 0xc38 <fputc+0x6e>
 be0:	22 ff       	sbrs	r18, 2
 be2:	16 c0       	rjmp	.+44     	; 0xc10 <fputc+0x46>
 be4:	46 81       	ldd	r20, Z+6	; 0x06
 be6:	57 81       	ldd	r21, Z+7	; 0x07
 be8:	24 81       	ldd	r18, Z+4	; 0x04
 bea:	35 81       	ldd	r19, Z+5	; 0x05
 bec:	42 17       	cp	r20, r18
 bee:	53 07       	cpc	r21, r19
 bf0:	44 f4       	brge	.+16     	; 0xc02 <fputc+0x38>
 bf2:	a0 81       	ld	r26, Z
 bf4:	b1 81       	ldd	r27, Z+1	; 0x01
 bf6:	9d 01       	movw	r18, r26
 bf8:	2f 5f       	subi	r18, 0xFF	; 255
 bfa:	3f 4f       	sbci	r19, 0xFF	; 255
 bfc:	31 83       	std	Z+1, r19	; 0x01
 bfe:	20 83       	st	Z, r18
 c00:	8c 93       	st	X, r24
 c02:	26 81       	ldd	r18, Z+6	; 0x06
 c04:	37 81       	ldd	r19, Z+7	; 0x07
 c06:	2f 5f       	subi	r18, 0xFF	; 255
 c08:	3f 4f       	sbci	r19, 0xFF	; 255
 c0a:	37 83       	std	Z+7, r19	; 0x07
 c0c:	26 83       	std	Z+6, r18	; 0x06
 c0e:	14 c0       	rjmp	.+40     	; 0xc38 <fputc+0x6e>
 c10:	8b 01       	movw	r16, r22
 c12:	ec 01       	movw	r28, r24
 c14:	fb 01       	movw	r30, r22
 c16:	00 84       	ldd	r0, Z+8	; 0x08
 c18:	f1 85       	ldd	r31, Z+9	; 0x09
 c1a:	e0 2d       	mov	r30, r0
 c1c:	09 95       	icall
 c1e:	89 2b       	or	r24, r25
 c20:	e1 f6       	brne	.-72     	; 0xbda <fputc+0x10>
 c22:	d8 01       	movw	r26, r16
 c24:	16 96       	adiw	r26, 0x06	; 6
 c26:	8d 91       	ld	r24, X+
 c28:	9c 91       	ld	r25, X
 c2a:	17 97       	sbiw	r26, 0x07	; 7
 c2c:	01 96       	adiw	r24, 0x01	; 1
 c2e:	17 96       	adiw	r26, 0x07	; 7
 c30:	9c 93       	st	X, r25
 c32:	8e 93       	st	-X, r24
 c34:	16 97       	sbiw	r26, 0x06	; 6
 c36:	ce 01       	movw	r24, r28
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	1f 91       	pop	r17
 c3e:	0f 91       	pop	r16
 c40:	08 95       	ret

00000c42 <__ultoa_invert>:
 c42:	fa 01       	movw	r30, r20
 c44:	aa 27       	eor	r26, r26
 c46:	28 30       	cpi	r18, 0x08	; 8
 c48:	51 f1       	breq	.+84     	; 0xc9e <__ultoa_invert+0x5c>
 c4a:	20 31       	cpi	r18, 0x10	; 16
 c4c:	81 f1       	breq	.+96     	; 0xcae <__ultoa_invert+0x6c>
 c4e:	e8 94       	clt
 c50:	6f 93       	push	r22
 c52:	6e 7f       	andi	r22, 0xFE	; 254
 c54:	6e 5f       	subi	r22, 0xFE	; 254
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	af 4f       	sbci	r26, 0xFF	; 255
 c5e:	b1 e0       	ldi	r27, 0x01	; 1
 c60:	3e d0       	rcall	.+124    	; 0xcde <__ultoa_invert+0x9c>
 c62:	b4 e0       	ldi	r27, 0x04	; 4
 c64:	3c d0       	rcall	.+120    	; 0xcde <__ultoa_invert+0x9c>
 c66:	67 0f       	add	r22, r23
 c68:	78 1f       	adc	r23, r24
 c6a:	89 1f       	adc	r24, r25
 c6c:	9a 1f       	adc	r25, r26
 c6e:	a1 1d       	adc	r26, r1
 c70:	68 0f       	add	r22, r24
 c72:	79 1f       	adc	r23, r25
 c74:	8a 1f       	adc	r24, r26
 c76:	91 1d       	adc	r25, r1
 c78:	a1 1d       	adc	r26, r1
 c7a:	6a 0f       	add	r22, r26
 c7c:	71 1d       	adc	r23, r1
 c7e:	81 1d       	adc	r24, r1
 c80:	91 1d       	adc	r25, r1
 c82:	a1 1d       	adc	r26, r1
 c84:	20 d0       	rcall	.+64     	; 0xcc6 <__ultoa_invert+0x84>
 c86:	09 f4       	brne	.+2      	; 0xc8a <__ultoa_invert+0x48>
 c88:	68 94       	set
 c8a:	3f 91       	pop	r19
 c8c:	2a e0       	ldi	r18, 0x0A	; 10
 c8e:	26 9f       	mul	r18, r22
 c90:	11 24       	eor	r1, r1
 c92:	30 19       	sub	r19, r0
 c94:	30 5d       	subi	r19, 0xD0	; 208
 c96:	31 93       	st	Z+, r19
 c98:	de f6       	brtc	.-74     	; 0xc50 <__ultoa_invert+0xe>
 c9a:	cf 01       	movw	r24, r30
 c9c:	08 95       	ret
 c9e:	46 2f       	mov	r20, r22
 ca0:	47 70       	andi	r20, 0x07	; 7
 ca2:	40 5d       	subi	r20, 0xD0	; 208
 ca4:	41 93       	st	Z+, r20
 ca6:	b3 e0       	ldi	r27, 0x03	; 3
 ca8:	0f d0       	rcall	.+30     	; 0xcc8 <__ultoa_invert+0x86>
 caa:	c9 f7       	brne	.-14     	; 0xc9e <__ultoa_invert+0x5c>
 cac:	f6 cf       	rjmp	.-20     	; 0xc9a <__ultoa_invert+0x58>
 cae:	46 2f       	mov	r20, r22
 cb0:	4f 70       	andi	r20, 0x0F	; 15
 cb2:	40 5d       	subi	r20, 0xD0	; 208
 cb4:	4a 33       	cpi	r20, 0x3A	; 58
 cb6:	18 f0       	brcs	.+6      	; 0xcbe <__ultoa_invert+0x7c>
 cb8:	49 5d       	subi	r20, 0xD9	; 217
 cba:	31 fd       	sbrc	r19, 1
 cbc:	40 52       	subi	r20, 0x20	; 32
 cbe:	41 93       	st	Z+, r20
 cc0:	02 d0       	rcall	.+4      	; 0xcc6 <__ultoa_invert+0x84>
 cc2:	a9 f7       	brne	.-22     	; 0xcae <__ultoa_invert+0x6c>
 cc4:	ea cf       	rjmp	.-44     	; 0xc9a <__ultoa_invert+0x58>
 cc6:	b4 e0       	ldi	r27, 0x04	; 4
 cc8:	a6 95       	lsr	r26
 cca:	97 95       	ror	r25
 ccc:	87 95       	ror	r24
 cce:	77 95       	ror	r23
 cd0:	67 95       	ror	r22
 cd2:	ba 95       	dec	r27
 cd4:	c9 f7       	brne	.-14     	; 0xcc8 <__ultoa_invert+0x86>
 cd6:	00 97       	sbiw	r24, 0x00	; 0
 cd8:	61 05       	cpc	r22, r1
 cda:	71 05       	cpc	r23, r1
 cdc:	08 95       	ret
 cde:	9b 01       	movw	r18, r22
 ce0:	ac 01       	movw	r20, r24
 ce2:	0a 2e       	mov	r0, r26
 ce4:	06 94       	lsr	r0
 ce6:	57 95       	ror	r21
 ce8:	47 95       	ror	r20
 cea:	37 95       	ror	r19
 cec:	27 95       	ror	r18
 cee:	ba 95       	dec	r27
 cf0:	c9 f7       	brne	.-14     	; 0xce4 <__ultoa_invert+0xa2>
 cf2:	62 0f       	add	r22, r18
 cf4:	73 1f       	adc	r23, r19
 cf6:	84 1f       	adc	r24, r20
 cf8:	95 1f       	adc	r25, r21
 cfa:	a0 1d       	adc	r26, r0
 cfc:	08 95       	ret

00000cfe <__prologue_saves__>:
 cfe:	2f 92       	push	r2
 d00:	3f 92       	push	r3
 d02:	4f 92       	push	r4
 d04:	5f 92       	push	r5
 d06:	6f 92       	push	r6
 d08:	7f 92       	push	r7
 d0a:	8f 92       	push	r8
 d0c:	9f 92       	push	r9
 d0e:	af 92       	push	r10
 d10:	bf 92       	push	r11
 d12:	cf 92       	push	r12
 d14:	df 92       	push	r13
 d16:	ef 92       	push	r14
 d18:	ff 92       	push	r15
 d1a:	0f 93       	push	r16
 d1c:	1f 93       	push	r17
 d1e:	cf 93       	push	r28
 d20:	df 93       	push	r29
 d22:	cd b7       	in	r28, 0x3d	; 61
 d24:	de b7       	in	r29, 0x3e	; 62
 d26:	ca 1b       	sub	r28, r26
 d28:	db 0b       	sbc	r29, r27
 d2a:	0f b6       	in	r0, 0x3f	; 63
 d2c:	f8 94       	cli
 d2e:	de bf       	out	0x3e, r29	; 62
 d30:	0f be       	out	0x3f, r0	; 63
 d32:	cd bf       	out	0x3d, r28	; 61
 d34:	09 94       	ijmp

00000d36 <__epilogue_restores__>:
 d36:	2a 88       	ldd	r2, Y+18	; 0x12
 d38:	39 88       	ldd	r3, Y+17	; 0x11
 d3a:	48 88       	ldd	r4, Y+16	; 0x10
 d3c:	5f 84       	ldd	r5, Y+15	; 0x0f
 d3e:	6e 84       	ldd	r6, Y+14	; 0x0e
 d40:	7d 84       	ldd	r7, Y+13	; 0x0d
 d42:	8c 84       	ldd	r8, Y+12	; 0x0c
 d44:	9b 84       	ldd	r9, Y+11	; 0x0b
 d46:	aa 84       	ldd	r10, Y+10	; 0x0a
 d48:	b9 84       	ldd	r11, Y+9	; 0x09
 d4a:	c8 84       	ldd	r12, Y+8	; 0x08
 d4c:	df 80       	ldd	r13, Y+7	; 0x07
 d4e:	ee 80       	ldd	r14, Y+6	; 0x06
 d50:	fd 80       	ldd	r15, Y+5	; 0x05
 d52:	0c 81       	ldd	r16, Y+4	; 0x04
 d54:	1b 81       	ldd	r17, Y+3	; 0x03
 d56:	aa 81       	ldd	r26, Y+2	; 0x02
 d58:	b9 81       	ldd	r27, Y+1	; 0x01
 d5a:	ce 0f       	add	r28, r30
 d5c:	d1 1d       	adc	r29, r1
 d5e:	0f b6       	in	r0, 0x3f	; 63
 d60:	f8 94       	cli
 d62:	de bf       	out	0x3e, r29	; 62
 d64:	0f be       	out	0x3f, r0	; 63
 d66:	cd bf       	out	0x3d, r28	; 61
 d68:	ed 01       	movw	r28, r26
 d6a:	08 95       	ret

00000d6c <_exit>:
 d6c:	f8 94       	cli

00000d6e <__stop_program>:
 d6e:	ff cf       	rjmp	.-2      	; 0xd6e <__stop_program>
