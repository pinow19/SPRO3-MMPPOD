
Maze_solver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00001278  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008001a4  008001a4  000013b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e5  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a97  00000000  00000000  00002711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b18  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00003cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069b  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061c  00000000  00000000  00004567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e7       	ldi	r30, 0x78	; 120
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3a       	cpi	r26, 0xA4	; 164
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 ea       	ldi	r26, 0xA4	; 164
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3b       	cpi	r26, 0xB6	; 182
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int originalF = 0;
int count = 0;

int main(void)
{
	set_pins();
      a6:	0e 94 c6 03 	call	0x78c	; 0x78c <set_pins>
		
	uart_init();
      aa:	0e 94 07 04 	call	0x80e	; 0x80e <uart_init>
	io_redirect();
      ae:	0e 94 18 04 	call	0x830	; 0x830 <io_redirect>
	DIS_F = 30;
	
    while (1) 
    {
		int PWM = 100;
		FrontSensor = ultrasound_sensor(U_FRONT);
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ultrasound_sensor>
      b8:	ec 01       	movw	r28, r24
		RightSensor = ultrasound_sensor(U_RIGHT);
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ultrasound_sensor>
      c0:	8c 01       	movw	r16, r24
		LeftSensor = ultrasound_sensor(U_LEFT);
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ultrasound_sensor>
      c8:	7c 01       	movw	r14, r24
		
		printf("Front: %d\n", FrontSensor);
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	8c e1       	ldi	r24, 0x1C	; 28
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	9f 93       	push	r25
      d4:	8f 93       	push	r24
      d6:	0e 94 2c 06 	call	0xc58	; 0xc58 <printf>
		printf("Left: %d\n", LeftSensor);
      da:	ff 92       	push	r15
      dc:	ef 92       	push	r14
      de:	87 e2       	ldi	r24, 0x27	; 39
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	9f 93       	push	r25
      e4:	8f 93       	push	r24
      e6:	0e 94 2c 06 	call	0xc58	; 0xc58 <printf>
		printf("Right: %d\n\n", RightSensor);	
      ea:	1f 93       	push	r17
      ec:	0f 93       	push	r16
      ee:	81 e3       	ldi	r24, 0x31	; 49
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	9f 93       	push	r25
      f4:	8f 93       	push	r24
      f6:	0e 94 2c 06 	call	0xc58	; 0xc58 <printf>
		
		
		//There are seven cases our robot can come into contact with a obstacle and needs to avoid it
		
		//Case 1: When all three walls are within the defined range
		if (FrontSensor < DIS_F && RightSensor < DIS && LeftSensor < DIS)
      fa:	8d b7       	in	r24, 0x3d	; 61
      fc:	9e b7       	in	r25, 0x3e	; 62
      fe:	0c 96       	adiw	r24, 0x0c	; 12
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	9e bf       	out	0x3e, r25	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	8d bf       	out	0x3d, r24	; 61
     10a:	ce 31       	cpi	r28, 0x1E	; 30
     10c:	d1 05       	cpc	r29, r1
     10e:	08 f0       	brcs	.+2      	; 0x112 <main+0x6c>
     110:	4e c0       	rjmp	.+156    	; 0x1ae <main+0x108>
     112:	09 31       	cpi	r16, 0x19	; 25
     114:	11 05       	cpc	r17, r1
     116:	08 f0       	brcs	.+2      	; 0x11a <main+0x74>
     118:	4a c0       	rjmp	.+148    	; 0x1ae <main+0x108>
     11a:	99 e1       	ldi	r25, 0x19	; 25
     11c:	e9 16       	cp	r14, r25
     11e:	f1 04       	cpc	r15, r1
     120:	08 f0       	brcs	.+2      	; 0x124 <main+0x7e>
     122:	45 c0       	rjmp	.+138    	; 0x1ae <main+0x108>
		{
			printf("All three walls wrong\n");
     124:	8d e3       	ldi	r24, 0x3D	; 61
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
			if (RightSensor > LeftSensor)
     12c:	e0 16       	cp	r14, r16
     12e:	f1 06       	cpc	r15, r17
     130:	f8 f4       	brcc	.+62     	; 0x170 <main+0xca>
			{
							select_motor_direction(STOP, PWM);
     132:	64 e6       	ldi	r22, 0x64	; 100
     134:	84 e0       	ldi	r24, 0x04	; 4
     136:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
							printf("STOPPPPP\n");
     13a:	83 e5       	ldi	r24, 0x53	; 83
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     142:	2f ef       	ldi	r18, 0xFF	; 255
     144:	83 ed       	ldi	r24, 0xD3	; 211
     146:	90 e3       	ldi	r25, 0x30	; 48
     148:	21 50       	subi	r18, 0x01	; 1
     14a:	80 40       	sbci	r24, 0x00	; 0
     14c:	90 40       	sbci	r25, 0x00	; 0
     14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xa2>
     150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xac>
     152:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(RIGHT, PWM);
     154:	64 e6       	ldi	r22, 0x64	; 100
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	83 ed       	ldi	r24, 0xD3	; 211
     160:	90 e3       	ldi	r25, 0x30	; 48
     162:	21 50       	subi	r18, 0x01	; 1
     164:	80 40       	sbci	r24, 0x00	; 0
     166:	90 40       	sbci	r25, 0x00	; 0
     168:	e1 f7       	brne	.-8      	; 0x162 <main+0xbc>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xc6>
     16c:	00 00       	nop
     16e:	a1 cf       	rjmp	.-190    	; 0xb2 <main+0xc>
				_delay_ms(_180_degrees); //Time to turn the robot 180degrees
			} 
			else
			{
							select_motor_direction(STOP, PWM);
     170:	64 e6       	ldi	r22, 0x64	; 100
     172:	84 e0       	ldi	r24, 0x04	; 4
     174:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
							printf("STOPPPPP\n");
     178:	83 e5       	ldi	r24, 0x53	; 83
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
     180:	2f ef       	ldi	r18, 0xFF	; 255
     182:	83 ed       	ldi	r24, 0xD3	; 211
     184:	90 e3       	ldi	r25, 0x30	; 48
     186:	21 50       	subi	r18, 0x01	; 1
     188:	80 40       	sbci	r24, 0x00	; 0
     18a:	90 40       	sbci	r25, 0x00	; 0
     18c:	e1 f7       	brne	.-8      	; 0x186 <main+0xe0>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0xea>
     190:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(LEFT, PWM);
     192:	64 e6       	ldi	r22, 0x64	; 100
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     19a:	2f ef       	ldi	r18, 0xFF	; 255
     19c:	83 ed       	ldi	r24, 0xD3	; 211
     19e:	90 e3       	ldi	r25, 0x30	; 48
     1a0:	21 50       	subi	r18, 0x01	; 1
     1a2:	80 40       	sbci	r24, 0x00	; 0
     1a4:	90 40       	sbci	r25, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0xfa>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x104>
     1aa:	00 00       	nop
     1ac:	82 cf       	rjmp	.-252    	; 0xb2 <main+0xc>
				_delay_ms(_180_degrees);
			}
		}
		
		//Case 2: When front is block
		else if (FrontSensor < DIS_F && RightSensor > DIS && LeftSensor > DIS)
     1ae:	ce 31       	cpi	r28, 0x1E	; 30
     1b0:	d1 05       	cpc	r29, r1
     1b2:	08 f0       	brcs	.+2      	; 0x1b6 <main+0x110>
     1b4:	4e c0       	rjmp	.+156    	; 0x252 <main+0x1ac>
     1b6:	0a 31       	cpi	r16, 0x1A	; 26
     1b8:	11 05       	cpc	r17, r1
     1ba:	08 f4       	brcc	.+2      	; 0x1be <main+0x118>
     1bc:	4a c0       	rjmp	.+148    	; 0x252 <main+0x1ac>
     1be:	2a e1       	ldi	r18, 0x1A	; 26
     1c0:	e2 16       	cp	r14, r18
     1c2:	f1 04       	cpc	r15, r1
     1c4:	08 f4       	brcc	.+2      	; 0x1c8 <main+0x122>
     1c6:	45 c0       	rjmp	.+138    	; 0x252 <main+0x1ac>
		{
			printf("Front wall ahead\n");
     1c8:	8c e5       	ldi	r24, 0x5C	; 92
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
			if (RightSensor > LeftSensor)
     1d0:	e0 16       	cp	r14, r16
     1d2:	f1 06       	cpc	r15, r17
     1d4:	f8 f4       	brcc	.+62     	; 0x214 <main+0x16e>
			{
							select_motor_direction(STOP, PWM);
     1d6:	64 e6       	ldi	r22, 0x64	; 100
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
							printf("STOPPPPP\n");
     1de:	83 e5       	ldi	r24, 0x53	; 83
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	93 ed       	ldi	r25, 0xD3	; 211
     1ea:	20 e3       	ldi	r18, 0x30	; 48
     1ec:	81 50       	subi	r24, 0x01	; 1
     1ee:	90 40       	sbci	r25, 0x00	; 0
     1f0:	20 40       	sbci	r18, 0x00	; 0
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x146>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x150>
     1f6:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(RIGHT, PWM);
     1f8:	64 e6       	ldi	r22, 0x64	; 100
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	9a ed       	ldi	r25, 0xDA	; 218
     204:	2a e1       	ldi	r18, 0x1A	; 26
     206:	81 50       	subi	r24, 0x01	; 1
     208:	90 40       	sbci	r25, 0x00	; 0
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x160>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x16a>
     210:	00 00       	nop
     212:	4f cf       	rjmp	.-354    	; 0xb2 <main+0xc>
				_delay_ms(_90_degrees);
			} 
			else
			{
							select_motor_direction(STOP, PWM);
     214:	64 e6       	ldi	r22, 0x64	; 100
     216:	84 e0       	ldi	r24, 0x04	; 4
     218:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
							printf("STOPPPPP\n");
     21c:	83 e5       	ldi	r24, 0x53	; 83
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
     224:	8f ef       	ldi	r24, 0xFF	; 255
     226:	93 ed       	ldi	r25, 0xD3	; 211
     228:	20 e3       	ldi	r18, 0x30	; 48
     22a:	81 50       	subi	r24, 0x01	; 1
     22c:	90 40       	sbci	r25, 0x00	; 0
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	e1 f7       	brne	.-8      	; 0x22a <main+0x184>
     232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x18e>
     234:	00 00       	nop
							_delay_ms(1000);
				select_motor_direction(LEFT, PWM);
     236:	64 e6       	ldi	r22, 0x64	; 100
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     23e:	8f ef       	ldi	r24, 0xFF	; 255
     240:	9a ed       	ldi	r25, 0xDA	; 218
     242:	2a e1       	ldi	r18, 0x1A	; 26
     244:	81 50       	subi	r24, 0x01	; 1
     246:	90 40       	sbci	r25, 0x00	; 0
     248:	20 40       	sbci	r18, 0x00	; 0
     24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x19e>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x1a8>
     24e:	00 00       	nop
     250:	30 cf       	rjmp	.-416    	; 0xb2 <main+0xc>
			select_motor_direction(FORWARD);
		}
		*/
		//Case 5: When the front and left is blocked
		
		else if (FrontSensor < (DIS_F) && RightSensor > DIS && LeftSensor < DIS)
     252:	ce 31       	cpi	r28, 0x1E	; 30
     254:	d1 05       	cpc	r29, r1
     256:	08 f0       	brcs	.+2      	; 0x25a <main+0x1b4>
     258:	44 c0       	rjmp	.+136    	; 0x2e2 <main+0x23c>
     25a:	0a 31       	cpi	r16, 0x1A	; 26
     25c:	11 05       	cpc	r17, r1
     25e:	08 f4       	brcc	.+2      	; 0x262 <main+0x1bc>
     260:	40 c0       	rjmp	.+128    	; 0x2e2 <main+0x23c>
     262:	89 e1       	ldi	r24, 0x19	; 25
     264:	e8 16       	cp	r14, r24
     266:	f1 04       	cpc	r15, r1
     268:	e0 f5       	brcc	.+120    	; 0x2e2 <main+0x23c>
		{
			select_motor_direction(STOP, PWM);
     26a:	64 e6       	ldi	r22, 0x64	; 100
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
			printf("STOPPPPPright\n");
     272:	8d e6       	ldi	r24, 0x6D	; 109
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
     27a:	9f ef       	ldi	r25, 0xFF	; 255
     27c:	23 ed       	ldi	r18, 0xD3	; 211
     27e:	80 e3       	ldi	r24, 0x30	; 48
     280:	91 50       	subi	r25, 0x01	; 1
     282:	20 40       	sbci	r18, 0x00	; 0
     284:	80 40       	sbci	r24, 0x00	; 0
     286:	e1 f7       	brne	.-8      	; 0x280 <main+0x1da>
     288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x1e4>
     28a:	00 00       	nop
			_delay_ms(1000);
			
			
			printf("lol\n");
     28c:	8b e7       	ldi	r24, 0x7B	; 123
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
			for(int i = 0; i<3; i++){
     294:	c0 e0       	ldi	r28, 0x00	; 0
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	18 c0       	rjmp	.+48     	; 0x2ca <main+0x224>
				select_motor_direction(LEFT, 50); //MAKE SURE THE WIRING IS GOOD
     29a:	62 e3       	ldi	r22, 0x32	; 50
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
				opto_turn(3, OP_LEFT);
     2a2:	62 e0       	ldi	r22, 0x02	; 2
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	83 e0       	ldi	r24, 0x03	; 3
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 c1 01 	call	0x382	; 0x382 <opto_turn>
				select_motor_direction(STOP, PWM);
     2ae:	64 e6       	ldi	r22, 0x64	; 100
     2b0:	84 e0       	ldi	r24, 0x04	; 4
     2b2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     2b6:	9f ef       	ldi	r25, 0xFF	; 255
     2b8:	23 ec       	ldi	r18, 0xC3	; 195
     2ba:	89 e0       	ldi	r24, 0x09	; 9
     2bc:	91 50       	subi	r25, 0x01	; 1
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	80 40       	sbci	r24, 0x00	; 0
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x216>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x220>
     2c6:	00 00       	nop
			printf("STOPPPPPright\n");
			_delay_ms(1000);
			
			
			printf("lol\n");
			for(int i = 0; i<3; i++){
     2c8:	21 96       	adiw	r28, 0x01	; 1
     2ca:	c3 30       	cpi	r28, 0x03	; 3
     2cc:	d1 05       	cpc	r29, r1
     2ce:	2c f3       	brlt	.-54     	; 0x29a <main+0x1f4>
				select_motor_direction(LEFT, 50); //MAKE SURE THE WIRING IS GOOD
				opto_turn(3, OP_LEFT);
				select_motor_direction(STOP, PWM);
				_delay_ms(200);
			}
			printf("lol2\n");
     2d0:	8f e7       	ldi	r24, 0x7F	; 127
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
			select_motor_direction(STOP, PWM);
     2d8:	64 e6       	ldi	r22, 0x64	; 100
     2da:	84 e0       	ldi	r24, 0x04	; 4
     2dc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     2e0:	e8 ce       	rjmp	.-560    	; 0xb2 <main+0xc>
			
		}
		//Case 6: When the front and right is blocked
		else if (FrontSensor < DIS_F && RightSensor < DIS && LeftSensor > DIS)
     2e2:	6e 97       	sbiw	r28, 0x1e	; 30
     2e4:	08 f0       	brcs	.+2      	; 0x2e8 <main+0x242>
     2e6:	44 c0       	rjmp	.+136    	; 0x370 <main+0x2ca>
     2e8:	09 31       	cpi	r16, 0x19	; 25
     2ea:	11 05       	cpc	r17, r1
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <main+0x24a>
     2ee:	40 c0       	rjmp	.+128    	; 0x370 <main+0x2ca>
     2f0:	9a e1       	ldi	r25, 0x1A	; 26
     2f2:	e9 16       	cp	r14, r25
     2f4:	f1 04       	cpc	r15, r1
     2f6:	e0 f1       	brcs	.+120    	; 0x370 <main+0x2ca>
		{
			select_motor_direction(STOP, PWM);
     2f8:	64 e6       	ldi	r22, 0x64	; 100
     2fa:	84 e0       	ldi	r24, 0x04	; 4
     2fc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
			printf("STOPPPPPleft\n");
     300:	84 e8       	ldi	r24, 0x84	; 132
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
     308:	2f ef       	ldi	r18, 0xFF	; 255
     30a:	83 ed       	ldi	r24, 0xD3	; 211
     30c:	90 e3       	ldi	r25, 0x30	; 48
     30e:	21 50       	subi	r18, 0x01	; 1
     310:	80 40       	sbci	r24, 0x00	; 0
     312:	90 40       	sbci	r25, 0x00	; 0
     314:	e1 f7       	brne	.-8      	; 0x30e <main+0x268>
     316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x272>
     318:	00 00       	nop
			_delay_ms(1000);
			
			 
			printf("lol\n");
     31a:	8b e7       	ldi	r24, 0x7B	; 123
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
			for(int i = 0; i<3; i++){
     322:	c0 e0       	ldi	r28, 0x00	; 0
     324:	d0 e0       	ldi	r29, 0x00	; 0
     326:	18 c0       	rjmp	.+48     	; 0x358 <main+0x2b2>
			select_motor_direction(RIGHT, 50); //MAKE SURE THE WIRING IS GOOD
     328:	62 e3       	ldi	r22, 0x32	; 50
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
			opto_turn(3, OP_RIGHT);
     330:	63 e0       	ldi	r22, 0x03	; 3
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 c1 01 	call	0x382	; 0x382 <opto_turn>
			select_motor_direction(STOP, PWM);
     33c:	64 e6       	ldi	r22, 0x64	; 100
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     344:	2f ef       	ldi	r18, 0xFF	; 255
     346:	83 ec       	ldi	r24, 0xC3	; 195
     348:	99 e0       	ldi	r25, 0x09	; 9
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	80 40       	sbci	r24, 0x00	; 0
     34e:	90 40       	sbci	r25, 0x00	; 0
     350:	e1 f7       	brne	.-8      	; 0x34a <main+0x2a4>
     352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x2ae>
     354:	00 00       	nop
			printf("STOPPPPPleft\n");
			_delay_ms(1000);
			
			 
			printf("lol\n");
			for(int i = 0; i<3; i++){
     356:	21 96       	adiw	r28, 0x01	; 1
     358:	c3 30       	cpi	r28, 0x03	; 3
     35a:	d1 05       	cpc	r29, r1
     35c:	2c f3       	brlt	.-54     	; 0x328 <main+0x282>
			select_motor_direction(RIGHT, 50); //MAKE SURE THE WIRING IS GOOD
			opto_turn(3, OP_RIGHT);
			select_motor_direction(STOP, PWM);
			_delay_ms(200);
			}
			printf("lol2\n");
     35e:	8f e7       	ldi	r24, 0x7F	; 127
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
			select_motor_direction(STOP, PWM);
     366:	64 e6       	ldi	r22, 0x64	; 100
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     36e:	a1 ce       	rjmp	.-702    	; 0xb2 <main+0xc>
		}
		
		//Case 7: If the sides are small but the front is free or all sides are free then move forward
		else
		{
			printf("Everything is ok!\n");
     370:	81 e9       	ldi	r24, 0x91	; 145
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 42 06 	call	0xc84	; 0xc84 <puts>
			select_motor_direction(FORWARD, PWM);
     378:	64 e6       	ldi	r22, 0x64	; 100
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <select_motor_direction>
     380:	98 ce       	rjmp	.-720    	; 0xb2 <main+0xc>

00000382 <opto_turn>:
int slids = 0;
int flag_opto = 0;


int opto_turn(int turns, int side)
{
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	ec 01       	movw	r28, r24
     392:	16 2f       	mov	r17, r22
	
	slids = 0;	
     394:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__data_end+0x1>
     398:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end>
	//DDRD &= ~(1<<DDD3); //clear the pin PD2
	//DDRD |= 1<<DDD3;
	
	 
	
    while (slids<turns)
     39c:	80 c0       	rjmp	.+256    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
    {
		
		if (PIND & 1<<side)
     39e:	89 b1       	in	r24, 0x09	; 9
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	01 2e       	mov	r0, r17
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <opto_turn+0x28>
     3a6:	95 95       	asr	r25
     3a8:	87 95       	ror	r24
     3aa:	0a 94       	dec	r0
     3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <opto_turn+0x24>
     3ae:	80 ff       	sbrs	r24, 0
     3b0:	63 c0       	rjmp	.+198    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			
			if(PIND & 1<<side)
     3b2:	89 b1       	in	r24, 0x09	; 9
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	01 2e       	mov	r0, r17
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <opto_turn+0x3c>
     3ba:	95 95       	asr	r25
     3bc:	87 95       	ror	r24
     3be:	0a 94       	dec	r0
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <opto_turn+0x38>
     3c2:	80 fd       	sbrc	r24, 0
     3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <opto_turn+0x64>
     3c6:	58 c0       	rjmp	.+176    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     3c8:	8f e9       	ldi	r24, 0x9F	; 159
     3ca:	9f e0       	ldi	r25, 0x0F	; 15
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <opto_turn+0x4a>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <opto_turn+0x50>
     3d2:	00 00       	nop
			{
				while(PIND & 1<<side)
				{
					_delay_ms(1);
					count_opto++;
     3d4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <count_opto>
     3d8:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <count_opto+0x1>
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <count_opto+0x1>
     3e2:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <count_opto>
		if (PIND & 1<<side)
		{
			
			if(PIND & 1<<side)
			{
				while(PIND & 1<<side)
     3e6:	89 b1       	in	r24, 0x09	; 9
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 2e       	mov	r0, r17
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <opto_turn+0x70>
     3ee:	95 95       	asr	r25
     3f0:	87 95       	ror	r24
     3f2:	0a 94       	dec	r0
     3f4:	e2 f7       	brpl	.-8      	; 0x3ee <opto_turn+0x6c>
     3f6:	80 fd       	sbrc	r24, 0
     3f8:	e7 cf       	rjmp	.-50     	; 0x3c8 <opto_turn+0x46>
				{
					_delay_ms(1);
					count_opto++;
				}		
				rpm = 600000/(((double)count_opto+(double)count_off)*PoM);
     3fa:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <count_opto>
     3fe:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <count_opto+0x1>
     402:	07 2e       	mov	r0, r23
     404:	00 0c       	add	r0, r0
     406:	88 0b       	sbc	r24, r24
     408:	99 0b       	sbc	r25, r25
     40a:	0e 94 33 05 	call	0xa66	; 0xa66 <__floatsisf>
     40e:	6b 01       	movw	r12, r22
     410:	7c 01       	movw	r14, r24
     412:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <count_off>
     416:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <count_off+0x1>
     41a:	07 2e       	mov	r0, r23
     41c:	00 0c       	add	r0, r0
     41e:	88 0b       	sbc	r24, r24
     420:	99 0b       	sbc	r25, r25
     422:	0e 94 33 05 	call	0xa66	; 0xa66 <__floatsisf>
     426:	9b 01       	movw	r18, r22
     428:	ac 01       	movw	r20, r24
     42a:	c7 01       	movw	r24, r14
     42c:	b6 01       	movw	r22, r12
     42e:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 ec       	ldi	r20, 0xC0	; 192
     438:	50 e4       	ldi	r21, 0x40	; 64
     43a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3>
     43e:	9b 01       	movw	r18, r22
     440:	ac 01       	movw	r20, r24
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	7c e7       	ldi	r23, 0x7C	; 124
     446:	82 e1       	ldi	r24, 0x12	; 18
     448:	99 e4       	ldi	r25, 0x49	; 73
     44a:	0e 94 90 04 	call	0x920	; 0x920 <__divsf3>
     44e:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <rpm>
     452:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <rpm+0x1>
     456:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <rpm+0x2>
     45a:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <rpm+0x3>
	
				slids++;
     45e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
     462:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x1>
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <__data_end+0x1>
     46c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__data_end>
				count_off=0;
     470:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <count_off+0x1>
     474:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <count_off>
     478:	8f e9       	ldi	r24, 0x9F	; 159
     47a:	9f e0       	ldi	r25, 0x0F	; 15
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     482:	00 00       	nop
					
				
			}
		}
		_delay_ms(1);
		count_off++;
     484:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <count_off>
     488:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <count_off+0x1>
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <count_off+0x1>
     492:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <count_off>
		count_opto = 0;
     496:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <count_opto+0x1>
     49a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <count_opto>
	//DDRD &= ~(1<<DDD3); //clear the pin PD2
	//DDRD |= 1<<DDD3;
	
	 
	
    while (slids<turns)
     49e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
     4a2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x1>
     4a6:	8c 17       	cp	r24, r28
     4a8:	9d 07       	cpc	r25, r29
     4aa:	0c f4       	brge	.+2      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4ac:	78 cf       	rjmp	.-272    	; 0x39e <opto_turn+0x1c>
		count_off++;
		count_opto = 0;

	}

     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <setup_motors>:
    break;
  }
}

void setup_motors (void){
  TCCR0A |= (1 << WGM00) | (1 << WGM00); //Enable Fast PWM mode on Timer0
     4be:	84 b5       	in	r24, 0x24	; 36
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1); //Enable to put out PWM signal to D5 and D6 pins
     4c4:	84 b5       	in	r24, 0x24	; 36
     4c6:	80 6a       	ori	r24, 0xA0	; 160
     4c8:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1 << CS00) | (1 << CS01); //Set pre-scaler to 64
     4ca:	85 b5       	in	r24, 0x25	; 37
     4cc:	83 60       	ori	r24, 0x03	; 3
     4ce:	85 bd       	out	0x25, r24	; 37
     4d0:	08 95       	ret

000004d2 <select_motor_direction>:
  distance = duration * 0.34 / 2; // 340m/s -> 0.34 cm/10us because we measure distance every 10 microseconds
  delay_ms(60); //Suggested by datasheet to wait 60ms to ultrasound signal interruption
  return distance;
}

void select_motor_direction (unsigned char direction, unsigned char PWM){
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	c8 2f       	mov	r28, r24
     4d8:	d6 2f       	mov	r29, r22
  setup_motors();
     4da:	0e 94 5f 02 	call	0x4be	; 0x4be <setup_motors>
  switch (direction)
     4de:	c2 30       	cpi	r28, 0x02	; 2
     4e0:	49 f1       	breq	.+82     	; 0x534 <select_motor_direction+0x62>
     4e2:	28 f4       	brcc	.+10     	; 0x4ee <select_motor_direction+0x1c>
     4e4:	cc 23       	and	r28, r28
     4e6:	41 f0       	breq	.+16     	; 0x4f8 <select_motor_direction+0x26>
     4e8:	c1 30       	cpi	r28, 0x01	; 1
     4ea:	a9 f0       	breq	.+42     	; 0x516 <select_motor_direction+0x44>
     4ec:	4f c0       	rjmp	.+158    	; 0x58c <select_motor_direction+0xba>
     4ee:	c3 30       	cpi	r28, 0x03	; 3
     4f0:	81 f1       	breq	.+96     	; 0x552 <select_motor_direction+0x80>
     4f2:	c4 30       	cpi	r28, 0x04	; 4
     4f4:	e9 f1       	breq	.+122    	; 0x570 <select_motor_direction+0x9e>
     4f6:	4a c0       	rjmp	.+148    	; 0x58c <select_motor_direction+0xba>
  {
  case FORWARD:
    PORTD |= (1 << IN1);
     4f8:	8b b1       	in	r24, 0x0b	; 11
     4fa:	80 61       	ori	r24, 0x10	; 16
     4fc:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
     4fe:	8b b1       	in	r24, 0x0b	; 11
     500:	8f 77       	andi	r24, 0x7F	; 127
     502:	8b b9       	out	0x0b, r24	; 11

    PORTB |= (1 << IN3);
     504:	85 b1       	in	r24, 0x05	; 5
     506:	81 60       	ori	r24, 0x01	; 1
     508:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
     50a:	85 b1       	in	r24, 0x05	; 5
     50c:	8d 7f       	andi	r24, 0xFD	; 253
     50e:	85 b9       	out	0x05, r24	; 5

		OCR0A = PWM; //ENB
     510:	d7 bd       	out	0x27, r29	; 39
		OCR0B = PWM; //ENA
     512:	d8 bd       	out	0x28, r29	; 40

    break;
     514:	3b c0       	rjmp	.+118    	; 0x58c <select_motor_direction+0xba>

  case BACKWARD:
    PORTD &= ~(1 << IN1);
     516:	8b b1       	in	r24, 0x0b	; 11
     518:	8f 7e       	andi	r24, 0xEF	; 239
     51a:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1 << IN2);
     51c:	8b b1       	in	r24, 0x0b	; 11
     51e:	80 68       	ori	r24, 0x80	; 128
     520:	8b b9       	out	0x0b, r24	; 11

    PORTB &= ~(1 << IN3);
     522:	85 b1       	in	r24, 0x05	; 5
     524:	8e 7f       	andi	r24, 0xFE	; 254
     526:	85 b9       	out	0x05, r24	; 5
    PORTB |= (1 << IN4);
     528:	85 b1       	in	r24, 0x05	; 5
     52a:	82 60       	ori	r24, 0x02	; 2
     52c:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWM; //ENB
     52e:	d7 bd       	out	0x27, r29	; 39
	OCR0B = PWM; //ENA
     530:	d8 bd       	out	0x28, r29	; 40

    break;
     532:	2c c0       	rjmp	.+88     	; 0x58c <select_motor_direction+0xba>
  
  case LEFT:
    //Left goes backward
    PORTD &= ~(1 << IN1);
     534:	8b b1       	in	r24, 0x0b	; 11
     536:	8f 7e       	andi	r24, 0xEF	; 239
     538:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1 << IN2);
     53a:	8b b1       	in	r24, 0x0b	; 11
     53c:	80 68       	ori	r24, 0x80	; 128
     53e:	8b b9       	out	0x0b, r24	; 11

    //Right goes forward
    PORTB |= (1 << IN3);
     540:	85 b1       	in	r24, 0x05	; 5
     542:	81 60       	ori	r24, 0x01	; 1
     544:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
     546:	85 b1       	in	r24, 0x05	; 5
     548:	8d 7f       	andi	r24, 0xFD	; 253
     54a:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWM; //ENB
     54c:	d7 bd       	out	0x27, r29	; 39
	OCR0B = PWM; //ENA
     54e:	d8 bd       	out	0x28, r29	; 40

    break;
     550:	1d c0       	rjmp	.+58     	; 0x58c <select_motor_direction+0xba>
  
  case RIGHT:
    //Left goes forward
    PORTD |= (1 << IN1);
     552:	8b b1       	in	r24, 0x0b	; 11
     554:	80 61       	ori	r24, 0x10	; 16
     556:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
     558:	8b b1       	in	r24, 0x0b	; 11
     55a:	8f 77       	andi	r24, 0x7F	; 127
     55c:	8b b9       	out	0x0b, r24	; 11

    //Right goes backward
    PORTB &= ~(1 << IN3);
     55e:	85 b1       	in	r24, 0x05	; 5
     560:	8e 7f       	andi	r24, 0xFE	; 254
     562:	85 b9       	out	0x05, r24	; 5
    PORTB |= (1 << IN4);
     564:	85 b1       	in	r24, 0x05	; 5
     566:	82 60       	ori	r24, 0x02	; 2
     568:	85 b9       	out	0x05, r24	; 5

	OCR0A = PWM; //ENB
     56a:	d7 bd       	out	0x27, r29	; 39
	OCR0B = PWM; //ENA
     56c:	d8 bd       	out	0x28, r29	; 40

  break;
     56e:	0e c0       	rjmp	.+28     	; 0x58c <select_motor_direction+0xba>
  
  case STOP:
    PORTD &= ~(1 << IN1);
     570:	8b b1       	in	r24, 0x0b	; 11
     572:	8f 7e       	andi	r24, 0xEF	; 239
     574:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << IN2);
     576:	8b b1       	in	r24, 0x0b	; 11
     578:	8f 77       	andi	r24, 0x7F	; 127
     57a:	8b b9       	out	0x0b, r24	; 11

    PORTB &= ~(1 << IN3);
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~(1 << IN4);
     582:	85 b1       	in	r24, 0x05	; 5
     584:	8d 7f       	andi	r24, 0xFD	; 253
     586:	85 b9       	out	0x05, r24	; 5

    OCR0A = 0; //ENB
     588:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0; //ENA
     58a:	18 bc       	out	0x28, r1	; 40

    break;
  }
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <start_timer>:
    TIFR2 |= (1 << OCF2A);
  }
}

void start_timer (void){
	TCCR1A = 0;
     592:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12); // Set the Timer1 Mode to CTC
     596:	e1 e8       	ldi	r30, 0x81	; 129
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	88 60       	ori	r24, 0x08	; 8
     59e:	80 83       	st	Z, r24
	OCR1A = 0x9F; //160 tick (0-159) to reach 10us
     5a0:	8f e9       	ldi	r24, 0x9F	; 159
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); //Set the ISR COMPA vect
     5ac:	af e6       	ldi	r26, 0x6F	; 111
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	8c 91       	ld	r24, X
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	8c 93       	st	X, r24
	sei();
     5b6:	78 94       	sei
	TCCR1B |= (1 << CS10); // set pre-scaler to 1 to reach us
     5b8:	80 81       	ld	r24, Z
     5ba:	81 60       	ori	r24, 0x01	; 1
     5bc:	80 83       	st	Z, r24
     5be:	08 95       	ret

000005c0 <__vector_11>:
}

ISR (TIMER1_COMPA_vect){
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	2f 93       	push	r18
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
  ten_us_counter++;
     5d0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <ten_us_counter>
     5d4:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <ten_us_counter+0x1>
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <ten_us_counter+0x1>
     5de:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <ten_us_counter>
  if(ten_us_counter>65000) ten_us_counter = 0; //to avoid overflow of int
     5e2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <ten_us_counter>
     5e6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <ten_us_counter+0x1>
     5ea:	89 3e       	cpi	r24, 0xE9	; 233
     5ec:	9d 4f       	sbci	r25, 0xFD	; 253
     5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__vector_11+0x38>
     5f0:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <ten_us_counter+0x1>
     5f4:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <ten_us_counter>
}
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <stop_timer>:

void stop_timer (void){
  TCCR1B = 0; //stop interrupt
     608:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     60c:	08 95       	ret

0000060e <reset_prescaler>:
}

void reset_prescaler(void){
  TCCR2B &= ~((1 << CS20) | (1 << CS22));
     60e:	e1 eb       	ldi	r30, 0xB1	; 177
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	8a 7f       	andi	r24, 0xFA	; 250
     616:	80 83       	st	Z, r24
     618:	08 95       	ret

0000061a <delay_ms>:
  TCCR0A |= (1 << WGM00) | (1 << WGM00); //Enable Fast PWM mode on Timer0
  TCCR0A |= (1 << COM0A1) | (1 << COM0B1); //Enable to put out PWM signal to D5 and D6 pins
  TCCR0B |= (1 << CS00) | (1 << CS01); //Set pre-scaler to 64
}

void delay_ms (unsigned int ms){
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	ec 01       	movw	r28, r24
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
     620:	e0 eb       	ldi	r30, 0xB0	; 176
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	82 60       	ori	r24, 0x02	; 2
     628:	80 83       	st	Z, r24
  OCR2A = 0xF9; // count up to 256 ticks (0-255) to reach 1ms
     62a:	89 ef       	ldi	r24, 0xF9	; 249
     62c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  reset_prescaler();
     630:	0e 94 07 03 	call	0x60e	; 0x60e <reset_prescaler>
  TCCR2B |= (1 << CS22); // set pre-scaler to 64 and start the timer
     634:	e1 eb       	ldi	r30, 0xB1	; 177
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	84 60       	ori	r24, 0x04	; 4
     63c:	80 83       	st	Z, r24
  for (int i=0; i < ms; i++){
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	07 c0       	rjmp	.+14     	; 0x652 <delay_ms+0x38>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
     644:	b9 9b       	sbis	0x17, 1	; 23
     646:	fe cf       	rjmp	.-4      	; 0x644 <delay_ms+0x2a>
    TIFR2 |= (1 << OCF2A);
     648:	87 b3       	in	r24, 0x17	; 23
     64a:	82 60       	ori	r24, 0x02	; 2
     64c:	87 bb       	out	0x17, r24	; 23
void delay_ms (unsigned int ms){
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
  OCR2A = 0xF9; // count up to 256 ticks (0-255) to reach 1ms
  reset_prescaler();
  TCCR2B |= (1 << CS22); // set pre-scaler to 64 and start the timer
  for (int i=0; i < ms; i++){
     64e:	2f 5f       	subi	r18, 0xFF	; 255
     650:	3f 4f       	sbci	r19, 0xFF	; 255
     652:	2c 17       	cp	r18, r28
     654:	3d 07       	cpc	r19, r29
     656:	b0 f3       	brcs	.-20     	; 0x644 <delay_ms+0x2a>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
    TIFR2 |= (1 << OCF2A);
  }
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <delay_us>:

void delay_us (unsigned int us){
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
     664:	e0 eb       	ldi	r30, 0xB0	; 176
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	82 60       	ori	r24, 0x02	; 2
     66c:	80 83       	st	Z, r24
  OCR2A = 0x0F; // count up to 16 ticks (0-15) to reach 1us
     66e:	8f e0       	ldi	r24, 0x0F	; 15
     670:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  reset_prescaler();
     674:	0e 94 07 03 	call	0x60e	; 0x60e <reset_prescaler>
  TCCR2B |= (1 << CS20); // set pre-scaler to 1 and start the timer
     678:	e1 eb       	ldi	r30, 0xB1	; 177
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	81 60       	ori	r24, 0x01	; 1
     680:	80 83       	st	Z, r24
  for (int i=0; i < us; i++){
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	07 c0       	rjmp	.+14     	; 0x696 <delay_us+0x38>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
     688:	b9 9b       	sbis	0x17, 1	; 23
     68a:	fe cf       	rjmp	.-4      	; 0x688 <delay_us+0x2a>
    TIFR2 |= (1 << OCF2A);
     68c:	87 b3       	in	r24, 0x17	; 23
     68e:	82 60       	ori	r24, 0x02	; 2
     690:	87 bb       	out	0x17, r24	; 23
void delay_us (unsigned int us){
  TCCR2A |= (1 << WGM21); // Set the Timer2 Mode to CTC
  OCR2A = 0x0F; // count up to 16 ticks (0-15) to reach 1us
  reset_prescaler();
  TCCR2B |= (1 << CS20); // set pre-scaler to 1 and start the timer
  for (int i=0; i < us; i++){
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	2c 17       	cp	r18, r28
     698:	3d 07       	cpc	r19, r29
     69a:	b0 f3       	brcs	.-20     	; 0x688 <delay_us+0x2a>
    while (!(TIFR2 & (1 << OCF2A))); // wait for the overflow event
    TIFR2 |= (1 << OCF2A);
  }
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <ultrasound_sensor>:
void setup_motors (void);
void reset_prescaler(void);

volatile unsigned int ten_us_counter = 0;

unsigned int ultrasound_sensor (unsigned char sensor){
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	18 2f       	mov	r17, r24
  unsigned char Echo_Pin = sensor;
  unsigned char Trigger_Pin = sensor+2;
     6b4:	02 e0       	ldi	r16, 0x02	; 2
     6b6:	08 0f       	add	r16, r24
  unsigned int distance = 0, duration = 0, timer_LOW = 0, timer_HIGH = 0;
  start_timer();
     6b8:	0e 94 c9 02 	call	0x592	; 0x592 <start_timer>
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
     6bc:	85 b1       	in	r24, 0x05	; 5
     6be:	c1 e0       	ldi	r28, 0x01	; 1
     6c0:	d0 e0       	ldi	r29, 0x00	; 0
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <ultrasound_sensor+0x26>
     6c4:	cc 0f       	add	r28, r28
     6c6:	dd 1f       	adc	r29, r29
     6c8:	0a 95       	dec	r16
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <ultrasound_sensor+0x22>
     6cc:	dc 2f       	mov	r29, r28
     6ce:	d0 95       	com	r29
     6d0:	8d 23       	and	r24, r29
     6d2:	85 b9       	out	0x05, r24	; 5
  delay_us(2);
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
     6dc:	85 b1       	in	r24, 0x05	; 5
     6de:	c8 2b       	or	r28, r24
     6e0:	c5 b9       	out	0x05, r28	; 5
  delay_us(10);
     6e2:	8a e0       	ldi	r24, 0x0A	; 10
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 2f 03 	call	0x65e	; 0x65e <delay_us>
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
     6ea:	85 b1       	in	r24, 0x05	; 5
     6ec:	d8 23       	and	r29, r24
     6ee:	d5 b9       	out	0x05, r29	; 5
volatile unsigned int ten_us_counter = 0;

unsigned int ultrasound_sensor (unsigned char sensor){
  unsigned char Echo_Pin = sensor;
  unsigned char Trigger_Pin = sensor+2;
  unsigned int distance = 0, duration = 0, timer_LOW = 0, timer_HIGH = 0;
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	d0 e0       	ldi	r29, 0x00	; 0
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
  delay_us(2);
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <ultrasound_sensor+0x5c>
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
     6f6:	c0 91 ae 01 	lds	r28, 0x01AE	; 0x8001ae <ten_us_counter>
     6fa:	d0 91 af 01 	lds	r29, 0x01AF	; 0x8001af <ten_us_counter+0x1>
  PORTB &= ~(1 << Trigger_Pin); // wait 2us to make sure echo is avoided
  delay_us(2);
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
     6fe:	86 b1       	in	r24, 0x06	; 6
     700:	21 2f       	mov	r18, r17
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	01 2e       	mov	r0, r17
     706:	02 c0       	rjmp	.+4      	; 0x70c <ultrasound_sensor+0x6a>
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	0a 94       	dec	r0
     70e:	e2 f7       	brpl	.-8      	; 0x708 <ultrasound_sensor+0x66>
     710:	80 ff       	sbrs	r24, 0
     712:	f1 cf       	rjmp	.-30     	; 0x6f6 <ultrasound_sensor+0x54>
     714:	00 e0       	ldi	r16, 0x00	; 0
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	04 c0       	rjmp	.+8      	; 0x722 <ultrasound_sensor+0x80>
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
  while (PINC & (1 << Echo_Pin)){
    timer_HIGH = ten_us_counter; } //Wait for the signal to finish (reach Falling edge)
     71a:	00 91 ae 01 	lds	r16, 0x01AE	; 0x8001ae <ten_us_counter>
     71e:	10 91 af 01 	lds	r17, 0x01AF	; 0x8001af <ten_us_counter+0x1>
  PORTB |= (1 << Trigger_Pin); // Activate trigger pin to send out ultrasound noise for 10 us
  delay_us(10);
  PORTB &= ~(1 << Trigger_Pin); //turn off the trigger
  while (!(PINC & (1 << Echo_Pin))){
    timer_LOW = ten_us_counter; } //Wait to get back the signal (reach Rising edge)
  while (PINC & (1 << Echo_Pin)){
     722:	86 b1       	in	r24, 0x06	; 6
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	02 2e       	mov	r0, r18
     728:	02 c0       	rjmp	.+4      	; 0x72e <ultrasound_sensor+0x8c>
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	0a 94       	dec	r0
     730:	e2 f7       	brpl	.-8      	; 0x72a <ultrasound_sensor+0x88>
     732:	80 fd       	sbrc	r24, 0
     734:	f2 cf       	rjmp	.-28     	; 0x71a <ultrasound_sensor+0x78>
    timer_HIGH = ten_us_counter; } //Wait for the signal to finish (reach Falling edge)
  stop_timer();
     736:	0e 94 04 03 	call	0x608	; 0x608 <stop_timer>
  duration = timer_HIGH - timer_LOW;
     73a:	b8 01       	movw	r22, r16
     73c:	6c 1b       	sub	r22, r28
     73e:	7d 0b       	sbc	r23, r29
  ten_us_counter = 0;
     740:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <ten_us_counter+0x1>
     744:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <ten_us_counter>
  distance = duration * 0.34 / 2; // 340m/s -> 0.34 cm/10us because we measure distance every 10 microseconds
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 31 05 	call	0xa62	; 0xa62 <__floatunsisf>
     750:	2b e7       	ldi	r18, 0x7B	; 123
     752:	34 e1       	ldi	r19, 0x14	; 20
     754:	4e ea       	ldi	r20, 0xAE	; 174
     756:	5e e3       	ldi	r21, 0x3E	; 62
     758:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	5f e3       	ldi	r21, 0x3F	; 63
     764:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3>
     768:	0e 94 02 05 	call	0xa04	; 0xa04 <__fixunssfsi>
     76c:	6b 01       	movw	r12, r22
     76e:	7c 01       	movw	r14, r24
  delay_ms(60); //Suggested by datasheet to wait 60ms to ultrasound signal interruption
     770:	8c e3       	ldi	r24, 0x3C	; 60
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 0d 03 	call	0x61a	; 0x61a <delay_ms>
  return distance;
}
     778:	c6 01       	movw	r24, r12
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	08 95       	ret

0000078c <set_pins>:
  TCCR2B &= ~((1 << CS20) | (1 << CS22));
  }

void set_pins (void){
  //Setting Echo pins
  DDRC &= ~(1 << U_FRONT); //A0 set as input
     78c:	87 b1       	in	r24, 0x07	; 7
     78e:	8e 7f       	andi	r24, 0xFE	; 254
     790:	87 b9       	out	0x07, r24	; 7
  DDRC &= ~(1 << U_LEFT); //A1 set as input
     792:	87 b1       	in	r24, 0x07	; 7
     794:	8d 7f       	andi	r24, 0xFD	; 253
     796:	87 b9       	out	0x07, r24	; 7
  DDRC &= ~(1 << U_RIGHT); // A2 set as input
     798:	87 b1       	in	r24, 0x07	; 7
     79a:	8b 7f       	andi	r24, 0xFB	; 251
     79c:	87 b9       	out	0x07, r24	; 7

  //Setting Trigger pins
  DDRB |= (1 << (U_FRONT+2)); //D10 set as output
     79e:	84 b1       	in	r24, 0x04	; 4
     7a0:	84 60       	ori	r24, 0x04	; 4
     7a2:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << (U_LEFT+2)); //D11 set as output
     7a4:	84 b1       	in	r24, 0x04	; 4
     7a6:	88 60       	ori	r24, 0x08	; 8
     7a8:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << (U_RIGHT+2)); //D12 set as output
     7aa:	84 b1       	in	r24, 0x04	; 4
     7ac:	80 61       	ori	r24, 0x10	; 16
     7ae:	84 b9       	out	0x04, r24	; 4

  //Setting Optocoupler PINS
  DDRD &= ~(1 << O_LEFT); //D2 set as input
     7b0:	8a b1       	in	r24, 0x0a	; 10
     7b2:	8b 7f       	andi	r24, 0xFB	; 251
     7b4:	8a b9       	out	0x0a, r24	; 10
  DDRD &= ~(1 << O_RIGHT); //D3 set as input
     7b6:	8a b1       	in	r24, 0x0a	; 10
     7b8:	87 7f       	andi	r24, 0xF7	; 247
     7ba:	8a b9       	out	0x0a, r24	; 10

  //Setting motor pins
  DDRD |= (1 << IN1); //D4 set as output
     7bc:	8a b1       	in	r24, 0x0a	; 10
     7be:	80 61       	ori	r24, 0x10	; 16
     7c0:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << IN2); //D7 set as output
     7c2:	8a b1       	in	r24, 0x0a	; 10
     7c4:	80 68       	ori	r24, 0x80	; 128
     7c6:	8a b9       	out	0x0a, r24	; 10
  DDRB |= (1 << IN3); //D8 set as output
     7c8:	84 b1       	in	r24, 0x04	; 4
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	84 b9       	out	0x04, r24	; 4
  DDRB |= (1 << IN4); //D9 set as output
     7ce:	84 b1       	in	r24, 0x04	; 4
     7d0:	82 60       	ori	r24, 0x02	; 2
     7d2:	84 b9       	out	0x04, r24	; 4
  DDRD |= (1 << ENA); //D5 set as output
     7d4:	8a b1       	in	r24, 0x0a	; 10
     7d6:	80 62       	ori	r24, 0x20	; 32
     7d8:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << ENB); //D6 set as output
     7da:	8a b1       	in	r24, 0x0a	; 10
     7dc:	80 64       	ori	r24, 0x40	; 64
     7de:	8a b9       	out	0x0a, r24	; 10
     7e0:	08 95       	ret

000007e2 <uart_putchar>:
     7e2:	cf 93       	push	r28
     7e4:	c8 2f       	mov	r28, r24
     7e6:	8a 30       	cpi	r24, 0x0A	; 10
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <uart_putchar+0xe>
     7ea:	8d e0       	ldi	r24, 0x0D	; 13
     7ec:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <uart_putchar>
     7f0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     7f4:	85 ff       	sbrs	r24, 5
     7f6:	fc cf       	rjmp	.-8      	; 0x7f0 <uart_putchar+0xe>
     7f8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <uart_getchar>:
     800:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     804:	88 23       	and	r24, r24
     806:	e4 f7       	brge	.-8      	; 0x800 <uart_getchar>
     808:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     80c:	08 95       	ret

0000080e <uart_init>:
     80e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     812:	87 e6       	ldi	r24, 0x67	; 103
     814:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     818:	e0 ec       	ldi	r30, 0xC0	; 192
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	8d 7f       	andi	r24, 0xFD	; 253
     820:	80 83       	st	Z, r24
     822:	86 e0       	ldi	r24, 0x06	; 6
     824:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     828:	88 e1       	ldi	r24, 0x18	; 24
     82a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     82e:	08 95       	ret

00000830 <io_redirect>:
     830:	e0 eb       	ldi	r30, 0xB0	; 176
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	8e e0       	ldi	r24, 0x0E	; 14
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	93 83       	std	Z+3, r25	; 0x03
     83a:	82 83       	std	Z+2, r24	; 0x02
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	91 83       	std	Z+1, r25	; 0x01
     842:	80 83       	st	Z, r24
     844:	08 95       	ret

00000846 <__subsf3>:
     846:	50 58       	subi	r21, 0x80	; 128

00000848 <__addsf3>:
     848:	bb 27       	eor	r27, r27
     84a:	aa 27       	eor	r26, r26
     84c:	0e 94 3b 04 	call	0x876	; 0x876 <__addsf3x>
     850:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_round>
     854:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscA>
     858:	38 f0       	brcs	.+14     	; 0x868 <__addsf3+0x20>
     85a:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_pscB>
     85e:	20 f0       	brcs	.+8      	; 0x868 <__addsf3+0x20>
     860:	39 f4       	brne	.+14     	; 0x870 <__addsf3+0x28>
     862:	9f 3f       	cpi	r25, 0xFF	; 255
     864:	19 f4       	brne	.+6      	; 0x86c <__addsf3+0x24>
     866:	26 f4       	brtc	.+8      	; 0x870 <__addsf3+0x28>
     868:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_nan>
     86c:	0e f4       	brtc	.+2      	; 0x870 <__addsf3+0x28>
     86e:	e0 95       	com	r30
     870:	e7 fb       	bst	r30, 7
     872:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_inf>

00000876 <__addsf3x>:
     876:	e9 2f       	mov	r30, r25
     878:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fp_split3>
     87c:	58 f3       	brcs	.-42     	; 0x854 <__addsf3+0xc>
     87e:	ba 17       	cp	r27, r26
     880:	62 07       	cpc	r22, r18
     882:	73 07       	cpc	r23, r19
     884:	84 07       	cpc	r24, r20
     886:	95 07       	cpc	r25, r21
     888:	20 f0       	brcs	.+8      	; 0x892 <__addsf3x+0x1c>
     88a:	79 f4       	brne	.+30     	; 0x8aa <__addsf3x+0x34>
     88c:	a6 f5       	brtc	.+104    	; 0x8f6 <__addsf3x+0x80>
     88e:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_zero>
     892:	0e f4       	brtc	.+2      	; 0x896 <__addsf3x+0x20>
     894:	e0 95       	com	r30
     896:	0b 2e       	mov	r0, r27
     898:	ba 2f       	mov	r27, r26
     89a:	a0 2d       	mov	r26, r0
     89c:	0b 01       	movw	r0, r22
     89e:	b9 01       	movw	r22, r18
     8a0:	90 01       	movw	r18, r0
     8a2:	0c 01       	movw	r0, r24
     8a4:	ca 01       	movw	r24, r20
     8a6:	a0 01       	movw	r20, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	ff 27       	eor	r31, r31
     8ac:	59 1b       	sub	r21, r25
     8ae:	99 f0       	breq	.+38     	; 0x8d6 <__addsf3x+0x60>
     8b0:	59 3f       	cpi	r21, 0xF9	; 249
     8b2:	50 f4       	brcc	.+20     	; 0x8c8 <__addsf3x+0x52>
     8b4:	50 3e       	cpi	r21, 0xE0	; 224
     8b6:	68 f1       	brcs	.+90     	; 0x912 <__stack+0x13>
     8b8:	1a 16       	cp	r1, r26
     8ba:	f0 40       	sbci	r31, 0x00	; 0
     8bc:	a2 2f       	mov	r26, r18
     8be:	23 2f       	mov	r18, r19
     8c0:	34 2f       	mov	r19, r20
     8c2:	44 27       	eor	r20, r20
     8c4:	58 5f       	subi	r21, 0xF8	; 248
     8c6:	f3 cf       	rjmp	.-26     	; 0x8ae <__addsf3x+0x38>
     8c8:	46 95       	lsr	r20
     8ca:	37 95       	ror	r19
     8cc:	27 95       	ror	r18
     8ce:	a7 95       	ror	r26
     8d0:	f0 40       	sbci	r31, 0x00	; 0
     8d2:	53 95       	inc	r21
     8d4:	c9 f7       	brne	.-14     	; 0x8c8 <__addsf3x+0x52>
     8d6:	7e f4       	brtc	.+30     	; 0x8f6 <__addsf3x+0x80>
     8d8:	1f 16       	cp	r1, r31
     8da:	ba 0b       	sbc	r27, r26
     8dc:	62 0b       	sbc	r22, r18
     8de:	73 0b       	sbc	r23, r19
     8e0:	84 0b       	sbc	r24, r20
     8e2:	ba f0       	brmi	.+46     	; 0x912 <__stack+0x13>
     8e4:	91 50       	subi	r25, 0x01	; 1
     8e6:	a1 f0       	breq	.+40     	; 0x910 <__stack+0x11>
     8e8:	ff 0f       	add	r31, r31
     8ea:	bb 1f       	adc	r27, r27
     8ec:	66 1f       	adc	r22, r22
     8ee:	77 1f       	adc	r23, r23
     8f0:	88 1f       	adc	r24, r24
     8f2:	c2 f7       	brpl	.-16     	; 0x8e4 <__addsf3x+0x6e>
     8f4:	0e c0       	rjmp	.+28     	; 0x912 <__stack+0x13>
     8f6:	ba 0f       	add	r27, r26
     8f8:	62 1f       	adc	r22, r18
     8fa:	73 1f       	adc	r23, r19
     8fc:	84 1f       	adc	r24, r20
     8fe:	48 f4       	brcc	.+18     	; 0x912 <__stack+0x13>
     900:	87 95       	ror	r24
     902:	77 95       	ror	r23
     904:	67 95       	ror	r22
     906:	b7 95       	ror	r27
     908:	f7 95       	ror	r31
     90a:	9e 3f       	cpi	r25, 0xFE	; 254
     90c:	08 f0       	brcs	.+2      	; 0x910 <__stack+0x11>
     90e:	b0 cf       	rjmp	.-160    	; 0x870 <__addsf3+0x28>
     910:	93 95       	inc	r25
     912:	88 0f       	add	r24, r24
     914:	08 f0       	brcs	.+2      	; 0x918 <__stack+0x19>
     916:	99 27       	eor	r25, r25
     918:	ee 0f       	add	r30, r30
     91a:	97 95       	ror	r25
     91c:	87 95       	ror	r24
     91e:	08 95       	ret

00000920 <__divsf3>:
     920:	0e 94 a4 04 	call	0x948	; 0x948 <__divsf3x>
     924:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_round>
     928:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_pscB>
     92c:	58 f0       	brcs	.+22     	; 0x944 <__divsf3+0x24>
     92e:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscA>
     932:	40 f0       	brcs	.+16     	; 0x944 <__divsf3+0x24>
     934:	29 f4       	brne	.+10     	; 0x940 <__divsf3+0x20>
     936:	5f 3f       	cpi	r21, 0xFF	; 255
     938:	29 f0       	breq	.+10     	; 0x944 <__divsf3+0x24>
     93a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_inf>
     93e:	51 11       	cpse	r21, r1
     940:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_szero>
     944:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_nan>

00000948 <__divsf3x>:
     948:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fp_split3>
     94c:	68 f3       	brcs	.-38     	; 0x928 <__divsf3+0x8>

0000094e <__divsf3_pse>:
     94e:	99 23       	and	r25, r25
     950:	b1 f3       	breq	.-20     	; 0x93e <__divsf3+0x1e>
     952:	55 23       	and	r21, r21
     954:	91 f3       	breq	.-28     	; 0x93a <__divsf3+0x1a>
     956:	95 1b       	sub	r25, r21
     958:	55 0b       	sbc	r21, r21
     95a:	bb 27       	eor	r27, r27
     95c:	aa 27       	eor	r26, r26
     95e:	62 17       	cp	r22, r18
     960:	73 07       	cpc	r23, r19
     962:	84 07       	cpc	r24, r20
     964:	38 f0       	brcs	.+14     	; 0x974 <__divsf3_pse+0x26>
     966:	9f 5f       	subi	r25, 0xFF	; 255
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	22 0f       	add	r18, r18
     96c:	33 1f       	adc	r19, r19
     96e:	44 1f       	adc	r20, r20
     970:	aa 1f       	adc	r26, r26
     972:	a9 f3       	breq	.-22     	; 0x95e <__divsf3_pse+0x10>
     974:	35 d0       	rcall	.+106    	; 0x9e0 <__divsf3_pse+0x92>
     976:	0e 2e       	mov	r0, r30
     978:	3a f0       	brmi	.+14     	; 0x988 <__divsf3_pse+0x3a>
     97a:	e0 e8       	ldi	r30, 0x80	; 128
     97c:	32 d0       	rcall	.+100    	; 0x9e2 <__divsf3_pse+0x94>
     97e:	91 50       	subi	r25, 0x01	; 1
     980:	50 40       	sbci	r21, 0x00	; 0
     982:	e6 95       	lsr	r30
     984:	00 1c       	adc	r0, r0
     986:	ca f7       	brpl	.-14     	; 0x97a <__divsf3_pse+0x2c>
     988:	2b d0       	rcall	.+86     	; 0x9e0 <__divsf3_pse+0x92>
     98a:	fe 2f       	mov	r31, r30
     98c:	29 d0       	rcall	.+82     	; 0x9e0 <__divsf3_pse+0x92>
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	88 1f       	adc	r24, r24
     994:	bb 1f       	adc	r27, r27
     996:	26 17       	cp	r18, r22
     998:	37 07       	cpc	r19, r23
     99a:	48 07       	cpc	r20, r24
     99c:	ab 07       	cpc	r26, r27
     99e:	b0 e8       	ldi	r27, 0x80	; 128
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__divsf3_pse+0x56>
     9a2:	bb 0b       	sbc	r27, r27
     9a4:	80 2d       	mov	r24, r0
     9a6:	bf 01       	movw	r22, r30
     9a8:	ff 27       	eor	r31, r31
     9aa:	93 58       	subi	r25, 0x83	; 131
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	3a f0       	brmi	.+14     	; 0x9be <__divsf3_pse+0x70>
     9b0:	9e 3f       	cpi	r25, 0xFE	; 254
     9b2:	51 05       	cpc	r21, r1
     9b4:	78 f0       	brcs	.+30     	; 0x9d4 <__divsf3_pse+0x86>
     9b6:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_inf>
     9ba:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_szero>
     9be:	5f 3f       	cpi	r21, 0xFF	; 255
     9c0:	e4 f3       	brlt	.-8      	; 0x9ba <__divsf3_pse+0x6c>
     9c2:	98 3e       	cpi	r25, 0xE8	; 232
     9c4:	d4 f3       	brlt	.-12     	; 0x9ba <__divsf3_pse+0x6c>
     9c6:	86 95       	lsr	r24
     9c8:	77 95       	ror	r23
     9ca:	67 95       	ror	r22
     9cc:	b7 95       	ror	r27
     9ce:	f7 95       	ror	r31
     9d0:	9f 5f       	subi	r25, 0xFF	; 255
     9d2:	c9 f7       	brne	.-14     	; 0x9c6 <__divsf3_pse+0x78>
     9d4:	88 0f       	add	r24, r24
     9d6:	91 1d       	adc	r25, r1
     9d8:	96 95       	lsr	r25
     9da:	87 95       	ror	r24
     9dc:	97 f9       	bld	r25, 7
     9de:	08 95       	ret
     9e0:	e1 e0       	ldi	r30, 0x01	; 1
     9e2:	66 0f       	add	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	88 1f       	adc	r24, r24
     9e8:	bb 1f       	adc	r27, r27
     9ea:	62 17       	cp	r22, r18
     9ec:	73 07       	cpc	r23, r19
     9ee:	84 07       	cpc	r24, r20
     9f0:	ba 07       	cpc	r27, r26
     9f2:	20 f0       	brcs	.+8      	; 0x9fc <__divsf3_pse+0xae>
     9f4:	62 1b       	sub	r22, r18
     9f6:	73 0b       	sbc	r23, r19
     9f8:	84 0b       	sbc	r24, r20
     9fa:	ba 0b       	sbc	r27, r26
     9fc:	ee 1f       	adc	r30, r30
     9fe:	88 f7       	brcc	.-30     	; 0x9e2 <__divsf3_pse+0x94>
     a00:	e0 95       	com	r30
     a02:	08 95       	ret

00000a04 <__fixunssfsi>:
     a04:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_splitA>
     a08:	88 f0       	brcs	.+34     	; 0xa2c <__fixunssfsi+0x28>
     a0a:	9f 57       	subi	r25, 0x7F	; 127
     a0c:	98 f0       	brcs	.+38     	; 0xa34 <__fixunssfsi+0x30>
     a0e:	b9 2f       	mov	r27, r25
     a10:	99 27       	eor	r25, r25
     a12:	b7 51       	subi	r27, 0x17	; 23
     a14:	b0 f0       	brcs	.+44     	; 0xa42 <__fixunssfsi+0x3e>
     a16:	e1 f0       	breq	.+56     	; 0xa50 <__fixunssfsi+0x4c>
     a18:	66 0f       	add	r22, r22
     a1a:	77 1f       	adc	r23, r23
     a1c:	88 1f       	adc	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	1a f0       	brmi	.+6      	; 0xa28 <__fixunssfsi+0x24>
     a22:	ba 95       	dec	r27
     a24:	c9 f7       	brne	.-14     	; 0xa18 <__fixunssfsi+0x14>
     a26:	14 c0       	rjmp	.+40     	; 0xa50 <__fixunssfsi+0x4c>
     a28:	b1 30       	cpi	r27, 0x01	; 1
     a2a:	91 f0       	breq	.+36     	; 0xa50 <__fixunssfsi+0x4c>
     a2c:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_zero>
     a30:	b1 e0       	ldi	r27, 0x01	; 1
     a32:	08 95       	ret
     a34:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_zero>
     a38:	67 2f       	mov	r22, r23
     a3a:	78 2f       	mov	r23, r24
     a3c:	88 27       	eor	r24, r24
     a3e:	b8 5f       	subi	r27, 0xF8	; 248
     a40:	39 f0       	breq	.+14     	; 0xa50 <__fixunssfsi+0x4c>
     a42:	b9 3f       	cpi	r27, 0xF9	; 249
     a44:	cc f3       	brlt	.-14     	; 0xa38 <__fixunssfsi+0x34>
     a46:	86 95       	lsr	r24
     a48:	77 95       	ror	r23
     a4a:	67 95       	ror	r22
     a4c:	b3 95       	inc	r27
     a4e:	d9 f7       	brne	.-10     	; 0xa46 <__fixunssfsi+0x42>
     a50:	3e f4       	brtc	.+14     	; 0xa60 <__fixunssfsi+0x5c>
     a52:	90 95       	com	r25
     a54:	80 95       	com	r24
     a56:	70 95       	com	r23
     a58:	61 95       	neg	r22
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	8f 4f       	sbci	r24, 0xFF	; 255
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	08 95       	ret

00000a62 <__floatunsisf>:
     a62:	e8 94       	clt
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <__floatsisf+0x12>

00000a66 <__floatsisf>:
     a66:	97 fb       	bst	r25, 7
     a68:	3e f4       	brtc	.+14     	; 0xa78 <__floatsisf+0x12>
     a6a:	90 95       	com	r25
     a6c:	80 95       	com	r24
     a6e:	70 95       	com	r23
     a70:	61 95       	neg	r22
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	8f 4f       	sbci	r24, 0xFF	; 255
     a76:	9f 4f       	sbci	r25, 0xFF	; 255
     a78:	99 23       	and	r25, r25
     a7a:	a9 f0       	breq	.+42     	; 0xaa6 <__floatsisf+0x40>
     a7c:	f9 2f       	mov	r31, r25
     a7e:	96 e9       	ldi	r25, 0x96	; 150
     a80:	bb 27       	eor	r27, r27
     a82:	93 95       	inc	r25
     a84:	f6 95       	lsr	r31
     a86:	87 95       	ror	r24
     a88:	77 95       	ror	r23
     a8a:	67 95       	ror	r22
     a8c:	b7 95       	ror	r27
     a8e:	f1 11       	cpse	r31, r1
     a90:	f8 cf       	rjmp	.-16     	; 0xa82 <__floatsisf+0x1c>
     a92:	fa f4       	brpl	.+62     	; 0xad2 <__floatsisf+0x6c>
     a94:	bb 0f       	add	r27, r27
     a96:	11 f4       	brne	.+4      	; 0xa9c <__floatsisf+0x36>
     a98:	60 ff       	sbrs	r22, 0
     a9a:	1b c0       	rjmp	.+54     	; 0xad2 <__floatsisf+0x6c>
     a9c:	6f 5f       	subi	r22, 0xFF	; 255
     a9e:	7f 4f       	sbci	r23, 0xFF	; 255
     aa0:	8f 4f       	sbci	r24, 0xFF	; 255
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	16 c0       	rjmp	.+44     	; 0xad2 <__floatsisf+0x6c>
     aa6:	88 23       	and	r24, r24
     aa8:	11 f0       	breq	.+4      	; 0xaae <__floatsisf+0x48>
     aaa:	96 e9       	ldi	r25, 0x96	; 150
     aac:	11 c0       	rjmp	.+34     	; 0xad0 <__floatsisf+0x6a>
     aae:	77 23       	and	r23, r23
     ab0:	21 f0       	breq	.+8      	; 0xaba <__floatsisf+0x54>
     ab2:	9e e8       	ldi	r25, 0x8E	; 142
     ab4:	87 2f       	mov	r24, r23
     ab6:	76 2f       	mov	r23, r22
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <__floatsisf+0x5e>
     aba:	66 23       	and	r22, r22
     abc:	71 f0       	breq	.+28     	; 0xada <__floatsisf+0x74>
     abe:	96 e8       	ldi	r25, 0x86	; 134
     ac0:	86 2f       	mov	r24, r22
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	2a f0       	brmi	.+10     	; 0xad2 <__floatsisf+0x6c>
     ac8:	9a 95       	dec	r25
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	88 1f       	adc	r24, r24
     ad0:	da f7       	brpl	.-10     	; 0xac8 <__floatsisf+0x62>
     ad2:	88 0f       	add	r24, r24
     ad4:	96 95       	lsr	r25
     ad6:	87 95       	ror	r24
     ad8:	97 f9       	bld	r25, 7
     ada:	08 95       	ret

00000adc <__fp_inf>:
     adc:	97 f9       	bld	r25, 7
     ade:	9f 67       	ori	r25, 0x7F	; 127
     ae0:	80 e8       	ldi	r24, 0x80	; 128
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	08 95       	ret

00000ae8 <__fp_nan>:
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	80 ec       	ldi	r24, 0xC0	; 192
     aec:	08 95       	ret

00000aee <__fp_pscA>:
     aee:	00 24       	eor	r0, r0
     af0:	0a 94       	dec	r0
     af2:	16 16       	cp	r1, r22
     af4:	17 06       	cpc	r1, r23
     af6:	18 06       	cpc	r1, r24
     af8:	09 06       	cpc	r0, r25
     afa:	08 95       	ret

00000afc <__fp_pscB>:
     afc:	00 24       	eor	r0, r0
     afe:	0a 94       	dec	r0
     b00:	12 16       	cp	r1, r18
     b02:	13 06       	cpc	r1, r19
     b04:	14 06       	cpc	r1, r20
     b06:	05 06       	cpc	r0, r21
     b08:	08 95       	ret

00000b0a <__fp_round>:
     b0a:	09 2e       	mov	r0, r25
     b0c:	03 94       	inc	r0
     b0e:	00 0c       	add	r0, r0
     b10:	11 f4       	brne	.+4      	; 0xb16 <__fp_round+0xc>
     b12:	88 23       	and	r24, r24
     b14:	52 f0       	brmi	.+20     	; 0xb2a <__fp_round+0x20>
     b16:	bb 0f       	add	r27, r27
     b18:	40 f4       	brcc	.+16     	; 0xb2a <__fp_round+0x20>
     b1a:	bf 2b       	or	r27, r31
     b1c:	11 f4       	brne	.+4      	; 0xb22 <__fp_round+0x18>
     b1e:	60 ff       	sbrs	r22, 0
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <__fp_round+0x20>
     b22:	6f 5f       	subi	r22, 0xFF	; 255
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	8f 4f       	sbci	r24, 0xFF	; 255
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	08 95       	ret

00000b2c <__fp_split3>:
     b2c:	57 fd       	sbrc	r21, 7
     b2e:	90 58       	subi	r25, 0x80	; 128
     b30:	44 0f       	add	r20, r20
     b32:	55 1f       	adc	r21, r21
     b34:	59 f0       	breq	.+22     	; 0xb4c <__fp_splitA+0x10>
     b36:	5f 3f       	cpi	r21, 0xFF	; 255
     b38:	71 f0       	breq	.+28     	; 0xb56 <__fp_splitA+0x1a>
     b3a:	47 95       	ror	r20

00000b3c <__fp_splitA>:
     b3c:	88 0f       	add	r24, r24
     b3e:	97 fb       	bst	r25, 7
     b40:	99 1f       	adc	r25, r25
     b42:	61 f0       	breq	.+24     	; 0xb5c <__fp_splitA+0x20>
     b44:	9f 3f       	cpi	r25, 0xFF	; 255
     b46:	79 f0       	breq	.+30     	; 0xb66 <__fp_splitA+0x2a>
     b48:	87 95       	ror	r24
     b4a:	08 95       	ret
     b4c:	12 16       	cp	r1, r18
     b4e:	13 06       	cpc	r1, r19
     b50:	14 06       	cpc	r1, r20
     b52:	55 1f       	adc	r21, r21
     b54:	f2 cf       	rjmp	.-28     	; 0xb3a <__fp_split3+0xe>
     b56:	46 95       	lsr	r20
     b58:	f1 df       	rcall	.-30     	; 0xb3c <__fp_splitA>
     b5a:	08 c0       	rjmp	.+16     	; 0xb6c <__fp_splitA+0x30>
     b5c:	16 16       	cp	r1, r22
     b5e:	17 06       	cpc	r1, r23
     b60:	18 06       	cpc	r1, r24
     b62:	99 1f       	adc	r25, r25
     b64:	f1 cf       	rjmp	.-30     	; 0xb48 <__fp_splitA+0xc>
     b66:	86 95       	lsr	r24
     b68:	71 05       	cpc	r23, r1
     b6a:	61 05       	cpc	r22, r1
     b6c:	08 94       	sec
     b6e:	08 95       	ret

00000b70 <__fp_zero>:
     b70:	e8 94       	clt

00000b72 <__fp_szero>:
     b72:	bb 27       	eor	r27, r27
     b74:	66 27       	eor	r22, r22
     b76:	77 27       	eor	r23, r23
     b78:	cb 01       	movw	r24, r22
     b7a:	97 f9       	bld	r25, 7
     b7c:	08 95       	ret

00000b7e <__mulsf3>:
     b7e:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3x>
     b82:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_round>
     b86:	0e 94 77 05 	call	0xaee	; 0xaee <__fp_pscA>
     b8a:	38 f0       	brcs	.+14     	; 0xb9a <__mulsf3+0x1c>
     b8c:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_pscB>
     b90:	20 f0       	brcs	.+8      	; 0xb9a <__mulsf3+0x1c>
     b92:	95 23       	and	r25, r21
     b94:	11 f0       	breq	.+4      	; 0xb9a <__mulsf3+0x1c>
     b96:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_inf>
     b9a:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_nan>
     b9e:	11 24       	eor	r1, r1
     ba0:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_szero>

00000ba4 <__mulsf3x>:
     ba4:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fp_split3>
     ba8:	70 f3       	brcs	.-36     	; 0xb86 <__mulsf3+0x8>

00000baa <__mulsf3_pse>:
     baa:	95 9f       	mul	r25, r21
     bac:	c1 f3       	breq	.-16     	; 0xb9e <__mulsf3+0x20>
     bae:	95 0f       	add	r25, r21
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	55 1f       	adc	r21, r21
     bb4:	62 9f       	mul	r22, r18
     bb6:	f0 01       	movw	r30, r0
     bb8:	72 9f       	mul	r23, r18
     bba:	bb 27       	eor	r27, r27
     bbc:	f0 0d       	add	r31, r0
     bbe:	b1 1d       	adc	r27, r1
     bc0:	63 9f       	mul	r22, r19
     bc2:	aa 27       	eor	r26, r26
     bc4:	f0 0d       	add	r31, r0
     bc6:	b1 1d       	adc	r27, r1
     bc8:	aa 1f       	adc	r26, r26
     bca:	64 9f       	mul	r22, r20
     bcc:	66 27       	eor	r22, r22
     bce:	b0 0d       	add	r27, r0
     bd0:	a1 1d       	adc	r26, r1
     bd2:	66 1f       	adc	r22, r22
     bd4:	82 9f       	mul	r24, r18
     bd6:	22 27       	eor	r18, r18
     bd8:	b0 0d       	add	r27, r0
     bda:	a1 1d       	adc	r26, r1
     bdc:	62 1f       	adc	r22, r18
     bde:	73 9f       	mul	r23, r19
     be0:	b0 0d       	add	r27, r0
     be2:	a1 1d       	adc	r26, r1
     be4:	62 1f       	adc	r22, r18
     be6:	83 9f       	mul	r24, r19
     be8:	a0 0d       	add	r26, r0
     bea:	61 1d       	adc	r22, r1
     bec:	22 1f       	adc	r18, r18
     bee:	74 9f       	mul	r23, r20
     bf0:	33 27       	eor	r19, r19
     bf2:	a0 0d       	add	r26, r0
     bf4:	61 1d       	adc	r22, r1
     bf6:	23 1f       	adc	r18, r19
     bf8:	84 9f       	mul	r24, r20
     bfa:	60 0d       	add	r22, r0
     bfc:	21 1d       	adc	r18, r1
     bfe:	82 2f       	mov	r24, r18
     c00:	76 2f       	mov	r23, r22
     c02:	6a 2f       	mov	r22, r26
     c04:	11 24       	eor	r1, r1
     c06:	9f 57       	subi	r25, 0x7F	; 127
     c08:	50 40       	sbci	r21, 0x00	; 0
     c0a:	9a f0       	brmi	.+38     	; 0xc32 <__mulsf3_pse+0x88>
     c0c:	f1 f0       	breq	.+60     	; 0xc4a <__mulsf3_pse+0xa0>
     c0e:	88 23       	and	r24, r24
     c10:	4a f0       	brmi	.+18     	; 0xc24 <__mulsf3_pse+0x7a>
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	bb 1f       	adc	r27, r27
     c18:	66 1f       	adc	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	88 1f       	adc	r24, r24
     c1e:	91 50       	subi	r25, 0x01	; 1
     c20:	50 40       	sbci	r21, 0x00	; 0
     c22:	a9 f7       	brne	.-22     	; 0xc0e <__mulsf3_pse+0x64>
     c24:	9e 3f       	cpi	r25, 0xFE	; 254
     c26:	51 05       	cpc	r21, r1
     c28:	80 f0       	brcs	.+32     	; 0xc4a <__mulsf3_pse+0xa0>
     c2a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_inf>
     c2e:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_szero>
     c32:	5f 3f       	cpi	r21, 0xFF	; 255
     c34:	e4 f3       	brlt	.-8      	; 0xc2e <__mulsf3_pse+0x84>
     c36:	98 3e       	cpi	r25, 0xE8	; 232
     c38:	d4 f3       	brlt	.-12     	; 0xc2e <__mulsf3_pse+0x84>
     c3a:	86 95       	lsr	r24
     c3c:	77 95       	ror	r23
     c3e:	67 95       	ror	r22
     c40:	b7 95       	ror	r27
     c42:	f7 95       	ror	r31
     c44:	e7 95       	ror	r30
     c46:	9f 5f       	subi	r25, 0xFF	; 255
     c48:	c1 f7       	brne	.-16     	; 0xc3a <__mulsf3_pse+0x90>
     c4a:	fe 2b       	or	r31, r30
     c4c:	88 0f       	add	r24, r24
     c4e:	91 1d       	adc	r25, r1
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	97 f9       	bld	r25, 7
     c56:	08 95       	ret

00000c58 <printf>:
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e2 e3       	ldi	r30, 0x32	; 50
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__prologue_saves__+0x20>
     c64:	ae 01       	movw	r20, r28
     c66:	4b 5f       	subi	r20, 0xFB	; 251
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	fa 01       	movw	r30, r20
     c6c:	61 91       	ld	r22, Z+
     c6e:	71 91       	ld	r23, Z+
     c70:	af 01       	movw	r20, r30
     c72:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <__iob+0x2>
     c76:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <__iob+0x3>
     c7a:	0e 94 72 06 	call	0xce4	; 0xce4 <vfprintf>
     c7e:	e2 e0       	ldi	r30, 0x02	; 2
     c80:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__epilogue_restores__+0x20>

00000c84 <puts>:
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <__iob+0x2>
     c90:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <__iob+0x3>
     c94:	23 81       	ldd	r18, Z+3	; 0x03
     c96:	21 ff       	sbrs	r18, 1
     c98:	1b c0       	rjmp	.+54     	; 0xcd0 <puts+0x4c>
     c9a:	8c 01       	movw	r16, r24
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
     ca0:	f8 01       	movw	r30, r16
     ca2:	81 91       	ld	r24, Z+
     ca4:	8f 01       	movw	r16, r30
     ca6:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <__iob+0x2>
     caa:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <__iob+0x3>
     cae:	db 01       	movw	r26, r22
     cb0:	18 96       	adiw	r26, 0x08	; 8
     cb2:	ed 91       	ld	r30, X+
     cb4:	fc 91       	ld	r31, X
     cb6:	19 97       	sbiw	r26, 0x09	; 9
     cb8:	88 23       	and	r24, r24
     cba:	31 f0       	breq	.+12     	; 0xcc8 <puts+0x44>
     cbc:	09 95       	icall
     cbe:	89 2b       	or	r24, r25
     cc0:	79 f3       	breq	.-34     	; 0xca0 <puts+0x1c>
     cc2:	df ef       	ldi	r29, 0xFF	; 255
     cc4:	cf ef       	ldi	r28, 0xFF	; 255
     cc6:	ec cf       	rjmp	.-40     	; 0xca0 <puts+0x1c>
     cc8:	8a e0       	ldi	r24, 0x0A	; 10
     cca:	09 95       	icall
     ccc:	89 2b       	or	r24, r25
     cce:	19 f0       	breq	.+6      	; 0xcd6 <puts+0x52>
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	9f ef       	ldi	r25, 0xFF	; 255
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <puts+0x56>
     cd6:	8d 2f       	mov	r24, r29
     cd8:	9c 2f       	mov	r25, r28
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <vfprintf>:
     ce4:	ab e0       	ldi	r26, 0x0B	; 11
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e8 e7       	ldi	r30, 0x78	; 120
     cea:	f6 e0       	ldi	r31, 0x06	; 6
     cec:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__prologue_saves__>
     cf0:	6c 01       	movw	r12, r24
     cf2:	7b 01       	movw	r14, r22
     cf4:	8a 01       	movw	r16, r20
     cf6:	fc 01       	movw	r30, r24
     cf8:	17 82       	std	Z+7, r1	; 0x07
     cfa:	16 82       	std	Z+6, r1	; 0x06
     cfc:	83 81       	ldd	r24, Z+3	; 0x03
     cfe:	81 ff       	sbrs	r24, 1
     d00:	cc c1       	rjmp	.+920    	; 0x109a <vfprintf+0x3b6>
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	3c 01       	movw	r6, r24
     d08:	f6 01       	movw	r30, r12
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	f7 01       	movw	r30, r14
     d0e:	93 fd       	sbrc	r25, 3
     d10:	85 91       	lpm	r24, Z+
     d12:	93 ff       	sbrs	r25, 3
     d14:	81 91       	ld	r24, Z+
     d16:	7f 01       	movw	r14, r30
     d18:	88 23       	and	r24, r24
     d1a:	09 f4       	brne	.+2      	; 0xd1e <vfprintf+0x3a>
     d1c:	ba c1       	rjmp	.+884    	; 0x1092 <vfprintf+0x3ae>
     d1e:	85 32       	cpi	r24, 0x25	; 37
     d20:	39 f4       	brne	.+14     	; 0xd30 <vfprintf+0x4c>
     d22:	93 fd       	sbrc	r25, 3
     d24:	85 91       	lpm	r24, Z+
     d26:	93 ff       	sbrs	r25, 3
     d28:	81 91       	ld	r24, Z+
     d2a:	7f 01       	movw	r14, r30
     d2c:	85 32       	cpi	r24, 0x25	; 37
     d2e:	29 f4       	brne	.+10     	; 0xd3a <vfprintf+0x56>
     d30:	b6 01       	movw	r22, r12
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
     d38:	e7 cf       	rjmp	.-50     	; 0xd08 <vfprintf+0x24>
     d3a:	91 2c       	mov	r9, r1
     d3c:	21 2c       	mov	r2, r1
     d3e:	31 2c       	mov	r3, r1
     d40:	ff e1       	ldi	r31, 0x1F	; 31
     d42:	f3 15       	cp	r31, r3
     d44:	d8 f0       	brcs	.+54     	; 0xd7c <vfprintf+0x98>
     d46:	8b 32       	cpi	r24, 0x2B	; 43
     d48:	79 f0       	breq	.+30     	; 0xd68 <vfprintf+0x84>
     d4a:	38 f4       	brcc	.+14     	; 0xd5a <vfprintf+0x76>
     d4c:	80 32       	cpi	r24, 0x20	; 32
     d4e:	79 f0       	breq	.+30     	; 0xd6e <vfprintf+0x8a>
     d50:	83 32       	cpi	r24, 0x23	; 35
     d52:	a1 f4       	brne	.+40     	; 0xd7c <vfprintf+0x98>
     d54:	23 2d       	mov	r18, r3
     d56:	20 61       	ori	r18, 0x10	; 16
     d58:	1d c0       	rjmp	.+58     	; 0xd94 <vfprintf+0xb0>
     d5a:	8d 32       	cpi	r24, 0x2D	; 45
     d5c:	61 f0       	breq	.+24     	; 0xd76 <vfprintf+0x92>
     d5e:	80 33       	cpi	r24, 0x30	; 48
     d60:	69 f4       	brne	.+26     	; 0xd7c <vfprintf+0x98>
     d62:	23 2d       	mov	r18, r3
     d64:	21 60       	ori	r18, 0x01	; 1
     d66:	16 c0       	rjmp	.+44     	; 0xd94 <vfprintf+0xb0>
     d68:	83 2d       	mov	r24, r3
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	38 2e       	mov	r3, r24
     d6e:	e3 2d       	mov	r30, r3
     d70:	e4 60       	ori	r30, 0x04	; 4
     d72:	3e 2e       	mov	r3, r30
     d74:	2a c0       	rjmp	.+84     	; 0xdca <vfprintf+0xe6>
     d76:	f3 2d       	mov	r31, r3
     d78:	f8 60       	ori	r31, 0x08	; 8
     d7a:	1d c0       	rjmp	.+58     	; 0xdb6 <vfprintf+0xd2>
     d7c:	37 fc       	sbrc	r3, 7
     d7e:	2d c0       	rjmp	.+90     	; 0xdda <vfprintf+0xf6>
     d80:	20 ed       	ldi	r18, 0xD0	; 208
     d82:	28 0f       	add	r18, r24
     d84:	2a 30       	cpi	r18, 0x0A	; 10
     d86:	40 f0       	brcs	.+16     	; 0xd98 <vfprintf+0xb4>
     d88:	8e 32       	cpi	r24, 0x2E	; 46
     d8a:	b9 f4       	brne	.+46     	; 0xdba <vfprintf+0xd6>
     d8c:	36 fc       	sbrc	r3, 6
     d8e:	81 c1       	rjmp	.+770    	; 0x1092 <vfprintf+0x3ae>
     d90:	23 2d       	mov	r18, r3
     d92:	20 64       	ori	r18, 0x40	; 64
     d94:	32 2e       	mov	r3, r18
     d96:	19 c0       	rjmp	.+50     	; 0xdca <vfprintf+0xe6>
     d98:	36 fe       	sbrs	r3, 6
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0xc4>
     d9c:	8a e0       	ldi	r24, 0x0A	; 10
     d9e:	98 9e       	mul	r9, r24
     da0:	20 0d       	add	r18, r0
     da2:	11 24       	eor	r1, r1
     da4:	92 2e       	mov	r9, r18
     da6:	11 c0       	rjmp	.+34     	; 0xdca <vfprintf+0xe6>
     da8:	ea e0       	ldi	r30, 0x0A	; 10
     daa:	2e 9e       	mul	r2, r30
     dac:	20 0d       	add	r18, r0
     dae:	11 24       	eor	r1, r1
     db0:	22 2e       	mov	r2, r18
     db2:	f3 2d       	mov	r31, r3
     db4:	f0 62       	ori	r31, 0x20	; 32
     db6:	3f 2e       	mov	r3, r31
     db8:	08 c0       	rjmp	.+16     	; 0xdca <vfprintf+0xe6>
     dba:	8c 36       	cpi	r24, 0x6C	; 108
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <vfprintf+0xe2>
     dbe:	83 2d       	mov	r24, r3
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	38 2e       	mov	r3, r24
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <vfprintf+0xe6>
     dc6:	88 36       	cpi	r24, 0x68	; 104
     dc8:	41 f4       	brne	.+16     	; 0xdda <vfprintf+0xf6>
     dca:	f7 01       	movw	r30, r14
     dcc:	93 fd       	sbrc	r25, 3
     dce:	85 91       	lpm	r24, Z+
     dd0:	93 ff       	sbrs	r25, 3
     dd2:	81 91       	ld	r24, Z+
     dd4:	7f 01       	movw	r14, r30
     dd6:	81 11       	cpse	r24, r1
     dd8:	b3 cf       	rjmp	.-154    	; 0xd40 <vfprintf+0x5c>
     dda:	98 2f       	mov	r25, r24
     ddc:	9f 7d       	andi	r25, 0xDF	; 223
     dde:	95 54       	subi	r25, 0x45	; 69
     de0:	93 30       	cpi	r25, 0x03	; 3
     de2:	28 f4       	brcc	.+10     	; 0xdee <vfprintf+0x10a>
     de4:	0c 5f       	subi	r16, 0xFC	; 252
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	9f e3       	ldi	r25, 0x3F	; 63
     dea:	99 83       	std	Y+1, r25	; 0x01
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <vfprintf+0x124>
     dee:	83 36       	cpi	r24, 0x63	; 99
     df0:	31 f0       	breq	.+12     	; 0xdfe <vfprintf+0x11a>
     df2:	83 37       	cpi	r24, 0x73	; 115
     df4:	71 f0       	breq	.+28     	; 0xe12 <vfprintf+0x12e>
     df6:	83 35       	cpi	r24, 0x53	; 83
     df8:	09 f0       	breq	.+2      	; 0xdfc <vfprintf+0x118>
     dfa:	59 c0       	rjmp	.+178    	; 0xeae <vfprintf+0x1ca>
     dfc:	21 c0       	rjmp	.+66     	; 0xe40 <vfprintf+0x15c>
     dfe:	f8 01       	movw	r30, r16
     e00:	80 81       	ld	r24, Z
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	0e 5f       	subi	r16, 0xFE	; 254
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	88 24       	eor	r8, r8
     e0a:	83 94       	inc	r8
     e0c:	91 2c       	mov	r9, r1
     e0e:	53 01       	movw	r10, r6
     e10:	13 c0       	rjmp	.+38     	; 0xe38 <vfprintf+0x154>
     e12:	28 01       	movw	r4, r16
     e14:	f2 e0       	ldi	r31, 0x02	; 2
     e16:	4f 0e       	add	r4, r31
     e18:	51 1c       	adc	r5, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	a0 80       	ld	r10, Z
     e1e:	b1 80       	ldd	r11, Z+1	; 0x01
     e20:	36 fe       	sbrs	r3, 6
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x146>
     e24:	69 2d       	mov	r22, r9
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x14a>
     e2a:	6f ef       	ldi	r22, 0xFF	; 255
     e2c:	7f ef       	ldi	r23, 0xFF	; 255
     e2e:	c5 01       	movw	r24, r10
     e30:	0e 94 5e 08 	call	0x10bc	; 0x10bc <strnlen>
     e34:	4c 01       	movw	r8, r24
     e36:	82 01       	movw	r16, r4
     e38:	f3 2d       	mov	r31, r3
     e3a:	ff 77       	andi	r31, 0x7F	; 127
     e3c:	3f 2e       	mov	r3, r31
     e3e:	16 c0       	rjmp	.+44     	; 0xe6c <vfprintf+0x188>
     e40:	28 01       	movw	r4, r16
     e42:	22 e0       	ldi	r18, 0x02	; 2
     e44:	42 0e       	add	r4, r18
     e46:	51 1c       	adc	r5, r1
     e48:	f8 01       	movw	r30, r16
     e4a:	a0 80       	ld	r10, Z
     e4c:	b1 80       	ldd	r11, Z+1	; 0x01
     e4e:	36 fe       	sbrs	r3, 6
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <vfprintf+0x174>
     e52:	69 2d       	mov	r22, r9
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0x178>
     e58:	6f ef       	ldi	r22, 0xFF	; 255
     e5a:	7f ef       	ldi	r23, 0xFF	; 255
     e5c:	c5 01       	movw	r24, r10
     e5e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <strnlen_P>
     e62:	4c 01       	movw	r8, r24
     e64:	f3 2d       	mov	r31, r3
     e66:	f0 68       	ori	r31, 0x80	; 128
     e68:	3f 2e       	mov	r3, r31
     e6a:	82 01       	movw	r16, r4
     e6c:	33 fc       	sbrc	r3, 3
     e6e:	1b c0       	rjmp	.+54     	; 0xea6 <vfprintf+0x1c2>
     e70:	82 2d       	mov	r24, r2
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	88 16       	cp	r8, r24
     e76:	99 06       	cpc	r9, r25
     e78:	b0 f4       	brcc	.+44     	; 0xea6 <vfprintf+0x1c2>
     e7a:	b6 01       	movw	r22, r12
     e7c:	80 e2       	ldi	r24, 0x20	; 32
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
     e84:	2a 94       	dec	r2
     e86:	f4 cf       	rjmp	.-24     	; 0xe70 <vfprintf+0x18c>
     e88:	f5 01       	movw	r30, r10
     e8a:	37 fc       	sbrc	r3, 7
     e8c:	85 91       	lpm	r24, Z+
     e8e:	37 fe       	sbrs	r3, 7
     e90:	81 91       	ld	r24, Z+
     e92:	5f 01       	movw	r10, r30
     e94:	b6 01       	movw	r22, r12
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
     e9c:	21 10       	cpse	r2, r1
     e9e:	2a 94       	dec	r2
     ea0:	21 e0       	ldi	r18, 0x01	; 1
     ea2:	82 1a       	sub	r8, r18
     ea4:	91 08       	sbc	r9, r1
     ea6:	81 14       	cp	r8, r1
     ea8:	91 04       	cpc	r9, r1
     eaa:	71 f7       	brne	.-36     	; 0xe88 <vfprintf+0x1a4>
     eac:	e8 c0       	rjmp	.+464    	; 0x107e <vfprintf+0x39a>
     eae:	84 36       	cpi	r24, 0x64	; 100
     eb0:	11 f0       	breq	.+4      	; 0xeb6 <vfprintf+0x1d2>
     eb2:	89 36       	cpi	r24, 0x69	; 105
     eb4:	41 f5       	brne	.+80     	; 0xf06 <vfprintf+0x222>
     eb6:	f8 01       	movw	r30, r16
     eb8:	37 fe       	sbrs	r3, 7
     eba:	07 c0       	rjmp	.+14     	; 0xeca <vfprintf+0x1e6>
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	0c 5f       	subi	r16, 0xFC	; 252
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <vfprintf+0x1f6>
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	07 2e       	mov	r0, r23
     ed0:	00 0c       	add	r0, r0
     ed2:	88 0b       	sbc	r24, r24
     ed4:	99 0b       	sbc	r25, r25
     ed6:	0e 5f       	subi	r16, 0xFE	; 254
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	f3 2d       	mov	r31, r3
     edc:	ff 76       	andi	r31, 0x6F	; 111
     ede:	3f 2e       	mov	r3, r31
     ee0:	97 ff       	sbrs	r25, 7
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <vfprintf+0x212>
     ee4:	90 95       	com	r25
     ee6:	80 95       	com	r24
     ee8:	70 95       	com	r23
     eea:	61 95       	neg	r22
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	f0 68       	ori	r31, 0x80	; 128
     ef4:	3f 2e       	mov	r3, r31
     ef6:	2a e0       	ldi	r18, 0x0A	; 10
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	a3 01       	movw	r20, r6
     efc:	0e 94 a5 08 	call	0x114a	; 0x114a <__ultoa_invert>
     f00:	88 2e       	mov	r8, r24
     f02:	86 18       	sub	r8, r6
     f04:	45 c0       	rjmp	.+138    	; 0xf90 <vfprintf+0x2ac>
     f06:	85 37       	cpi	r24, 0x75	; 117
     f08:	31 f4       	brne	.+12     	; 0xf16 <vfprintf+0x232>
     f0a:	23 2d       	mov	r18, r3
     f0c:	2f 7e       	andi	r18, 0xEF	; 239
     f0e:	b2 2e       	mov	r11, r18
     f10:	2a e0       	ldi	r18, 0x0A	; 10
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	25 c0       	rjmp	.+74     	; 0xf60 <vfprintf+0x27c>
     f16:	93 2d       	mov	r25, r3
     f18:	99 7f       	andi	r25, 0xF9	; 249
     f1a:	b9 2e       	mov	r11, r25
     f1c:	8f 36       	cpi	r24, 0x6F	; 111
     f1e:	c1 f0       	breq	.+48     	; 0xf50 <vfprintf+0x26c>
     f20:	18 f4       	brcc	.+6      	; 0xf28 <vfprintf+0x244>
     f22:	88 35       	cpi	r24, 0x58	; 88
     f24:	79 f0       	breq	.+30     	; 0xf44 <vfprintf+0x260>
     f26:	b5 c0       	rjmp	.+362    	; 0x1092 <vfprintf+0x3ae>
     f28:	80 37       	cpi	r24, 0x70	; 112
     f2a:	19 f0       	breq	.+6      	; 0xf32 <vfprintf+0x24e>
     f2c:	88 37       	cpi	r24, 0x78	; 120
     f2e:	21 f0       	breq	.+8      	; 0xf38 <vfprintf+0x254>
     f30:	b0 c0       	rjmp	.+352    	; 0x1092 <vfprintf+0x3ae>
     f32:	e9 2f       	mov	r30, r25
     f34:	e0 61       	ori	r30, 0x10	; 16
     f36:	be 2e       	mov	r11, r30
     f38:	b4 fe       	sbrs	r11, 4
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <vfprintf+0x272>
     f3c:	fb 2d       	mov	r31, r11
     f3e:	f4 60       	ori	r31, 0x04	; 4
     f40:	bf 2e       	mov	r11, r31
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <vfprintf+0x272>
     f44:	34 fe       	sbrs	r3, 4
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <vfprintf+0x278>
     f48:	29 2f       	mov	r18, r25
     f4a:	26 60       	ori	r18, 0x06	; 6
     f4c:	b2 2e       	mov	r11, r18
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0x278>
     f50:	28 e0       	ldi	r18, 0x08	; 8
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <vfprintf+0x27c>
     f56:	20 e1       	ldi	r18, 0x10	; 16
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x27c>
     f5c:	20 e1       	ldi	r18, 0x10	; 16
     f5e:	32 e0       	ldi	r19, 0x02	; 2
     f60:	f8 01       	movw	r30, r16
     f62:	b7 fe       	sbrs	r11, 7
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <vfprintf+0x290>
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	0c 5f       	subi	r16, 0xFC	; 252
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x29c>
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 5f       	subi	r16, 0xFE	; 254
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	a3 01       	movw	r20, r6
     f82:	0e 94 a5 08 	call	0x114a	; 0x114a <__ultoa_invert>
     f86:	88 2e       	mov	r8, r24
     f88:	86 18       	sub	r8, r6
     f8a:	fb 2d       	mov	r31, r11
     f8c:	ff 77       	andi	r31, 0x7F	; 127
     f8e:	3f 2e       	mov	r3, r31
     f90:	36 fe       	sbrs	r3, 6
     f92:	0d c0       	rjmp	.+26     	; 0xfae <vfprintf+0x2ca>
     f94:	23 2d       	mov	r18, r3
     f96:	2e 7f       	andi	r18, 0xFE	; 254
     f98:	a2 2e       	mov	r10, r18
     f9a:	89 14       	cp	r8, r9
     f9c:	58 f4       	brcc	.+22     	; 0xfb4 <vfprintf+0x2d0>
     f9e:	34 fe       	sbrs	r3, 4
     fa0:	0b c0       	rjmp	.+22     	; 0xfb8 <vfprintf+0x2d4>
     fa2:	32 fc       	sbrc	r3, 2
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <vfprintf+0x2d4>
     fa6:	83 2d       	mov	r24, r3
     fa8:	8e 7e       	andi	r24, 0xEE	; 238
     faa:	a8 2e       	mov	r10, r24
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <vfprintf+0x2d4>
     fae:	b8 2c       	mov	r11, r8
     fb0:	a3 2c       	mov	r10, r3
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <vfprintf+0x2d6>
     fb4:	b8 2c       	mov	r11, r8
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <vfprintf+0x2d6>
     fb8:	b9 2c       	mov	r11, r9
     fba:	a4 fe       	sbrs	r10, 4
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <vfprintf+0x2f8>
     fbe:	fe 01       	movw	r30, r28
     fc0:	e8 0d       	add	r30, r8
     fc2:	f1 1d       	adc	r31, r1
     fc4:	80 81       	ld	r24, Z
     fc6:	80 33       	cpi	r24, 0x30	; 48
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <vfprintf+0x2ee>
     fca:	9a 2d       	mov	r25, r10
     fcc:	99 7e       	andi	r25, 0xE9	; 233
     fce:	a9 2e       	mov	r10, r25
     fd0:	09 c0       	rjmp	.+18     	; 0xfe4 <vfprintf+0x300>
     fd2:	a2 fe       	sbrs	r10, 2
     fd4:	06 c0       	rjmp	.+12     	; 0xfe2 <vfprintf+0x2fe>
     fd6:	b3 94       	inc	r11
     fd8:	b3 94       	inc	r11
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <vfprintf+0x300>
     fdc:	8a 2d       	mov	r24, r10
     fde:	86 78       	andi	r24, 0x86	; 134
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <vfprintf+0x300>
     fe2:	b3 94       	inc	r11
     fe4:	a3 fc       	sbrc	r10, 3
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <vfprintf+0x326>
     fe8:	a0 fe       	sbrs	r10, 0
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <vfprintf+0x314>
     fec:	b2 14       	cp	r11, r2
     fee:	88 f4       	brcc	.+34     	; 0x1012 <vfprintf+0x32e>
     ff0:	28 0c       	add	r2, r8
     ff2:	92 2c       	mov	r9, r2
     ff4:	9b 18       	sub	r9, r11
     ff6:	0e c0       	rjmp	.+28     	; 0x1014 <vfprintf+0x330>
     ff8:	b2 14       	cp	r11, r2
     ffa:	60 f4       	brcc	.+24     	; 0x1014 <vfprintf+0x330>
     ffc:	b6 01       	movw	r22, r12
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
    1006:	b3 94       	inc	r11
    1008:	f7 cf       	rjmp	.-18     	; 0xff8 <vfprintf+0x314>
    100a:	b2 14       	cp	r11, r2
    100c:	18 f4       	brcc	.+6      	; 0x1014 <vfprintf+0x330>
    100e:	2b 18       	sub	r2, r11
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <vfprintf+0x332>
    1012:	98 2c       	mov	r9, r8
    1014:	21 2c       	mov	r2, r1
    1016:	a4 fe       	sbrs	r10, 4
    1018:	10 c0       	rjmp	.+32     	; 0x103a <vfprintf+0x356>
    101a:	b6 01       	movw	r22, r12
    101c:	80 e3       	ldi	r24, 0x30	; 48
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
    1024:	a2 fe       	sbrs	r10, 2
    1026:	17 c0       	rjmp	.+46     	; 0x1056 <vfprintf+0x372>
    1028:	a1 fc       	sbrc	r10, 1
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <vfprintf+0x34e>
    102c:	88 e7       	ldi	r24, 0x78	; 120
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <vfprintf+0x352>
    1032:	88 e5       	ldi	r24, 0x58	; 88
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	b6 01       	movw	r22, r12
    1038:	0c c0       	rjmp	.+24     	; 0x1052 <vfprintf+0x36e>
    103a:	8a 2d       	mov	r24, r10
    103c:	86 78       	andi	r24, 0x86	; 134
    103e:	59 f0       	breq	.+22     	; 0x1056 <vfprintf+0x372>
    1040:	a1 fe       	sbrs	r10, 1
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <vfprintf+0x364>
    1044:	8b e2       	ldi	r24, 0x2B	; 43
    1046:	01 c0       	rjmp	.+2      	; 0x104a <vfprintf+0x366>
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	a7 fc       	sbrc	r10, 7
    104c:	8d e2       	ldi	r24, 0x2D	; 45
    104e:	b6 01       	movw	r22, r12
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
    1056:	89 14       	cp	r8, r9
    1058:	38 f4       	brcc	.+14     	; 0x1068 <vfprintf+0x384>
    105a:	b6 01       	movw	r22, r12
    105c:	80 e3       	ldi	r24, 0x30	; 48
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
    1064:	9a 94       	dec	r9
    1066:	f7 cf       	rjmp	.-18     	; 0x1056 <vfprintf+0x372>
    1068:	8a 94       	dec	r8
    106a:	f3 01       	movw	r30, r6
    106c:	e8 0d       	add	r30, r8
    106e:	f1 1d       	adc	r31, r1
    1070:	80 81       	ld	r24, Z
    1072:	b6 01       	movw	r22, r12
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
    107a:	81 10       	cpse	r8, r1
    107c:	f5 cf       	rjmp	.-22     	; 0x1068 <vfprintf+0x384>
    107e:	22 20       	and	r2, r2
    1080:	09 f4       	brne	.+2      	; 0x1084 <vfprintf+0x3a0>
    1082:	42 ce       	rjmp	.-892    	; 0xd08 <vfprintf+0x24>
    1084:	b6 01       	movw	r22, r12
    1086:	80 e2       	ldi	r24, 0x20	; 32
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <fputc>
    108e:	2a 94       	dec	r2
    1090:	f6 cf       	rjmp	.-20     	; 0x107e <vfprintf+0x39a>
    1092:	f6 01       	movw	r30, r12
    1094:	86 81       	ldd	r24, Z+6	; 0x06
    1096:	97 81       	ldd	r25, Z+7	; 0x07
    1098:	02 c0       	rjmp	.+4      	; 0x109e <vfprintf+0x3ba>
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	9f ef       	ldi	r25, 0xFF	; 255
    109e:	2b 96       	adiw	r28, 0x0b	; 11
    10a0:	e2 e1       	ldi	r30, 0x12	; 18
    10a2:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__epilogue_restores__>

000010a6 <strnlen_P>:
    10a6:	fc 01       	movw	r30, r24
    10a8:	05 90       	lpm	r0, Z+
    10aa:	61 50       	subi	r22, 0x01	; 1
    10ac:	70 40       	sbci	r23, 0x00	; 0
    10ae:	01 10       	cpse	r0, r1
    10b0:	d8 f7       	brcc	.-10     	; 0x10a8 <strnlen_P+0x2>
    10b2:	80 95       	com	r24
    10b4:	90 95       	com	r25
    10b6:	8e 0f       	add	r24, r30
    10b8:	9f 1f       	adc	r25, r31
    10ba:	08 95       	ret

000010bc <strnlen>:
    10bc:	fc 01       	movw	r30, r24
    10be:	61 50       	subi	r22, 0x01	; 1
    10c0:	70 40       	sbci	r23, 0x00	; 0
    10c2:	01 90       	ld	r0, Z+
    10c4:	01 10       	cpse	r0, r1
    10c6:	d8 f7       	brcc	.-10     	; 0x10be <strnlen+0x2>
    10c8:	80 95       	com	r24
    10ca:	90 95       	com	r25
    10cc:	8e 0f       	add	r24, r30
    10ce:	9f 1f       	adc	r25, r31
    10d0:	08 95       	ret

000010d2 <fputc>:
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	fb 01       	movw	r30, r22
    10dc:	23 81       	ldd	r18, Z+3	; 0x03
    10de:	21 fd       	sbrc	r18, 1
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <fputc+0x16>
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	9f ef       	ldi	r25, 0xFF	; 255
    10e6:	2c c0       	rjmp	.+88     	; 0x1140 <fputc+0x6e>
    10e8:	22 ff       	sbrs	r18, 2
    10ea:	16 c0       	rjmp	.+44     	; 0x1118 <fputc+0x46>
    10ec:	46 81       	ldd	r20, Z+6	; 0x06
    10ee:	57 81       	ldd	r21, Z+7	; 0x07
    10f0:	24 81       	ldd	r18, Z+4	; 0x04
    10f2:	35 81       	ldd	r19, Z+5	; 0x05
    10f4:	42 17       	cp	r20, r18
    10f6:	53 07       	cpc	r21, r19
    10f8:	44 f4       	brge	.+16     	; 0x110a <fputc+0x38>
    10fa:	a0 81       	ld	r26, Z
    10fc:	b1 81       	ldd	r27, Z+1	; 0x01
    10fe:	9d 01       	movw	r18, r26
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	31 83       	std	Z+1, r19	; 0x01
    1106:	20 83       	st	Z, r18
    1108:	8c 93       	st	X, r24
    110a:	26 81       	ldd	r18, Z+6	; 0x06
    110c:	37 81       	ldd	r19, Z+7	; 0x07
    110e:	2f 5f       	subi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	37 83       	std	Z+7, r19	; 0x07
    1114:	26 83       	std	Z+6, r18	; 0x06
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <fputc+0x6e>
    1118:	8b 01       	movw	r16, r22
    111a:	ec 01       	movw	r28, r24
    111c:	fb 01       	movw	r30, r22
    111e:	00 84       	ldd	r0, Z+8	; 0x08
    1120:	f1 85       	ldd	r31, Z+9	; 0x09
    1122:	e0 2d       	mov	r30, r0
    1124:	09 95       	icall
    1126:	89 2b       	or	r24, r25
    1128:	e1 f6       	brne	.-72     	; 0x10e2 <fputc+0x10>
    112a:	d8 01       	movw	r26, r16
    112c:	16 96       	adiw	r26, 0x06	; 6
    112e:	8d 91       	ld	r24, X+
    1130:	9c 91       	ld	r25, X
    1132:	17 97       	sbiw	r26, 0x07	; 7
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	17 96       	adiw	r26, 0x07	; 7
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
    113c:	16 97       	sbiw	r26, 0x06	; 6
    113e:	ce 01       	movw	r24, r28
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <__ultoa_invert>:
    114a:	fa 01       	movw	r30, r20
    114c:	aa 27       	eor	r26, r26
    114e:	28 30       	cpi	r18, 0x08	; 8
    1150:	51 f1       	breq	.+84     	; 0x11a6 <__ultoa_invert+0x5c>
    1152:	20 31       	cpi	r18, 0x10	; 16
    1154:	81 f1       	breq	.+96     	; 0x11b6 <__ultoa_invert+0x6c>
    1156:	e8 94       	clt
    1158:	6f 93       	push	r22
    115a:	6e 7f       	andi	r22, 0xFE	; 254
    115c:	6e 5f       	subi	r22, 0xFE	; 254
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	af 4f       	sbci	r26, 0xFF	; 255
    1166:	b1 e0       	ldi	r27, 0x01	; 1
    1168:	3e d0       	rcall	.+124    	; 0x11e6 <__ultoa_invert+0x9c>
    116a:	b4 e0       	ldi	r27, 0x04	; 4
    116c:	3c d0       	rcall	.+120    	; 0x11e6 <__ultoa_invert+0x9c>
    116e:	67 0f       	add	r22, r23
    1170:	78 1f       	adc	r23, r24
    1172:	89 1f       	adc	r24, r25
    1174:	9a 1f       	adc	r25, r26
    1176:	a1 1d       	adc	r26, r1
    1178:	68 0f       	add	r22, r24
    117a:	79 1f       	adc	r23, r25
    117c:	8a 1f       	adc	r24, r26
    117e:	91 1d       	adc	r25, r1
    1180:	a1 1d       	adc	r26, r1
    1182:	6a 0f       	add	r22, r26
    1184:	71 1d       	adc	r23, r1
    1186:	81 1d       	adc	r24, r1
    1188:	91 1d       	adc	r25, r1
    118a:	a1 1d       	adc	r26, r1
    118c:	20 d0       	rcall	.+64     	; 0x11ce <__ultoa_invert+0x84>
    118e:	09 f4       	brne	.+2      	; 0x1192 <__ultoa_invert+0x48>
    1190:	68 94       	set
    1192:	3f 91       	pop	r19
    1194:	2a e0       	ldi	r18, 0x0A	; 10
    1196:	26 9f       	mul	r18, r22
    1198:	11 24       	eor	r1, r1
    119a:	30 19       	sub	r19, r0
    119c:	30 5d       	subi	r19, 0xD0	; 208
    119e:	31 93       	st	Z+, r19
    11a0:	de f6       	brtc	.-74     	; 0x1158 <__ultoa_invert+0xe>
    11a2:	cf 01       	movw	r24, r30
    11a4:	08 95       	ret
    11a6:	46 2f       	mov	r20, r22
    11a8:	47 70       	andi	r20, 0x07	; 7
    11aa:	40 5d       	subi	r20, 0xD0	; 208
    11ac:	41 93       	st	Z+, r20
    11ae:	b3 e0       	ldi	r27, 0x03	; 3
    11b0:	0f d0       	rcall	.+30     	; 0x11d0 <__ultoa_invert+0x86>
    11b2:	c9 f7       	brne	.-14     	; 0x11a6 <__ultoa_invert+0x5c>
    11b4:	f6 cf       	rjmp	.-20     	; 0x11a2 <__ultoa_invert+0x58>
    11b6:	46 2f       	mov	r20, r22
    11b8:	4f 70       	andi	r20, 0x0F	; 15
    11ba:	40 5d       	subi	r20, 0xD0	; 208
    11bc:	4a 33       	cpi	r20, 0x3A	; 58
    11be:	18 f0       	brcs	.+6      	; 0x11c6 <__ultoa_invert+0x7c>
    11c0:	49 5d       	subi	r20, 0xD9	; 217
    11c2:	31 fd       	sbrc	r19, 1
    11c4:	40 52       	subi	r20, 0x20	; 32
    11c6:	41 93       	st	Z+, r20
    11c8:	02 d0       	rcall	.+4      	; 0x11ce <__ultoa_invert+0x84>
    11ca:	a9 f7       	brne	.-22     	; 0x11b6 <__ultoa_invert+0x6c>
    11cc:	ea cf       	rjmp	.-44     	; 0x11a2 <__ultoa_invert+0x58>
    11ce:	b4 e0       	ldi	r27, 0x04	; 4
    11d0:	a6 95       	lsr	r26
    11d2:	97 95       	ror	r25
    11d4:	87 95       	ror	r24
    11d6:	77 95       	ror	r23
    11d8:	67 95       	ror	r22
    11da:	ba 95       	dec	r27
    11dc:	c9 f7       	brne	.-14     	; 0x11d0 <__ultoa_invert+0x86>
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	61 05       	cpc	r22, r1
    11e2:	71 05       	cpc	r23, r1
    11e4:	08 95       	ret
    11e6:	9b 01       	movw	r18, r22
    11e8:	ac 01       	movw	r20, r24
    11ea:	0a 2e       	mov	r0, r26
    11ec:	06 94       	lsr	r0
    11ee:	57 95       	ror	r21
    11f0:	47 95       	ror	r20
    11f2:	37 95       	ror	r19
    11f4:	27 95       	ror	r18
    11f6:	ba 95       	dec	r27
    11f8:	c9 f7       	brne	.-14     	; 0x11ec <__ultoa_invert+0xa2>
    11fa:	62 0f       	add	r22, r18
    11fc:	73 1f       	adc	r23, r19
    11fe:	84 1f       	adc	r24, r20
    1200:	95 1f       	adc	r25, r21
    1202:	a0 1d       	adc	r26, r0
    1204:	08 95       	ret

00001206 <__prologue_saves__>:
    1206:	2f 92       	push	r2
    1208:	3f 92       	push	r3
    120a:	4f 92       	push	r4
    120c:	5f 92       	push	r5
    120e:	6f 92       	push	r6
    1210:	7f 92       	push	r7
    1212:	8f 92       	push	r8
    1214:	9f 92       	push	r9
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	ca 1b       	sub	r28, r26
    1230:	db 0b       	sbc	r29, r27
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	09 94       	ijmp

0000123e <__epilogue_restores__>:
    123e:	2a 88       	ldd	r2, Y+18	; 0x12
    1240:	39 88       	ldd	r3, Y+17	; 0x11
    1242:	48 88       	ldd	r4, Y+16	; 0x10
    1244:	5f 84       	ldd	r5, Y+15	; 0x0f
    1246:	6e 84       	ldd	r6, Y+14	; 0x0e
    1248:	7d 84       	ldd	r7, Y+13	; 0x0d
    124a:	8c 84       	ldd	r8, Y+12	; 0x0c
    124c:	9b 84       	ldd	r9, Y+11	; 0x0b
    124e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1250:	b9 84       	ldd	r11, Y+9	; 0x09
    1252:	c8 84       	ldd	r12, Y+8	; 0x08
    1254:	df 80       	ldd	r13, Y+7	; 0x07
    1256:	ee 80       	ldd	r14, Y+6	; 0x06
    1258:	fd 80       	ldd	r15, Y+5	; 0x05
    125a:	0c 81       	ldd	r16, Y+4	; 0x04
    125c:	1b 81       	ldd	r17, Y+3	; 0x03
    125e:	aa 81       	ldd	r26, Y+2	; 0x02
    1260:	b9 81       	ldd	r27, Y+1	; 0x01
    1262:	ce 0f       	add	r28, r30
    1264:	d1 1d       	adc	r29, r1
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	ed 01       	movw	r28, r26
    1272:	08 95       	ret

00001274 <_exit>:
    1274:	f8 94       	cli

00001276 <__stop_program>:
    1276:	ff cf       	rjmp	.-2      	; 0x1276 <__stop_program>
